
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a748  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b8  0800a8d8  0800a8d8  0001a8d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b290  0800b290  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b290  0800b290  0001b290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b298  0800b298  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b298  0800b298  0001b298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b29c  0800b29c  0001b29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  0800b2a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c8  200002b4  0800b554  000202b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c7c  0800b554  00020c7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019dbe  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037d3  00000000  00000000  0003a0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  0003d878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  0003eb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a753  00000000  00000000  0003fc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179d8  00000000  00000000  0006a393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f77d5  00000000  00000000  00081d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179540  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000633c  00000000  00000000  00179594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0017f8d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  0017f8f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b4 	.word	0x200002b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8c0 	.word	0x0800a8c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b8 	.word	0x200002b8
 80001cc:	0800a8c0 	.word	0x0800a8c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b2d      	cmp	r3, #45	; 0x2d
 8000f5c:	d119      	bne.n	8000f92 <ParseNumber+0x52>
        minus = 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3301      	adds	r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
        i++;
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000f6e:	e010      	b.n	8000f92 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	3b30      	subs	r3, #48	; 0x30
 8000f82:	4413      	add	r3, r2
 8000f84:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
        i++;
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b2f      	cmp	r3, #47	; 0x2f
 8000f98:	d903      	bls.n	8000fa2 <ParseNumber+0x62>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b39      	cmp	r3, #57	; 0x39
 8000fa0:	d9e6      	bls.n	8000f70 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d002      	beq.n	8000fae <ParseNumber+0x6e>
        *cnt = i;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	7bba      	ldrb	r2, [r7, #14]
 8000fac:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <ParseNumber+0x7a>
        return 0 - sum;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	425b      	negs	r3, r3
 8000fb8:	e000      	b.n	8000fbc <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000fba:	68bb      	ldr	r3, [r7, #8]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000fd6:	e019      	b.n	800100c <ParseIP+0x44>
    hexcnt = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b2e      	cmp	r3, #46	; 0x2e
 8000fe2:	d00e      	beq.n	8001002 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8000fe4:	f107 030e 	add.w	r3, r7, #14
 8000fe8:	4619      	mov	r1, r3
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffa8 	bl	8000f40 <ParseNumber>
 8000ff0:	4601      	mov	r1, r0
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	73fa      	strb	r2, [r7, #15]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b2ca      	uxtb	r2, r1
 8001000:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	461a      	mov	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1e1      	bne.n	8000fd8 <ParseIP+0x10>
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	3302      	adds	r3, #2
 8001032:	4934      	ldr	r1, [pc, #208]	; (8001104 <AT_ParseInfo+0xe4>)
 8001034:	4618      	mov	r0, r3
 8001036:	f007 fa9d 	bl	8008574 <strtok>
 800103a:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 800103c:	e05a      	b.n	80010f4 <AT_ParseInfo+0xd4>
    switch (num++) {
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	1c5a      	adds	r2, r3, #1
 8001042:	72fa      	strb	r2, [r7, #11]
 8001044:	2b06      	cmp	r3, #6
 8001046:	d84f      	bhi.n	80010e8 <AT_ParseInfo+0xc8>
 8001048:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <AT_ParseInfo+0x30>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	0800106d 	.word	0x0800106d
 8001054:	0800107b 	.word	0x0800107b
 8001058:	0800108b 	.word	0x0800108b
 800105c:	0800109b 	.word	0x0800109b
 8001060:	080010ab 	.word	0x080010ab
 8001064:	080010bb 	.word	0x080010bb
 8001068:	080010cf 	.word	0x080010cf
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2220      	movs	r2, #32
 8001070:	68f9      	ldr	r1, [r7, #12]
 8001072:	4618      	mov	r0, r3
 8001074:	f007 fa53 	bl	800851e <strncpy>
      break;
 8001078:	e037      	b.n	80010ea <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3320      	adds	r3, #32
 800107e:	2218      	movs	r2, #24
 8001080:	68f9      	ldr	r1, [r7, #12]
 8001082:	4618      	mov	r0, r3
 8001084:	f007 fa4b 	bl	800851e <strncpy>
      break;
 8001088:	e02f      	b.n	80010ea <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3338      	adds	r3, #56	; 0x38
 800108e:	2210      	movs	r2, #16
 8001090:	68f9      	ldr	r1, [r7, #12]
 8001092:	4618      	mov	r0, r3
 8001094:	f007 fa43 	bl	800851e <strncpy>
      break;
 8001098:	e027      	b.n	80010ea <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3348      	adds	r3, #72	; 0x48
 800109e:	2210      	movs	r2, #16
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f007 fa3b 	bl	800851e <strncpy>
      break;
 80010a8:	e01f      	b.n	80010ea <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3358      	adds	r3, #88	; 0x58
 80010ae:	2210      	movs	r2, #16
 80010b0:	68f9      	ldr	r1, [r7, #12]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f007 fa33 	bl	800851e <strncpy>
      break;
 80010b8:	e017      	b.n	80010ea <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80010ba:	2100      	movs	r1, #0
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f7ff ff3f 	bl	8000f40 <ParseNumber>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 80010cc:	e00d      	b.n	80010ea <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 80010ce:	490e      	ldr	r1, [pc, #56]	; (8001108 <AT_ParseInfo+0xe8>)
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f007 fa4f 	bl	8008574 <strtok>
 80010d6:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3368      	adds	r3, #104	; 0x68
 80010dc:	2220      	movs	r2, #32
 80010de:	68f9      	ldr	r1, [r7, #12]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f007 fa1c 	bl	800851e <strncpy>
      break;
 80010e6:	e000      	b.n	80010ea <AT_ParseInfo+0xca>

    default: break;
 80010e8:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80010ea:	4906      	ldr	r1, [pc, #24]	; (8001104 <AT_ParseInfo+0xe4>)
 80010ec:	2000      	movs	r0, #0
 80010ee:	f007 fa41 	bl	8008574 <strtok>
 80010f2:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1a1      	bne.n	800103e <AT_ParseInfo+0x1e>
  }
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	0800a908 	.word	0x0800a908
 8001108:	0800a90c 	.word	0x0800a90c

0800110c <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3302      	adds	r3, #2
 800111e:	4952      	ldr	r1, [pc, #328]	; (8001268 <AT_ParseConnSettings+0x15c>)
 8001120:	4618      	mov	r0, r3
 8001122:	f007 fa27 	bl	8008574 <strtok>
 8001126:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001128:	e095      	b.n	8001256 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	73fa      	strb	r2, [r7, #15]
 8001130:	2b0b      	cmp	r3, #11
 8001132:	d87f      	bhi.n	8001234 <AT_ParseConnSettings+0x128>
 8001134:	a201      	add	r2, pc, #4	; (adr r2, 800113c <AT_ParseConnSettings+0x30>)
 8001136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113a:	bf00      	nop
 800113c:	0800116d 	.word	0x0800116d
 8001140:	0800117b 	.word	0x0800117b
 8001144:	0800118b 	.word	0x0800118b
 8001148:	0800119f 	.word	0x0800119f
 800114c:	080011b3 	.word	0x080011b3
 8001150:	080011c7 	.word	0x080011c7
 8001154:	080011d5 	.word	0x080011d5
 8001158:	080011e3 	.word	0x080011e3
 800115c:	080011f1 	.word	0x080011f1
 8001160:	080011ff 	.word	0x080011ff
 8001164:	0800120d 	.word	0x0800120d
 8001168:	08001221 	.word	0x08001221
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2221      	movs	r2, #33	; 0x21
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	4618      	mov	r0, r3
 8001174:	f007 f9d3 	bl	800851e <strncpy>
      break;
 8001178:	e05d      	b.n	8001236 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	3321      	adds	r3, #33	; 0x21
 800117e:	2221      	movs	r2, #33	; 0x21
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	4618      	mov	r0, r3
 8001184:	f007 f9cb 	bl	800851e <strncpy>
      break;
 8001188:	e055      	b.n	8001236 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800118a:	2100      	movs	r1, #0
 800118c:	68b8      	ldr	r0, [r7, #8]
 800118e:	f7ff fed7 	bl	8000f40 <ParseNumber>
 8001192:	4603      	mov	r3, r0
 8001194:	b2da      	uxtb	r2, r3
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 800119c:	e04b      	b.n	8001236 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800119e:	2100      	movs	r1, #0
 80011a0:	68b8      	ldr	r0, [r7, #8]
 80011a2:	f7ff fecd 	bl	8000f40 <ParseNumber>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 80011b0:	e041      	b.n	8001236 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80011b2:	2100      	movs	r1, #0
 80011b4:	68b8      	ldr	r0, [r7, #8]
 80011b6:	f7ff fec3 	bl	8000f40 <ParseNumber>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80011c4:	e037      	b.n	8001236 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	3348      	adds	r3, #72	; 0x48
 80011ca:	4619      	mov	r1, r3
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	f7ff fefb 	bl	8000fc8 <ParseIP>
      break;
 80011d2:	e030      	b.n	8001236 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	334c      	adds	r3, #76	; 0x4c
 80011d8:	4619      	mov	r1, r3
 80011da:	68b8      	ldr	r0, [r7, #8]
 80011dc:	f7ff fef4 	bl	8000fc8 <ParseIP>
      break;
 80011e0:	e029      	b.n	8001236 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3350      	adds	r3, #80	; 0x50
 80011e6:	4619      	mov	r1, r3
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f7ff feed 	bl	8000fc8 <ParseIP>
      break;
 80011ee:	e022      	b.n	8001236 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	3354      	adds	r3, #84	; 0x54
 80011f4:	4619      	mov	r1, r3
 80011f6:	68b8      	ldr	r0, [r7, #8]
 80011f8:	f7ff fee6 	bl	8000fc8 <ParseIP>
      break;
 80011fc:	e01b      	b.n	8001236 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3358      	adds	r3, #88	; 0x58
 8001202:	4619      	mov	r1, r3
 8001204:	68b8      	ldr	r0, [r7, #8]
 8001206:	f7ff fedf 	bl	8000fc8 <ParseIP>
      break;
 800120a:	e014      	b.n	8001236 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800120c:	2100      	movs	r1, #0
 800120e:	68b8      	ldr	r0, [r7, #8]
 8001210:	f7ff fe96 	bl	8000f40 <ParseNumber>
 8001214:	4603      	mov	r3, r0
 8001216:	b2da      	uxtb	r2, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800121e:	e00a      	b.n	8001236 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8001220:	2100      	movs	r1, #0
 8001222:	68b8      	ldr	r0, [r7, #8]
 8001224:	f7ff fe8c 	bl	8000f40 <ParseNumber>
 8001228:	4603      	mov	r3, r0
 800122a:	b2da      	uxtb	r2, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8001232:	e000      	b.n	8001236 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8001234:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001236:	490c      	ldr	r1, [pc, #48]	; (8001268 <AT_ParseConnSettings+0x15c>)
 8001238:	2000      	movs	r0, #0
 800123a:	f007 f99b 	bl	8008574 <strtok>
 800123e:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d007      	beq.n	8001256 <AT_ParseConnSettings+0x14a>
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	3b01      	subs	r3, #1
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b2c      	cmp	r3, #44	; 0x2c
 800124e:	d102      	bne.n	8001256 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	3301      	adds	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	f47f af66 	bne.w	800112a <AT_ParseConnSettings+0x1e>
    }
  }
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	0800a908 	.word	0x0800a908

0800126c <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  int16_t recv_len = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	827b      	strh	r3, [r7, #18]
  LOCK_WIFI();  

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001286:	68b8      	ldr	r0, [r7, #8]
 8001288:	f7fe ffa2 	bl	80001d0 <strlen>
 800128c:	4603      	mov	r3, r0
 800128e:	b299      	uxth	r1, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8001296:	461a      	mov	r2, r3
 8001298:	68b8      	ldr	r0, [r7, #8]
 800129a:	47a0      	blx	r4
 800129c:	4603      	mov	r3, r0
 800129e:	617b      	str	r3, [r7, #20]

  if( ret > 0)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	dd33      	ble.n	800130e <AT_ExecuteCommand+0xa2>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 80012b2:	f44f 61af 	mov.w	r1, #1400	; 0x578
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	4798      	blx	r3
 80012ba:	4603      	mov	r3, r0
 80012bc:	827b      	strh	r3, [r7, #18]
    if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 80012be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	dd1c      	ble.n	8001300 <AT_ExecuteCommand+0x94>
 80012c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012ca:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80012ce:	da17      	bge.n	8001300 <AT_ExecuteCommand+0x94>
    {
      *(pdata + recv_len) = 0;
 80012d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 80012dc:	490e      	ldr	r1, [pc, #56]	; (8001318 <AT_ExecuteCommand+0xac>)
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f007 f930 	bl	8008544 <strstr>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <AT_ExecuteCommand+0x82>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e010      	b.n	8001310 <AT_ExecuteCommand+0xa4>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80012ee:	490b      	ldr	r1, [pc, #44]	; (800131c <AT_ExecuteCommand+0xb0>)
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f007 f927 	bl	8008544 <strstr>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <AT_ExecuteCommand+0x94>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80012fc:	2305      	movs	r3, #5
 80012fe:	e007      	b.n	8001310 <AT_ExecuteCommand+0xa4>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 8001300:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001304:	f113 0f04 	cmn.w	r3, #4
 8001308:	d101      	bne.n	800130e <AT_ExecuteCommand+0xa2>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 800130a:	2306      	movs	r3, #6
 800130c:	e000      	b.n	8001310 <AT_ExecuteCommand+0xa4>
    }
  }
  UNLOCK_WIFI();  
  return ES_WIFI_STATUS_IO_ERROR;
 800130e:	2304      	movs	r3, #4
}
 8001310:	4618      	mov	r0, r3
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	0800a910 	.word	0x0800a910
 800131c:	0800a91c 	.word	0x0800a91c

08001320 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();  
  cmd_len = strlen((char*)cmd);
 800133a:	68b8      	ldr	r0, [r7, #8]
 800133c:	f7fe ff48 	bl	80001d0 <strlen>
 8001340:	4603      	mov	r3, r0
 8001342:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001344:	8a7b      	ldrh	r3, [r7, #18]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <AT_RequestSendData+0x32>
 800134e:	2302      	movs	r3, #2
 8001350:	e053      	b.n	80013fa <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800135e:	8a79      	ldrh	r1, [r7, #18]
 8001360:	68b8      	ldr	r0, [r7, #8]
 8001362:	4798      	blx	r3
 8001364:	4603      	mov	r3, r0
 8001366:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001368:	8a3a      	ldrh	r2, [r7, #16]
 800136a:	8a7b      	ldrh	r3, [r7, #18]
 800136c:	429a      	cmp	r2, r3
 800136e:	d143      	bne.n	80013f8 <AT_RequestSendData+0xd8>
  {    
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800137c:	8879      	ldrh	r1, [r7, #2]
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	4798      	blx	r3
 8001382:	4603      	mov	r3, r0
 8001384:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001386:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	429a      	cmp	r2, r3
 800138e:	d131      	bne.n	80013f4 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800139c:	2100      	movs	r1, #0
 800139e:	6a38      	ldr	r0, [r7, #32]
 80013a0:	4798      	blx	r3
 80013a2:	4603      	mov	r3, r0
 80013a4:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 80013a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dd19      	ble.n	80013e2 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 80013ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013b2:	6a3a      	ldr	r2, [r7, #32]
 80013b4:	4413      	add	r3, r2
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80013ba:	4912      	ldr	r1, [pc, #72]	; (8001404 <AT_RequestSendData+0xe4>)
 80013bc:	6a38      	ldr	r0, [r7, #32]
 80013be:	f007 f8c1 	bl	8008544 <strstr>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e016      	b.n	80013fa <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 80013cc:	490e      	ldr	r1, [pc, #56]	; (8001408 <AT_RequestSendData+0xe8>)
 80013ce:	6a38      	ldr	r0, [r7, #32]
 80013d0:	f007 f8b8 	bl	8008544 <strstr>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80013da:	2305      	movs	r3, #5
 80013dc:	e00d      	b.n	80013fa <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 80013de:	2302      	movs	r3, #2
 80013e0:	e00b      	b.n	80013fa <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 80013e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013e6:	f113 0f04 	cmn.w	r3, #4
 80013ea:	d101      	bne.n	80013f0 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80013ec:	2306      	movs	r3, #6
 80013ee:	e004      	b.n	80013fa <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 80013f0:	2302      	movs	r3, #2
 80013f2:	e002      	b.n	80013fa <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80013f4:	2302      	movs	r3, #2
 80013f6:	e000      	b.n	80013fa <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80013f8:	2304      	movs	r3, #4
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	0800a910 	.word	0x0800a910
 8001408:	0800a91c 	.word	0x0800a91c

0800140c <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001414:	2302      	movs	r3, #2
 8001416:	73fb      	strb	r3, [r7, #15]
  aos_mutex_new(&es_wifi_mutex);
#endif

  LOCK_WIFI();  

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f247 5230 	movw	r2, #30000	; 0x7530
 800141e:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001428:	2000      	movs	r0, #0
 800142a:	4798      	blx	r3
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d113      	bne.n	800145a <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001438:	461a      	mov	r2, r3
 800143a:	490a      	ldr	r1, [pc, #40]	; (8001464 <ES_WIFI_Init+0x58>)
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff15 	bl	800126c <AT_ExecuteCommand>
 8001442:	4603      	mov	r3, r0
 8001444:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d106      	bne.n	800145a <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001452:	4619      	mov	r1, r3
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fde3 	bl	8001020 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800145a:	7bfb      	ldrb	r3, [r7, #15]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	0800a92c 	.word	0x0800a92c

08001468 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00b      	beq.n	8001494 <ES_WIFI_RegisterBusIO+0x2c>
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d008      	beq.n	8001494 <ES_WIFI_RegisterBusIO+0x2c>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <ES_WIFI_RegisterBusIO+0x2c>
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <ES_WIFI_RegisterBusIO+0x2c>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001494:	2302      	movs	r3, #2
 8001496:	e014      	b.n	80014c2 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	4932      	ldr	r1, [pc, #200]	; (80015b0 <ES_WIFI_Connect+0xe0>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f006 ffb5 	bl	8008458 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014fa:	461a      	mov	r2, r3
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f7ff feb5 	bl	800126c <AT_ExecuteCommand>
 8001502:	4603      	mov	r3, r0
 8001504:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d14b      	bne.n	80015a4 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4927      	ldr	r1, [pc, #156]	; (80015b4 <ES_WIFI_Connect+0xe4>)
 8001516:	4618      	mov	r0, r3
 8001518:	f006 ff9e 	bl	8008458 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001528:	461a      	mov	r2, r3
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff fe9e 	bl	800126c <AT_ExecuteCommand>
 8001530:	4603      	mov	r3, r0
 8001532:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001534:	7dfb      	ldrb	r3, [r7, #23]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d134      	bne.n	80015a4 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001548:	78fa      	ldrb	r2, [r7, #3]
 800154a:	491b      	ldr	r1, [pc, #108]	; (80015b8 <ES_WIFI_Connect+0xe8>)
 800154c:	4618      	mov	r0, r3
 800154e:	f006 ff83 	bl	8008458 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800155e:	461a      	mov	r2, r3
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff fe83 	bl	800126c <AT_ExecuteCommand>
 8001566:	4603      	mov	r3, r0
 8001568:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d119      	bne.n	80015a4 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001576:	4911      	ldr	r1, [pc, #68]	; (80015bc <ES_WIFI_Connect+0xec>)
 8001578:	4618      	mov	r0, r3
 800157a:	f006 ff6d 	bl	8008458 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800158a:	461a      	mov	r2, r3
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f7ff fe6d 	bl	800126c <AT_ExecuteCommand>
 8001592:	4603      	mov	r3, r0
 8001594:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d103      	bne.n	80015a4 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	0800a938 	.word	0x0800a938
 80015b4:	0800a940 	.word	0x0800a940
 80015b8:	0800a948 	.word	0x0800a948
 80015bc:	0800a950 	.word	0x0800a950

080015c0 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C?\r");
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ce:	4910      	ldr	r1, [pc, #64]	; (8001610 <ES_WIFI_GetNetworkSettings+0x50>)
 80015d0:	4618      	mov	r0, r3
 80015d2:	f006 ff41 	bl	8008458 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015e2:	461a      	mov	r2, r3
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fe41 	bl	800126c <AT_ExecuteCommand>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d108      	bne.n	8001606 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	338d      	adds	r3, #141	; 0x8d
 80015fe:	4619      	mov	r1, r3
 8001600:	4610      	mov	r0, r2
 8001602:	f7ff fd83 	bl	800110c <AT_ParseConnSettings>
  }
  
  UNLOCK_WIFI();
  return ret;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	0800a95c 	.word	0x0800a95c

08001614 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b087      	sub	sp, #28
 8001618:	af02      	add	r7, sp, #8
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	785b      	ldrb	r3, [r3, #1]
 800162c:	461a      	mov	r2, r3
 800162e:	4951      	ldr	r1, [pc, #324]	; (8001774 <ES_WIFI_StartClientConnection+0x160>)
 8001630:	f006 ff12 	bl	8008458 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001640:	461a      	mov	r2, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fe12 	bl	800126c <AT_ExecuteCommand>
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d114      	bne.n	800167c <ES_WIFI_StartClientConnection+0x68>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4946      	ldr	r1, [pc, #280]	; (8001778 <ES_WIFI_StartClientConnection+0x164>)
 8001660:	f006 fefa 	bl	8008458 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001670:	461a      	mov	r2, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fdfa 	bl	800126c <AT_ExecuteCommand>
 8001678:	4603      	mov	r3, r0
 800167a:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->LocalPort > 0))
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <ES_WIFI_StartClientConnection+0xa0>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	889b      	ldrh	r3, [r3, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d014      	beq.n	80016b4 <ES_WIFI_StartClientConnection+0xa0>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	889b      	ldrh	r3, [r3, #4]
 8001694:	461a      	mov	r2, r3
 8001696:	4939      	ldr	r1, [pc, #228]	; (800177c <ES_WIFI_StartClientConnection+0x168>)
 8001698:	f006 fede 	bl	8008458 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016a8:	461a      	mov	r2, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fdde 	bl	800126c <AT_ExecuteCommand>
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d118      	bne.n	80016ec <ES_WIFI_StartClientConnection+0xd8>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	885b      	ldrh	r3, [r3, #2]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d014      	beq.n	80016ec <ES_WIFI_StartClientConnection+0xd8>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	885b      	ldrh	r3, [r3, #2]
 80016cc:	461a      	mov	r2, r3
 80016ce:	492c      	ldr	r1, [pc, #176]	; (8001780 <ES_WIFI_StartClientConnection+0x16c>)
 80016d0:	f006 fec2 	bl	8008458 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016e0:	461a      	mov	r2, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fdc2 	bl	800126c <AT_ExecuteCommand>
 80016e8:	4603      	mov	r3, r0
 80016ea:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_CONNECTION))
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d124      	bne.n	800173c <ES_WIFI_StartClientConnection+0x128>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d120      	bne.n	800173c <ES_WIFI_StartClientConnection+0x128>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	799b      	ldrb	r3, [r3, #6]
 8001704:	4619      	mov	r1, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	79db      	ldrb	r3, [r3, #7]
 800170a:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001710:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	9200      	str	r2, [sp, #0]
 800171a:	4623      	mov	r3, r4
 800171c:	460a      	mov	r2, r1
 800171e:	4919      	ldr	r1, [pc, #100]	; (8001784 <ES_WIFI_StartClientConnection+0x170>)
 8001720:	f006 fe9a 	bl	8008458 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001730:	461a      	mov	r2, r3
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff fd9a 	bl	800126c <AT_ExecuteCommand>
 8001738:	4603      	mov	r3, r0
 800173a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d112      	bne.n	8001768 <ES_WIFI_StartClientConnection+0x154>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001748:	490f      	ldr	r1, [pc, #60]	; (8001788 <ES_WIFI_StartClientConnection+0x174>)
 800174a:	4618      	mov	r0, r3
 800174c:	f006 fe84 	bl	8008458 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800175c:	461a      	mov	r2, r3
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fd84 	bl	800126c <AT_ExecuteCommand>
 8001764:	4603      	mov	r3, r0
 8001766:	73fb      	strb	r3, [r7, #15]
  }
  
  UNLOCK_WIFI();
  return ret;
 8001768:	7bfb      	ldrb	r3, [r7, #15]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	0800aa30 	.word	0x0800aa30
 8001778:	0800aa38 	.word	0x0800aa38
 800177c:	0800aa40 	.word	0x0800aa40
 8001780:	0800aa48 	.word	0x0800aa48
 8001784:	0800aa50 	.word	0x0800aa50
 8001788:	0800aa60 	.word	0x0800aa60

0800178c <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af02      	add	r7, sp, #8
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	461a      	mov	r2, r3
 8001798:	460b      	mov	r3, r1
 800179a:	72fb      	strb	r3, [r7, #11]
 800179c:	4613      	mov	r3, r2
 800179e:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80017a0:	2302      	movs	r3, #2
 80017a2:	75fb      	strb	r3, [r7, #23]
  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80017a4:	893b      	ldrh	r3, [r7, #8]
 80017a6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80017aa:	d302      	bcc.n	80017b2 <ES_WIFI_SendData+0x26>
 80017ac:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80017b0:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	893a      	ldrh	r2, [r7, #8]
 80017b6:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017be:	7afa      	ldrb	r2, [r7, #11]
 80017c0:	4942      	ldr	r1, [pc, #264]	; (80018cc <ES_WIFI_SendData+0x140>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f006 fe48 	bl	8008458 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017d4:	461a      	mov	r2, r3
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f7ff fd48 	bl	800126c <AT_ExecuteCommand>
 80017dc:	4603      	mov	r3, r0
 80017de:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d15e      	bne.n	80018a4 <ES_WIFI_SendData+0x118>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ee:	4938      	ldr	r1, [pc, #224]	; (80018d0 <ES_WIFI_SendData+0x144>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f006 fe31 	bl	8008458 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001802:	461a      	mov	r2, r3
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f7ff fd31 	bl	800126c <AT_ExecuteCommand>
 800180a:	4603      	mov	r3, r0
 800180c:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800180e:	7dfb      	ldrb	r3, [r7, #23]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d13d      	bne.n	8001890 <ES_WIFI_SendData+0x104>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800181a:	893a      	ldrh	r2, [r7, #8]
 800181c:	492d      	ldr	r1, [pc, #180]	; (80018d4 <ES_WIFI_SendData+0x148>)
 800181e:	4618      	mov	r0, r3
 8001820:	f006 fe1a 	bl	8008458 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001830:	893a      	ldrh	r2, [r7, #8]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	4613      	mov	r3, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f7ff fd71 	bl	8001320 <AT_RequestSendData>
 800183e:	4603      	mov	r3, r0
 8001840:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001842:	7dfb      	ldrb	r3, [r7, #23]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d119      	bne.n	800187c <ES_WIFI_SendData+0xf0>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800184e:	4922      	ldr	r1, [pc, #136]	; (80018d8 <ES_WIFI_SendData+0x14c>)
 8001850:	4618      	mov	r0, r3
 8001852:	f006 fe77 	bl	8008544 <strstr>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d02c      	beq.n	80018b6 <ES_WIFI_SendData+0x12a>
        {
          _DEBUG_("SEnd Data detect error %s\n", (char *)Obj->CmdData);
 800185c:	f240 722c 	movw	r2, #1836	; 0x72c
 8001860:	491e      	ldr	r1, [pc, #120]	; (80018dc <ES_WIFI_SendData+0x150>)
 8001862:	481f      	ldr	r0, [pc, #124]	; (80018e0 <ES_WIFI_SendData+0x154>)
 8001864:	f006 fd5a 	bl	800831c <iprintf>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800186e:	4619      	mov	r1, r3
 8001870:	481c      	ldr	r0, [pc, #112]	; (80018e4 <ES_WIFI_SendData+0x158>)
 8001872:	f006 fd53 	bl	800831c <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001876:	2302      	movs	r3, #2
 8001878:	75fb      	strb	r3, [r7, #23]
 800187a:	e01c      	b.n	80018b6 <ES_WIFI_SendData+0x12a>
        }
      }
      else
      {
        _DEBUG_("Send Data command failed\n");
 800187c:	f240 7232 	movw	r2, #1842	; 0x732
 8001880:	4916      	ldr	r1, [pc, #88]	; (80018dc <ES_WIFI_SendData+0x150>)
 8001882:	4817      	ldr	r0, [pc, #92]	; (80018e0 <ES_WIFI_SendData+0x154>)
 8001884:	f006 fd4a 	bl	800831c <iprintf>
 8001888:	4817      	ldr	r0, [pc, #92]	; (80018e8 <ES_WIFI_SendData+0x15c>)
 800188a:	f006 fdcd 	bl	8008428 <puts>
 800188e:	e012      	b.n	80018b6 <ES_WIFI_SendData+0x12a>
      }
    }
    else
    {
      _DEBUG_("S2 command failed\n");
 8001890:	f240 7237 	movw	r2, #1847	; 0x737
 8001894:	4911      	ldr	r1, [pc, #68]	; (80018dc <ES_WIFI_SendData+0x150>)
 8001896:	4812      	ldr	r0, [pc, #72]	; (80018e0 <ES_WIFI_SendData+0x154>)
 8001898:	f006 fd40 	bl	800831c <iprintf>
 800189c:	4813      	ldr	r0, [pc, #76]	; (80018ec <ES_WIFI_SendData+0x160>)
 800189e:	f006 fdc3 	bl	8008428 <puts>
 80018a2:	e008      	b.n	80018b6 <ES_WIFI_SendData+0x12a>
    }
  }
  else
  {
   _DEBUG_("P0 command failed\n");
 80018a4:	f240 723c 	movw	r2, #1852	; 0x73c
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <ES_WIFI_SendData+0x150>)
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <ES_WIFI_SendData+0x154>)
 80018ac:	f006 fd36 	bl	800831c <iprintf>
 80018b0:	480f      	ldr	r0, [pc, #60]	; (80018f0 <ES_WIFI_SendData+0x164>)
 80018b2:	f006 fdb9 	bl	8008428 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d102      	bne.n	80018c2 <ES_WIFI_SendData+0x136>
  {
    *SentLen = 0;
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	2200      	movs	r2, #0
 80018c0:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	0800aa30 	.word	0x0800aa30
 80018d0:	0800aabc 	.word	0x0800aabc
 80018d4:	0800aac4 	.word	0x0800aac4
 80018d8:	0800aad0 	.word	0x0800aad0
 80018dc:	0800aad8 	.word	0x0800aad8
 80018e0:	0800aaf0 	.word	0x0800aaf0
 80018e4:	0800aaf8 	.word	0x0800aaf8
 80018e8:	0800ab14 	.word	0x0800ab14
 80018ec:	0800ab30 	.word	0x0800ab30
 80018f0:	0800ab44 	.word	0x0800ab44

080018f4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	; 0x30
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 80018fc:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <SPI_WIFI_MspInit+0x164>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	4a55      	ldr	r2, [pc, #340]	; (8001a58 <SPI_WIFI_MspInit+0x164>)
 8001902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001906:	6593      	str	r3, [r2, #88]	; 0x58
 8001908:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <SPI_WIFI_MspInit+0x164>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <SPI_WIFI_MspInit+0x164>)
 8001916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001918:	4a4f      	ldr	r2, [pc, #316]	; (8001a58 <SPI_WIFI_MspInit+0x164>)
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001920:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <SPI_WIFI_MspInit+0x164>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192c:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <SPI_WIFI_MspInit+0x164>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <SPI_WIFI_MspInit+0x164>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001938:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <SPI_WIFI_MspInit+0x164>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001944:	4b44      	ldr	r3, [pc, #272]	; (8001a58 <SPI_WIFI_MspInit+0x164>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	4a43      	ldr	r2, [pc, #268]	; (8001a58 <SPI_WIFI_MspInit+0x164>)
 800194a:	f043 0310 	orr.w	r3, r3, #16
 800194e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001950:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <SPI_WIFI_MspInit+0x164>)
 8001952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001962:	483e      	ldr	r0, [pc, #248]	; (8001a5c <SPI_WIFI_MspInit+0x168>)
 8001964:	f003 f974 	bl	8004c50 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	4836      	ldr	r0, [pc, #216]	; (8001a5c <SPI_WIFI_MspInit+0x168>)
 8001982:	f002 feaf 	bl	80046e4 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001986:	2302      	movs	r3, #2
 8001988:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800198a:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <SPI_WIFI_MspInit+0x16c>)
 800198c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	4831      	ldr	r0, [pc, #196]	; (8001a64 <SPI_WIFI_MspInit+0x170>)
 800199e:	f002 fea1 	bl	80046e4 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80019a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	4829      	ldr	r0, [pc, #164]	; (8001a64 <SPI_WIFI_MspInit+0x170>)
 80019c0:	f002 fe90 	bl	80046e4 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET ); 
 80019c4:	2201      	movs	r2, #1
 80019c6:	2101      	movs	r1, #1
 80019c8:	4826      	ldr	r0, [pc, #152]	; (8001a64 <SPI_WIFI_MspInit+0x170>)
 80019ca:	f003 f941 	bl	8004c50 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80019ce:	2301      	movs	r3, #1
 80019d0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80019da:	2301      	movs	r3, #1
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	481f      	ldr	r0, [pc, #124]	; (8001a64 <SPI_WIFI_MspInit+0x170>)
 80019e6:	f002 fe7d 	bl	80046e4 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80019ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ee:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80019f8:	2301      	movs	r3, #1
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80019fc:	2306      	movs	r3, #6
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	4818      	ldr	r0, [pc, #96]	; (8001a68 <SPI_WIFI_MspInit+0x174>)
 8001a08:	f002 fe6c 	bl	80046e4 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001a1e:	2306      	movs	r3, #6
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4619      	mov	r1, r3
 8001a28:	480f      	ldr	r0, [pc, #60]	; (8001a68 <SPI_WIFI_MspInit+0x174>)
 8001a2a:	f002 fe5b 	bl	80046e4 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001a2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a32:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001a40:	2306      	movs	r3, #6
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4807      	ldr	r0, [pc, #28]	; (8001a68 <SPI_WIFI_MspInit+0x174>)
 8001a4c:	f002 fe4a 	bl	80046e4 <HAL_GPIO_Init>
}
 8001a50:	bf00      	nop
 8001a52:	3730      	adds	r7, #48	; 0x30
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48000400 	.word	0x48000400
 8001a60:	10110000 	.word	0x10110000
 8001a64:	48001000 	.word	0x48001000
 8001a68:	48000800 	.word	0x48000800

08001a6c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d13a      	bne.n	8001af6 <SPI_WIFI_Init+0x8a>
  {
    hspi.Instance               = SPI3;
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <SPI_WIFI_Init+0xa0>)
 8001a82:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <SPI_WIFI_Init+0xa4>)
 8001a84:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001a86:	4821      	ldr	r0, [pc, #132]	; (8001b0c <SPI_WIFI_Init+0xa0>)
 8001a88:	f7ff ff34 	bl	80018f4 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <SPI_WIFI_Init+0xa0>)
 8001a8e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a92:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <SPI_WIFI_Init+0xa0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <SPI_WIFI_Init+0xa0>)
 8001a9c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001aa0:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <SPI_WIFI_Init+0xa0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <SPI_WIFI_Init+0xa0>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <SPI_WIFI_Init+0xa0>)
 8001ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab4:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <SPI_WIFI_Init+0xa0>)
 8001ab8:	2210      	movs	r2, #16
 8001aba:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <SPI_WIFI_Init+0xa0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <SPI_WIFI_Init+0xa0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <SPI_WIFI_Init+0xa0>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <SPI_WIFI_Init+0xa0>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <SPI_WIFI_Init+0xa0>)
 8001ad6:	f003 ff1d 	bl	8005914 <HAL_SPI_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae4:	e00d      	b.n	8001b02 <SPI_WIFI_Init+0x96>
    }

	 // Enable Interrupt for Data Ready pin , GPIO_PIN1
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, 0x0F, 0x00);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	210f      	movs	r1, #15
 8001aea:	2007      	movs	r0, #7
 8001aec:	f002 fd83 	bl	80045f6 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001af0:	2007      	movs	r0, #7
 8001af2:	f002 fd9c 	bl	800462e <HAL_NVIC_EnableIRQ>
    
    // create Mutex and Semaphore
	RTOS_CREATE_SEM_MUTEX();
  }
  
  rc= SPI_WIFI_ResetModule();
 8001af6:	f000 f80d 	bl	8001b14 <SPI_WIFI_ResetModule>
 8001afa:	4603      	mov	r3, r0
 8001afc:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200003a8 	.word	0x200003a8
 8001b10:	40003c00 	.word	0x40003c00

08001b14 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001b1a:	f002 fc63 	bl	80043e4 <HAL_GetTick>
 8001b1e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001b24:	2200      	movs	r2, #0
 8001b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b2a:	4830      	ldr	r0, [pc, #192]	; (8001bec <SPI_WIFI_ResetModule+0xd8>)
 8001b2c:	f003 f890 	bl	8004c50 <HAL_GPIO_WritePin>
 8001b30:	200a      	movs	r0, #10
 8001b32:	f002 fc63 	bl	80043fc <HAL_Delay>
 8001b36:	2201      	movs	r2, #1
 8001b38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b3c:	482b      	ldr	r0, [pc, #172]	; (8001bec <SPI_WIFI_ResetModule+0xd8>)
 8001b3e:	f003 f887 	bl	8004c50 <HAL_GPIO_WritePin>
 8001b42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b46:	f002 fc59 	bl	80043fc <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4827      	ldr	r0, [pc, #156]	; (8001bec <SPI_WIFI_ResetModule+0xd8>)
 8001b50:	f003 f87e 	bl	8004c50 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001b54:	200f      	movs	r0, #15
 8001b56:	f000 f977 	bl	8001e48 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8001b5a:	e020      	b.n	8001b9e <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	463a      	mov	r2, r7
 8001b60:	18d1      	adds	r1, r2, r3
 8001b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b66:	2201      	movs	r2, #1
 8001b68:	4821      	ldr	r0, [pc, #132]	; (8001bf0 <SPI_WIFI_ResetModule+0xdc>)
 8001b6a:	f004 f8eb 	bl	8005d44 <HAL_SPI_Receive>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	3302      	adds	r3, #2
 8001b76:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001b78:	f002 fc34 	bl	80043e4 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b86:	d202      	bcs.n	8001b8e <SPI_WIFI_ResetModule+0x7a>
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS(); 
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2101      	movs	r1, #1
 8001b92:	4816      	ldr	r0, [pc, #88]	; (8001bec <SPI_WIFI_ResetModule+0xd8>)
 8001b94:	f003 f85c 	bl	8004c50 <HAL_GPIO_WritePin>
      return -1;
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9c:	e021      	b.n	8001be2 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	4812      	ldr	r0, [pc, #72]	; (8001bec <SPI_WIFI_ResetModule+0xd8>)
 8001ba2:	f003 f83d 	bl	8004c20 <HAL_GPIO_ReadPin>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d0d7      	beq.n	8001b5c <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS(); 
 8001bac:	2201      	movs	r2, #1
 8001bae:	2101      	movs	r1, #1
 8001bb0:	480e      	ldr	r0, [pc, #56]	; (8001bec <SPI_WIFI_ResetModule+0xd8>)
 8001bb2:	f003 f84d 	bl	8004c50 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001bb6:	783b      	ldrb	r3, [r7, #0]
 8001bb8:	2b15      	cmp	r3, #21
 8001bba:	d10e      	bne.n	8001bda <SPI_WIFI_ResetModule+0xc6>
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b15      	cmp	r3, #21
 8001bc0:	d10b      	bne.n	8001bda <SPI_WIFI_ResetModule+0xc6>
 8001bc2:	78bb      	ldrb	r3, [r7, #2]
 8001bc4:	2b0d      	cmp	r3, #13
 8001bc6:	d108      	bne.n	8001bda <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001bca:	2b0a      	cmp	r3, #10
 8001bcc:	d105      	bne.n	8001bda <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001bce:	793b      	ldrb	r3, [r7, #4]
 8001bd0:	2b3e      	cmp	r3, #62	; 0x3e
 8001bd2:	d102      	bne.n	8001bda <SPI_WIFI_ResetModule+0xc6>
 8001bd4:	797b      	ldrb	r3, [r7, #5]
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d002      	beq.n	8001be0 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	e000      	b.n	8001be2 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	48001000 	.word	0x48001000
 8001bf0:	200003a8 	.word	0x200003a8

08001bf4 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <SPI_WIFI_DeInit+0x10>)
 8001bfa:	f003 ff15 	bl	8005a28 <HAL_SPI_DeInit>
  RTOS_FREE_SEM_MUTEX();
  return 0;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200003a8 	.word	0x200003a8

08001c08 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001c10:	f002 fbe8 	bl	80043e4 <HAL_GetTick>
 8001c14:	4603      	mov	r3, r0
 8001c16:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8001c18:	e00a      	b.n	8001c30 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001c1a:	f002 fbe3 	bl	80043e4 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad2      	subs	r2, r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d902      	bls.n	8001c30 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e007      	b.n	8001c40 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001c30:	2102      	movs	r1, #2
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <wait_cmddata_rdy_high+0x40>)
 8001c34:	f002 fff4 	bl	8004c20 <HAL_GPIO_ReadPin>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d1ed      	bne.n	8001c1a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	48001000 	.word	0x48001000

08001c4c <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout); 
#else
  int tickstart = HAL_GetTick();
 8001c54:	f002 fbc6 	bl	80043e4 <HAL_GetTick>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001c5c:	e00a      	b.n	8001c74 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001c5e:	f002 fbc1 	bl	80043e4 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1ad2      	subs	r2, r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d902      	bls.n	8001c74 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	e004      	b.n	8001c7e <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <wait_cmddata_rdy_rising_event+0x3c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d0f0      	beq.n	8001c5e <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0; 
 8001c7c:	2300      	movs	r3, #0
#endif
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200002d0 	.word	0x200002d0

08001c8c <SPI_WIFI_ReceiveData>:
}
*/


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	460b      	mov	r3, r1
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS(); 
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4831      	ldr	r0, [pc, #196]	; (8001d68 <SPI_WIFI_ReceiveData+0xdc>)
 8001ca4:	f002 ffd4 	bl	8004c50 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f000 f8cd 	bl	8001e48 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ffcb 	bl	8001c4c <wait_cmddata_rdy_rising_event>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	da02      	bge.n	8001cc2 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001cbc:	f06f 0302 	mvn.w	r3, #2
 8001cc0:	e04e      	b.n	8001d60 <SPI_WIFI_ReceiveData+0xd4>
  }

  LOCK_SPI();  
  WIFI_ENABLE_NSS(); 
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4828      	ldr	r0, [pc, #160]	; (8001d68 <SPI_WIFI_ReceiveData+0xdc>)
 8001cc8:	f002 ffc2 	bl	8004c50 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001ccc:	200f      	movs	r0, #15
 8001cce:	f000 f8bb 	bl	8001e48 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001cd2:	e037      	b.n	8001d44 <SPI_WIFI_ReceiveData+0xb8>
  {
    if((length < len) || (!len))
 8001cd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cd8:	897b      	ldrh	r3, [r7, #10]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	db02      	blt.n	8001ce4 <SPI_WIFI_ReceiveData+0x58>
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d136      	bne.n	8001d52 <SPI_WIFI_ReceiveData+0xc6>
    {
      //spi_rx_event=1;
      if (HAL_SPI_Receive(&hspi, tmp, 1, 0xFFFFFFFF) != HAL_OK) {
 8001ce4:	f107 0114 	add.w	r1, r7, #20
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cec:	2201      	movs	r2, #1
 8001cee:	481f      	ldr	r0, [pc, #124]	; (8001d6c <SPI_WIFI_ReceiveData+0xe0>)
 8001cf0:	f004 f828 	bl	8005d44 <HAL_SPI_Receive>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d007      	beq.n	8001d0a <SPI_WIFI_ReceiveData+0x7e>
        WIFI_DISABLE_NSS();
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	481a      	ldr	r0, [pc, #104]	; (8001d68 <SPI_WIFI_ReceiveData+0xdc>)
 8001d00:	f002 ffa6 	bl	8004c50 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
 8001d08:	e02a      	b.n	8001d60 <SPI_WIFI_ReceiveData+0xd4>
      }
  
      //wait_spi_rx_event(timeout);

      pData[0] = tmp[0];
 8001d0a:	7d3a      	ldrb	r2, [r7, #20]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3301      	adds	r3, #1
 8001d14:	7d7a      	ldrb	r2, [r7, #21]
 8001d16:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001d18:	8afb      	ldrh	r3, [r7, #22]
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3302      	adds	r3, #2
 8001d24:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8001d26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d2a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001d2e:	db09      	blt.n	8001d44 <SPI_WIFI_ReceiveData+0xb8>
        WIFI_DISABLE_NSS();
 8001d30:	2201      	movs	r2, #1
 8001d32:	2101      	movs	r1, #1
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <SPI_WIFI_ReceiveData+0xdc>)
 8001d36:	f002 ff8b 	bl	8004c50 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();    
 8001d3a:	f7ff feeb 	bl	8001b14 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001d3e:	f06f 0303 	mvn.w	r3, #3
 8001d42:	e00d      	b.n	8001d60 <SPI_WIFI_ReceiveData+0xd4>
  while (WIFI_IS_CMDDATA_READY())
 8001d44:	2102      	movs	r1, #2
 8001d46:	4808      	ldr	r0, [pc, #32]	; (8001d68 <SPI_WIFI_ReceiveData+0xdc>)
 8001d48:	f002 ff6a 	bl	8004c20 <HAL_GPIO_ReadPin>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d0c0      	beq.n	8001cd4 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS(); 
 8001d52:	2201      	movs	r2, #1
 8001d54:	2101      	movs	r1, #1
 8001d56:	4804      	ldr	r0, [pc, #16]	; (8001d68 <SPI_WIFI_ReceiveData+0xdc>)
 8001d58:	f002 ff7a 	bl	8004c50 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8001d5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	48001000 	.word	0x48001000
 8001d6c:	200003a8 	.word	0x200003a8

08001d70 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff41 	bl	8001c08 <wait_cmddata_rdy_high>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	da02      	bge.n	8001d92 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d90:	e043      	b.n	8001e1a <SPI_WIFI_SendData+0xaa>
  }
    
  // arm to detect rising event
  cmddata_rdy_rising_event=1;
 8001d92:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <SPI_WIFI_SendData+0xb4>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4822      	ldr	r0, [pc, #136]	; (8001e28 <SPI_WIFI_SendData+0xb8>)
 8001d9e:	f002 ff57 	bl	8004c50 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001da2:	200f      	movs	r0, #15
 8001da4:	f000 f850 	bl	8001e48 <SPI_WIFI_DelayUs>
  if (len > 1)
 8001da8:	897b      	ldrh	r3, [r7, #10]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d913      	bls.n	8001dd6 <SPI_WIFI_SendData+0x66>
  {
    //spi_tx_event=1;
    if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , len/2, 0xFFFFFFFF) != HAL_OK)
 8001dae:	897b      	ldrh	r3, [r7, #10]
 8001db0:	085b      	lsrs	r3, r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	68f9      	ldr	r1, [r7, #12]
 8001dba:	481c      	ldr	r0, [pc, #112]	; (8001e2c <SPI_WIFI_SendData+0xbc>)
 8001dbc:	f003 fe5c 	bl	8005a78 <HAL_SPI_Transmit>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <SPI_WIFI_SendData+0x66>
    {
      WIFI_DISABLE_NSS();
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4817      	ldr	r0, [pc, #92]	; (8001e28 <SPI_WIFI_SendData+0xb8>)
 8001dcc:	f002 ff40 	bl	8004c50 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	e021      	b.n	8001e1a <SPI_WIFI_SendData+0xaa>
    }
    //wait_spi_tx_event(timeout);
  }
  
  if ( len & 1)
 8001dd6:	897b      	ldrh	r3, [r7, #10]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01a      	beq.n	8001e16 <SPI_WIFI_SendData+0xa6>
  {
    Padding[0] = pdata[len-1];
 8001de0:	897b      	ldrh	r3, [r7, #10]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8001dec:	230a      	movs	r3, #10
 8001dee:	757b      	strb	r3, [r7, #21]

    //spi_tx_event=1;
    if( HAL_SPI_Transmit(&hspi, Padding, 1, 0xFFFFFFFF) != HAL_OK)
 8001df0:	f107 0114 	add.w	r1, r7, #20
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
 8001df8:	2201      	movs	r2, #1
 8001dfa:	480c      	ldr	r0, [pc, #48]	; (8001e2c <SPI_WIFI_SendData+0xbc>)
 8001dfc:	f003 fe3c 	bl	8005a78 <HAL_SPI_Transmit>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <SPI_WIFI_SendData+0xa6>
    {
      WIFI_DISABLE_NSS();
 8001e06:	2201      	movs	r2, #1
 8001e08:	2101      	movs	r1, #1
 8001e0a:	4807      	ldr	r0, [pc, #28]	; (8001e28 <SPI_WIFI_SendData+0xb8>)
 8001e0c:	f002 ff20 	bl	8004c50 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
 8001e14:	e001      	b.n	8001e1a <SPI_WIFI_SendData+0xaa>
    }  
    //wait_spi_tx_event(timeout);
    
  }
  return len;
 8001e16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200002d0 	.word	0x200002d0
 8001e28:	48001000 	.word	0x48001000
 8001e2c:	200003a8 	.word	0x200003a8

08001e30 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f002 fadf 	bl	80043fc <HAL_Delay>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t freq = (SystemCoreClock/1000000L);
 8001e50:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <SPI_WIFI_DelayUs+0x8c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a20      	ldr	r2, [pc, #128]	; (8001ed8 <SPI_WIFI_DelayUs+0x90>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	0c9b      	lsrs	r3, r3, #18
 8001e5c:	617b      	str	r3, [r7, #20]
  uint32_t ctrl;
  uint32_t cycle;
  
  n=n*freq;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	fb02 f303 	mul.w	r3, r2, r3
 8001e66:	607b      	str	r3, [r7, #4]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001e68:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <SPI_WIFI_DelayUs+0x94>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <SPI_WIFI_DelayUs+0x94>)
 8001e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e72:	60d3      	str	r3, [r2, #12]
  ctrl = DWT->CTRL;
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <SPI_WIFI_DelayUs+0x98>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	613b      	str	r3, [r7, #16]
  DWT->CTRL |= 1 ; // enable  counter
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <SPI_WIFI_DelayUs+0x98>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <SPI_WIFI_DelayUs+0x98>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6013      	str	r3, [r2, #0]
  cycle = DWT->CYCCNT;
 8001e86:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <SPI_WIFI_DelayUs+0x98>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	60fb      	str	r3, [r7, #12]
  n += cycle;
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	607b      	str	r3, [r7, #4]
  if (n < cycle) 
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d205      	bcs.n	8001ea8 <SPI_WIFI_DelayUs+0x60>
  {
	 // wait for rewrap
	 while(n < DWT->CYCCNT);
 8001e9c:	bf00      	nop
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <SPI_WIFI_DelayUs+0x98>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d3fa      	bcc.n	8001e9e <SPI_WIFI_DelayUs+0x56>
  }
  
  while(DWT->CYCCNT < n);
 8001ea8:	bf00      	nop
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <SPI_WIFI_DelayUs+0x98>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8fa      	bhi.n	8001eaa <SPI_WIFI_DelayUs+0x62>
  
  DWT->CTRL &= ~(ctrl & 1 ) ; // restore counter mode
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <SPI_WIFI_DelayUs+0x98>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	4907      	ldr	r1, [pc, #28]	; (8001ee0 <SPI_WIFI_DelayUs+0x98>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]
  return;
 8001ec6:	bf00      	nop
}
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000010 	.word	0x20000010
 8001ed8:	431bde83 	.word	0x431bde83
 8001edc:	e000edf0 	.word	0xe000edf0
 8001ee0:	e0001000 	.word	0xe0001000

08001ee4 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SPI_WIFI_ISR+0x1c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d102      	bne.n	8001ef6 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event=0;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <SPI_WIFI_ISR+0x1c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
   }
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	200002d0 	.word	0x200002d0
 8001f04:	00000000 	.word	0x00000000

08001f08 <main>:
    const uint16_t DEST_PORT = 2028;        // 'server' port number - this is the port Packet Sender listens to (as you set in Packer Sender)

SPI_HandleTypeDef hspi3;

int main(void)
{
 8001f08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f0c:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
 8001f10:	af04      	add	r7, sp, #16
  HAL_Init();
 8001f12:	f002 fa03 	bl	800431c <HAL_Init>
  MX_GPIO_Init();
 8001f16:	f000 fe2f 	bl	8002b78 <MX_GPIO_Init>

  BSP_ACCELERO_Init();
 8001f1a:	f001 fae1 	bl	80034e0 <BSP_ACCELERO_Init>
  BSP_TSENSOR_Init();
 8001f1e:	f001 fc2f 	bl	8003780 <BSP_TSENSOR_Init>
  BSP_GYRO_Init();
 8001f22:	f001 fb33 	bl	800358c <BSP_GYRO_Init>
  BSP_MAGNETO_Init();
 8001f26:	f001 fbb9 	bl	800369c <BSP_MAGNETO_Init>
  BSP_HSENSOR_Init();
 8001f2a:	f001 fb89 	bl	8003640 <BSP_HSENSOR_Init>
  BSP_PSENSOR_Init();
 8001f2e:	f001 fbf9 	bl	8003724 <BSP_PSENSOR_Init>
  UART1_Init();
 8001f32:	f000 fdc9 	bl	8002ac8 <UART1_Init>
  uint8_t resp[MAX_LENGTH]; // response packet
  uint16_t Datalen;
  WIFI_Status_t WiFi_Stat; // WiFi status. Should remain WIFI_STATUS_OK if everything goes well


  float MAG_SENSOR[3]={0};
 8001f36:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	6053      	str	r3, [r2, #4]
 8001f42:	6093      	str	r3, [r2, #8]
  int mag1=1;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
  float gyrodata=0;
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8001f52:	6013      	str	r3, [r2, #0]
  float gyrodata1=0;
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8001f5c:	6013      	str	r3, [r2, #0]
  float offset=0;
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8001f66:	6013      	str	r3, [r2, #0]
  int h=0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
  int led=0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
  int ft=0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
  int ff=0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
  int fp=0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
  int fh=0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
  int fm=0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
  int fg=0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
  //int mode=1;
  int enter=1;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
  int flag=0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
  int gyrostart=1;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
  uint32_t start=0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
  uint32_t startled=0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c



  WiFi_Stat = WIFI_Init();                      // if it gets stuck here, you likely did not include EXTI1_IRQHandler() in stm32l4xx_it.c as mentioned above
 8001fb6:	f001 f86f 	bl	8003098 <WIFI_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f887 343b 	strb.w	r3, [r7, #1083]	; 0x43b
  WiFi_Stat &= WIFI_Connect(WiFi_SSID, WiFi_password, WiFi_security); // joining a WiFi network takes several seconds. Don't be too quick to judge that your program has 'hung' :)
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <main+0x108>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a13      	ldr	r2, [pc, #76]	; (8002014 <main+0x10c>)
 8001fc6:	6811      	ldr	r1, [r2, #0]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 f890 	bl	80030f0 <WIFI_Connect>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f897 343b 	ldrb.w	r3, [r7, #1083]	; 0x43b
 8001fd8:	4013      	ands	r3, r2
 8001fda:	f887 343b 	strb.w	r3, [r7, #1083]	; 0x43b
  if(WiFi_Stat!=WIFI_STATUS_OK) while(1);                   // halt computations if a WiFi connection could not be established.
 8001fde:	f897 343b 	ldrb.w	r3, [r7, #1083]	; 0x43b
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d000      	beq.n	8001fe8 <main+0xe0>
 8001fe6:	e7fe      	b.n	8001fe6 <main+0xde>

  // WiFi_Stat = WIFI_Ping(ipaddr, 3, 200);                 // Optional ping 3 times in 200 ms intervals
  WiFi_Stat = WIFI_OpenClientConnection(1, WIFI_TCP_PROTOCOL, "conn", ipaddr, DEST_PORT, SOURCE_PORT); // Make a TCP connection.
 8001fe8:	f240 73ec 	movw	r3, #2028	; 0x7ec
 8001fec:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8001ff0:	9201      	str	r2, [sp, #4]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <main+0x110>)
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <main+0x114>)
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f001 f89a 	bl	8003134 <WIFI_OpenClientConnection>
 8002000:	4603      	mov	r3, r0
 8002002:	f887 343b 	strb.w	r3, [r7, #1083]	; 0x43b
                                                                  // "conn" is just a name and serves no functional purpose

  if(WiFi_Stat!=WIFI_STATUS_OK) while(1);                   // halt computations if a connection could not be established with the server
 8002006:	f897 343b 	ldrb.w	r3, [r7, #1083]	; 0x43b
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <main+0x11c>
 800200e:	e7fe      	b.n	800200e <main+0x106>
 8002010:	20000004 	.word	0x20000004
 8002014:	20000008 	.word	0x20000008
 8002018:	2000000c 	.word	0x2000000c
 800201c:	0800ac5c 	.word	0x0800ac5c
 8002020:	42c80000 	.word	0x42c80000
  while (1)
   {
    uint32_t t=HAL_GetTick();
 8002024:	f002 f9de 	bl	80043e4 <HAL_GetTick>
 8002028:	f8c7 0434 	str.w	r0, [r7, #1076]	; 0x434
    uint32_t tled=t;
 800202c:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8002030:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
    char mt[32]={0};
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	3304      	adds	r3, #4
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
 8002048:	615a      	str	r2, [r3, #20]
 800204a:	619a      	str	r2, [r3, #24]
    char mf[32]={0};
 800204c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	3304      	adds	r3, #4
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	611a      	str	r2, [r3, #16]
 8002062:	615a      	str	r2, [r3, #20]
 8002064:	619a      	str	r2, [r3, #24]
    char mp[32]={0};
 8002066:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	3304      	adds	r3, #4
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
 800207c:	615a      	str	r2, [r3, #20]
 800207e:	619a      	str	r2, [r3, #24]
    char mh[32]={0};
 8002080:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	3304      	adds	r3, #4
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]
 8002096:	615a      	str	r2, [r3, #20]
 8002098:	619a      	str	r2, [r3, #24]
    char mm[32]={0};
 800209a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	3304      	adds	r3, #4
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
 80020b0:	615a      	str	r2, [r3, #20]
 80020b2:	619a      	str	r2, [r3, #24]
    char mg[32]={0};
 80020b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	3304      	adds	r3, #4
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	611a      	str	r2, [r3, #16]
 80020ca:	615a      	str	r2, [r3, #20]
 80020cc:	619a      	str	r2, [r3, #24]

    float accel_data[3]={0};
 80020ce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80020d2:	461a      	mov	r2, r3
 80020d4:	2300      	movs	r3, #0
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	6053      	str	r3, [r2, #4]
 80020da:	6093      	str	r3, [r2, #8]
    float mag_data[3];

    float humid_data;
    float pre_data;
    float gyro_data[3]={0};
 80020dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020e0:	461a      	mov	r2, r3
 80020e2:	2300      	movs	r3, #0
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	6053      	str	r3, [r2, #4]
 80020e8:	6093      	str	r3, [r2, #8]
    int16_t accel_data_i16[3] = {0};
 80020ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	809a      	strh	r2, [r3, #4]
    int16_t mag_data_i16[3]={0};
 80020f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	809a      	strh	r2, [r3, #4]
    BSP_ACCELERO_AccGetXYZ(accel_data_i16);  // read accelerometer
 80020fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002102:	4618      	mov	r0, r3
 8002104:	f001 fa2a 	bl	800355c <BSP_ACCELERO_AccGetXYZ>
    accel_data[0] = (float)accel_data_i16[0] / 100.0f;
 8002108:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800210c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002118:	ed5f 6a3f 	vldr	s13, [pc, #-252]	; 8002020 <main+0x118>
 800211c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002120:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002124:	edc3 7a00 	vstr	s15, [r3]
    accel_data[1] = (float)accel_data_i16[1] / 100.0f;
 8002128:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800212c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002130:	ee07 3a90 	vmov	s15, r3
 8002134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002138:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 8002020 <main+0x118>
 800213c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002140:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002144:	edc3 7a01 	vstr	s15, [r3, #4]
    accel_data[2] = (float)accel_data_i16[2] / 100.0f;
 8002148:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800214c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002158:	ed5f 6a4f 	vldr	s13, [pc, #-316]	; 8002020 <main+0x118>
 800215c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002160:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002164:	edc3 7a02 	vstr	s15, [r3, #8]


    temp_data = BSP_TSENSOR_ReadTemp();   // read temperature sensor
 8002168:	f001 fb26 	bl	80037b8 <BSP_TSENSOR_ReadTemp>
 800216c:	eef0 7a40 	vmov.f32	s15, s0
 8002170:	4bc9      	ldr	r3, [pc, #804]	; (8002498 <main+0x590>)
 8002172:	edc3 7a00 	vstr	s15, [r3]


    humid_data=BSP_HSENSOR_ReadHumidity();
 8002176:	f001 fa83 	bl	8003680 <BSP_HSENSOR_ReadHumidity>
 800217a:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 800217e:	ed83 0a00 	vstr	s0, [r3]


    pre_data=BSP_PSENSOR_ReadPressure();
 8002182:	f001 faef 	bl	8003764 <BSP_PSENSOR_ReadPressure>
 8002186:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800218a:	ed83 0a00 	vstr	s0, [r3]

    if (mag1==1)
 800218e:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8002192:	2b01      	cmp	r3, #1
 8002194:	d149      	bne.n	800222a <main+0x322>
    {
     BSP_MAGNETO_GetXYZ(mag_data_i16);
 8002196:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800219a:	4618      	mov	r0, r3
 800219c:	f001 faaa 	bl	80036f4 <BSP_MAGNETO_GetXYZ>
     mag_data[0]=(float)mag_data_i16[0]/1000.0f;
 80021a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b0:	eddf 6aba 	vldr	s13, [pc, #744]	; 800249c <main+0x594>
 80021b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021bc:	edc3 7a00 	vstr	s15, [r3]
     mag_data[1]=(float)mag_data_i16[1]/1000.0f;
 80021c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d0:	eddf 6ab2 	vldr	s13, [pc, #712]	; 800249c <main+0x594>
 80021d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021d8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021dc:	edc3 7a01 	vstr	s15, [r3, #4]
     mag_data[2]=(float)mag_data_i16[2]/1000.0f;
 80021e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021e8:	ee07 3a90 	vmov	s15, r3
 80021ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f0:	eddf 6aaa 	vldr	s13, [pc, #680]	; 800249c <main+0x594>
 80021f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021fc:	edc3 7a02 	vstr	s15, [r3, #8]
     MAG_SENSOR[0]= mag_data[0];
 8002200:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800220a:	601a      	str	r2, [r3, #0]
     MAG_SENSOR[1]= mag_data[1];
 800220c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002216:	605a      	str	r2, [r3, #4]
     MAG_SENSOR[2]= mag_data[2];
 8002218:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002222:	609a      	str	r2, [r3, #8]
     mag1=0;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
    }

    if(TEMP_THRESHOLD<=temp_data) ft=1;
 800222a:	4b9b      	ldr	r3, [pc, #620]	; (8002498 <main+0x590>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80024a0 <main+0x598>
 8002234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	db02      	blt.n	8002244 <main+0x33c>
 800223e:	2301      	movs	r3, #1
 8002240:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
    if(ACC_THRESHOLD>=accel_data[2]) ff=1;
 8002244:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002248:	edd3 7a02 	vldr	s15, [r3, #8]
 800224c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002258:	d802      	bhi.n	8002260 <main+0x358>
 800225a:	2301      	movs	r3, #1
 800225c:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
    if(humid_data<HUMID_THRESHOLD) fh=1;
 8002260:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80024a4 <main+0x59c>
 800226c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002274:	d502      	bpl.n	800227c <main+0x374>
 8002276:	2301      	movs	r3, #1
 8002278:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
    if(pre_data>PRESSURE_SENSOR) fp=1;
 800227c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002280:	edd3 7a00 	vldr	s15, [r3]
 8002284:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80024a8 <main+0x5a0>
 8002288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002290:	dd02      	ble.n	8002298 <main+0x390>
 8002292:	2301      	movs	r3, #1
 8002294:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
    if(gyrodata>GYRO_THRESHOLD) fg=1;
 8002298:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80024ac <main+0x5a4>
 80022a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ac:	dd02      	ble.n	80022b4 <main+0x3ac>
 80022ae:	2301      	movs	r3, #1
 80022b0:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
    if(mag_data[0]- MAG_SENSOR[0]>0.1||mag_data[1]- MAG_SENSOR[1]>0.1||mag_data[2]- MAG_SENSOR[2]>0.1) fm=1;
 80022b4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022b8:	ed93 7a00 	vldr	s14, [r3]
 80022bc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80022c0:	edd3 7a00 	vldr	s15, [r3]
 80022c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c8:	ee17 0a90 	vmov	r0, s15
 80022cc:	f7fe f93c 	bl	8000548 <__aeabi_f2d>
 80022d0:	a36d      	add	r3, pc, #436	; (adr r3, 8002488 <main+0x580>)
 80022d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d6:	f7fe fc1f 	bl	8000b18 <__aeabi_dcmpgt>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d12b      	bne.n	8002338 <main+0x430>
 80022e0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80022e8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80022ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80022f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f4:	ee17 0a90 	vmov	r0, s15
 80022f8:	f7fe f926 	bl	8000548 <__aeabi_f2d>
 80022fc:	a362      	add	r3, pc, #392	; (adr r3, 8002488 <main+0x580>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	f7fe fc09 	bl	8000b18 <__aeabi_dcmpgt>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d115      	bne.n	8002338 <main+0x430>
 800230c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002310:	ed93 7a02 	vldr	s14, [r3, #8]
 8002314:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002318:	edd3 7a02 	vldr	s15, [r3, #8]
 800231c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002320:	ee17 0a90 	vmov	r0, s15
 8002324:	f7fe f910 	bl	8000548 <__aeabi_f2d>
 8002328:	a357      	add	r3, pc, #348	; (adr r3, 8002488 <main+0x580>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe fbf3 	bl	8000b18 <__aeabi_dcmpgt>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <main+0x436>
 8002338:	2301      	movs	r3, #1
 800233a:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
    if(mag_data[0]- MAG_SENSOR[0]<-0.1||mag_data[1]- MAG_SENSOR[1]<-0.1||mag_data[2]- MAG_SENSOR[2]<-0.1) fm=1;
 800233e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002342:	ed93 7a00 	vldr	s14, [r3]
 8002346:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800234a:	edd3 7a00 	vldr	s15, [r3]
 800234e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002352:	ee17 0a90 	vmov	r0, s15
 8002356:	f7fe f8f7 	bl	8000548 <__aeabi_f2d>
 800235a:	a34d      	add	r3, pc, #308	; (adr r3, 8002490 <main+0x588>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	f7fe fbbc 	bl	8000adc <__aeabi_dcmplt>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d12b      	bne.n	80023c2 <main+0x4ba>
 800236a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800236e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002372:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002376:	edd3 7a01 	vldr	s15, [r3, #4]
 800237a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237e:	ee17 0a90 	vmov	r0, s15
 8002382:	f7fe f8e1 	bl	8000548 <__aeabi_f2d>
 8002386:	a342      	add	r3, pc, #264	; (adr r3, 8002490 <main+0x588>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fe fba6 	bl	8000adc <__aeabi_dcmplt>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d115      	bne.n	80023c2 <main+0x4ba>
 8002396:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800239a:	ed93 7a02 	vldr	s14, [r3, #8]
 800239e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80023a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80023a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023aa:	ee17 0a90 	vmov	r0, s15
 80023ae:	f7fe f8cb 	bl	8000548 <__aeabi_f2d>
 80023b2:	a337      	add	r3, pc, #220	; (adr r3, 8002490 <main+0x588>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe fb90 	bl	8000adc <__aeabi_dcmplt>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <main+0x4c0>
 80023c2:	2301      	movs	r3, #1
 80023c4:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454

    if(led==0)  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80023c8:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d106      	bne.n	80023de <main+0x4d6>
 80023d0:	2200      	movs	r2, #0
 80023d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023d6:	4836      	ldr	r0, [pc, #216]	; (80024b0 <main+0x5a8>)
 80023d8:	f002 fc3a 	bl	8004c50 <HAL_GPIO_WritePin>
 80023dc:	e033      	b.n	8002446 <main+0x53e>
    else if(led==3)  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80023de:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d106      	bne.n	80023f4 <main+0x4ec>
 80023e6:	2201      	movs	r2, #1
 80023e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023ec:	4830      	ldr	r0, [pc, #192]	; (80024b0 <main+0x5a8>)
 80023ee:	f002 fc2f 	bl	8004c50 <HAL_GPIO_WritePin>
 80023f2:	e028      	b.n	8002446 <main+0x53e>
    else if(led==1)  {if (tled-startled>100) {HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);startled=tled;}}
 80023f4:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d110      	bne.n	800241e <main+0x516>
 80023fc:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8002400:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d91d      	bls.n	8002446 <main+0x53e>
 800240a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800240e:	4828      	ldr	r0, [pc, #160]	; (80024b0 <main+0x5a8>)
 8002410:	f002 fc36 	bl	8004c80 <HAL_GPIO_TogglePin>
 8002414:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002418:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800241c:	e013      	b.n	8002446 <main+0x53e>
    else if(led==2)  if (tled-startled>50) {HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);startled=tled;}
 800241e:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8002422:	2b02      	cmp	r3, #2
 8002424:	d10f      	bne.n	8002446 <main+0x53e>
 8002426:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 800242a:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b32      	cmp	r3, #50	; 0x32
 8002432:	d908      	bls.n	8002446 <main+0x53e>
 8002434:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002438:	481d      	ldr	r0, [pc, #116]	; (80024b0 <main+0x5a8>)
 800243a:	f002 fc21 	bl	8004c80 <HAL_GPIO_TogglePin>
 800243e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002442:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
    if (led!=0) {HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_11);HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_11);}
 8002446:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <main+0x55a>
 800244e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002452:	4818      	ldr	r0, [pc, #96]	; (80024b4 <main+0x5ac>)
 8002454:	f002 fc14 	bl	8004c80 <HAL_GPIO_TogglePin>
 8002458:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800245c:	4815      	ldr	r0, [pc, #84]	; (80024b4 <main+0x5ac>)
 800245e:	f002 fc0f 	bl	8004c80 <HAL_GPIO_TogglePin>

    if (t-start>10000)
 8002462:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8002466:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002470:	4293      	cmp	r3, r2
 8002472:	d921      	bls.n	80024b8 <main+0x5b0>
    	  {
    		  flag=1;
 8002474:	2301      	movs	r3, #1
 8002476:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
    		  start=t;
 800247a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800247e:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8002482:	e01c      	b.n	80024be <main+0x5b6>
 8002484:	f3af 8000 	nop.w
 8002488:	9999999a 	.word	0x9999999a
 800248c:	3fb99999 	.word	0x3fb99999
 8002490:	9999999a 	.word	0x9999999a
 8002494:	bfb99999 	.word	0xbfb99999
 8002498:	2000040c 	.word	0x2000040c
 800249c:	447a0000 	.word	0x447a0000
 80024a0:	42000000 	.word	0x42000000
 80024a4:	42480000 	.word	0x42480000
 80024a8:	447f0000 	.word	0x447f0000
 80024ac:	459c4000 	.word	0x459c4000
 80024b0:	48000400 	.word	0x48000400
 80024b4:	48000c00 	.word	0x48000c00
    	  }
    else flag=0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448

    if(send)
 80024be:	4b80      	ldr	r3, [pc, #512]	; (80026c0 <main+0x7b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00f      	beq.n	80024e6 <main+0x5de>
    {
        WiFi_Stat = WIFI_SendData(1, "Patient Calling for Help\r\n", (uint16_t)strlen((char*)"Patient Calling for Help\r\n"), &Datalen, WIFI_WRITE_TIMEOUT);
 80024c6:	f507 7383 	add.w	r3, r7, #262	; 0x106
 80024ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80024ce:	9200      	str	r2, [sp, #0]
 80024d0:	221a      	movs	r2, #26
 80024d2:	497c      	ldr	r1, [pc, #496]	; (80026c4 <main+0x7bc>)
 80024d4:	2001      	movs	r0, #1
 80024d6:	f000 fe67 	bl	80031a8 <WIFI_SendData>
 80024da:	4603      	mov	r3, r0
 80024dc:	f887 343b 	strb.w	r3, [r7, #1083]	; 0x43b
        send=0;
 80024e0:	4b77      	ldr	r3, [pc, #476]	; (80026c0 <main+0x7b8>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
    }
    if(fatal)
 80024e6:	4b78      	ldr	r3, [pc, #480]	; (80026c8 <main+0x7c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00f      	beq.n	800250e <main+0x606>
    {
        WiFi_Stat = WIFI_SendData(1, "Patient Sitting Up\r\n", (uint16_t)strlen((char*)"Patient Sitting Up\r\n"), &Datalen, WIFI_WRITE_TIMEOUT);
 80024ee:	f507 7383 	add.w	r3, r7, #262	; 0x106
 80024f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80024f6:	9200      	str	r2, [sp, #0]
 80024f8:	2214      	movs	r2, #20
 80024fa:	4974      	ldr	r1, [pc, #464]	; (80026cc <main+0x7c4>)
 80024fc:	2001      	movs	r0, #1
 80024fe:	f000 fe53 	bl	80031a8 <WIFI_SendData>
 8002502:	4603      	mov	r3, r0
 8002504:	f887 343b 	strb.w	r3, [r7, #1083]	; 0x43b
        fatal=0;
 8002508:	4b6f      	ldr	r3, [pc, #444]	; (80026c8 <main+0x7c0>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
    }

    if (mode==1)//Normal Mode
 800250e:	4b70      	ldr	r3, [pc, #448]	; (80026d0 <main+0x7c8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d168      	bne.n	80025e8 <main+0x6e0>
    {
  	  //if (enter==1){HAL_UART_Transmit(&huart1, (uint8_t*)"Entering Normal Mode\r\n", strlen("Entering Normal rMode\r\n"),0xFFFF);enter=0;led=0;flagn=0;}
  	  if (enter==1){HAL_UART_Transmit(&huart1, (uint8_t*)"Entering Normal Mode\r\n", strlen("Entering Normal Mode\r\n"),0xFFFF);led=0;flagn=0;enter=0;}
 8002516:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10f      	bne.n	800253e <main+0x636>
 800251e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002522:	2216      	movs	r2, #22
 8002524:	496b      	ldr	r1, [pc, #428]	; (80026d4 <main+0x7cc>)
 8002526:	486c      	ldr	r0, [pc, #432]	; (80026d8 <main+0x7d0>)
 8002528:	f004 fa2a 	bl	8006980 <HAL_UART_Transmit>
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8002532:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <main+0x7d4>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

  	  if(ft==1&&flag==1) {HAL_UART_Transmit(&huart1, (uint8_t*)"Fever Detected\r\n", strlen("Fever Detected\r\n"),0xFFFF);led= led==2? 2:1;}
 800253e:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8002542:	2b01      	cmp	r3, #1
 8002544:	d113      	bne.n	800256e <main+0x666>
 8002546:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800254a:	2b01      	cmp	r3, #1
 800254c:	d10f      	bne.n	800256e <main+0x666>
 800254e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002552:	2210      	movs	r2, #16
 8002554:	4962      	ldr	r1, [pc, #392]	; (80026e0 <main+0x7d8>)
 8002556:	4860      	ldr	r0, [pc, #384]	; (80026d8 <main+0x7d0>)
 8002558:	f004 fa12 	bl	8006980 <HAL_UART_Transmit>
 800255c:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8002560:	2b02      	cmp	r3, #2
 8002562:	d101      	bne.n	8002568 <main+0x660>
 8002564:	2302      	movs	r3, #2
 8002566:	e000      	b.n	800256a <main+0x662>
 8002568:	2301      	movs	r3, #1
 800256a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
  	  if(ff==1&&flag==1) {HAL_UART_Transmit(&huart1, (uint8_t*)"Fall Detected\r\n", strlen("Fall Detected\r\n"),0xFFFF);led= led==2? 2:1;}
 800256e:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002572:	2b01      	cmp	r3, #1
 8002574:	d113      	bne.n	800259e <main+0x696>
 8002576:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800257a:	2b01      	cmp	r3, #1
 800257c:	d10f      	bne.n	800259e <main+0x696>
 800257e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002582:	220f      	movs	r2, #15
 8002584:	4957      	ldr	r1, [pc, #348]	; (80026e4 <main+0x7dc>)
 8002586:	4854      	ldr	r0, [pc, #336]	; (80026d8 <main+0x7d0>)
 8002588:	f004 f9fa 	bl	8006980 <HAL_UART_Transmit>
 800258c:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8002590:	2b02      	cmp	r3, #2
 8002592:	d101      	bne.n	8002598 <main+0x690>
 8002594:	2302      	movs	r3, #2
 8002596:	e000      	b.n	800259a <main+0x692>
 8002598:	2301      	movs	r3, #1
 800259a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
  	  if((fp==1||fh==1)&&flag==1)
 800259e:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d003      	beq.n	80025ae <main+0x6a6>
 80025a6:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d11c      	bne.n	80025e8 <main+0x6e0>
 80025ae:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d118      	bne.n	80025e8 <main+0x6e0>
  	  {
  		  HAL_UART_Transmit(&huart1, (uint8_t*)"Check patient's breath!\r\n", strlen("Check patient's breath!\r\n"),0xFFFF);
 80025b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ba:	2219      	movs	r2, #25
 80025bc:	494a      	ldr	r1, [pc, #296]	; (80026e8 <main+0x7e0>)
 80025be:	4846      	ldr	r0, [pc, #280]	; (80026d8 <main+0x7d0>)
 80025c0:	f004 f9de 	bl	8006980 <HAL_UART_Transmit>
  		  ft=0;ff=0;fp=0;fh=0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
  		  mode=2;
 80025dc:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <main+0x7c8>)
 80025de:	2202      	movs	r2, #2
 80025e0:	601a      	str	r2, [r3, #0]
  		  enter=1;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
  	  }

    }
  //###################################################################################################################
    if (mode==2)//Intensive Care Mode
 80025e8:	4b39      	ldr	r3, [pc, #228]	; (80026d0 <main+0x7c8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	f47f ad19 	bne.w	8002024 <main+0x11c>
      {

    	  if (enter==1){HAL_UART_Transmit(&huart1, (uint8_t*)"Entering Intensive Care Mode\r\n", strlen("Entering Intensive Care Mode\r\n"),0xFFFF);led=3;enter=0;mag1=1;}
 80025f2:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10f      	bne.n	800261a <main+0x712>
 80025fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025fe:	221e      	movs	r2, #30
 8002600:	493a      	ldr	r1, [pc, #232]	; (80026ec <main+0x7e4>)
 8002602:	4835      	ldr	r0, [pc, #212]	; (80026d8 <main+0x7d0>)
 8002604:	f004 f9bc 	bl	8006980 <HAL_UART_Transmit>
 8002608:	2303      	movs	r3, #3
 800260a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8002614:	2301      	movs	r3, #1
 8002616:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c

    	  BSP_GYRO_GetXYZ(gyro_data);
 800261a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fff6 	bl	8003610 <BSP_GYRO_GetXYZ>

    	  if (h<3)
 8002624:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8002628:	2b02      	cmp	r3, #2
 800262a:	dc63      	bgt.n	80026f4 <main+0x7ec>
    	  {
    		  gyrodata1+=sqrt(gyro_data[0]*gyro_data[0]+gyro_data[1]*gyro_data[1]+gyro_data[2]*gyro_data[2]);
 800262c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002630:	ed93 7a00 	vldr	s14, [r3]
 8002634:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002640:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002644:	edd3 6a01 	vldr	s13, [r3, #4]
 8002648:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800264c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002658:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800265c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002660:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002664:	edd3 7a02 	vldr	s15, [r3, #8]
 8002668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002670:	ee17 0a90 	vmov	r0, s15
 8002674:	f7fd ff68 	bl	8000548 <__aeabi_f2d>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	ec43 2b10 	vmov	d0, r2, r3
 8002680:	f008 f82c 	bl	800a6dc <sqrt>
 8002684:	ec55 4b10 	vmov	r4, r5, d0
 8002688:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	f7fd ff5b 	bl	8000548 <__aeabi_f2d>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4620      	mov	r0, r4
 8002698:	4629      	mov	r1, r5
 800269a:	f7fd fdf7 	bl	800028c <__adddf3>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4610      	mov	r0, r2
 80026a4:	4619      	mov	r1, r3
 80026a6:	f7fe fa7f 	bl	8000ba8 <__aeabi_d2f>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f207 4274 	addw	r2, r7, #1140	; 0x474
 80026b0:	6013      	str	r3, [r2, #0]
    		  h++;
 80026b2:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80026b6:	3301      	adds	r3, #1
 80026b8:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 80026bc:	e047      	b.n	800274e <main+0x846>
 80026be:	bf00      	nop
 80026c0:	200002d8 	.word	0x200002d8
 80026c4:	0800ac64 	.word	0x0800ac64
 80026c8:	200002dc 	.word	0x200002dc
 80026cc:	0800ac80 	.word	0x0800ac80
 80026d0:	20000000 	.word	0x20000000
 80026d4:	0800ac98 	.word	0x0800ac98
 80026d8:	20000474 	.word	0x20000474
 80026dc:	200002d4 	.word	0x200002d4
 80026e0:	0800acb0 	.word	0x0800acb0
 80026e4:	0800acc4 	.word	0x0800acc4
 80026e8:	0800acd4 	.word	0x0800acd4
 80026ec:	0800acf0 	.word	0x0800acf0
 80026f0:	447a0000 	.word	0x447a0000
    	  }
    	  else
    	  {
    		  h=0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
    		  if (gyrostart==1) {offset=gyrodata1/3;gyrostart=0;}
 80026fa:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d10e      	bne.n	8002720 <main+0x818>
 8002702:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8002706:	ed93 7a00 	vldr	s14, [r3]
 800270a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800270e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002712:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002716:	edc3 7a00 	vstr	s15, [r3]
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
    		  gyrodata=gyrodata1/3-offset;
 8002720:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800272c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002730:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800273c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002740:	edc3 7a00 	vstr	s15, [r3]
    		  gyrodata1=0;
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	f207 4274 	addw	r2, r7, #1140	; 0x474
 800274c:	6013      	str	r3, [r2, #0]

    	  }


    	  BSP_MAGNETO_GetXYZ(mag_data_i16);
 800274e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002752:	4618      	mov	r0, r3
 8002754:	f000 ffce 	bl	80036f4 <BSP_MAGNETO_GetXYZ>
    	  mag_data[0]=(float)mag_data_i16[0]/1000.0f;
 8002758:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800275c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002760:	ee07 3a90 	vmov	s15, r3
 8002764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002768:	ed5f 6a1f 	vldr	s13, [pc, #-124]	; 80026f0 <main+0x7e8>
 800276c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002770:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002774:	edc3 7a00 	vstr	s15, [r3]
    	  mag_data[1]=(float)mag_data_i16[1]/1000.0f;
 8002778:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800277c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002780:	ee07 3a90 	vmov	s15, r3
 8002784:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002788:	ed5f 6a27 	vldr	s13, [pc, #-156]	; 80026f0 <main+0x7e8>
 800278c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002790:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002794:	edc3 7a01 	vstr	s15, [r3, #4]
    	  mag_data[2]=(float)mag_data_i16[2]/1000.0f;
 8002798:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800279c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027a0:	ee07 3a90 	vmov	s15, r3
 80027a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027a8:	ed5f 6a2f 	vldr	s13, [pc, #-188]	; 80026f0 <main+0x7e8>
 80027ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027b0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027b4:	edc3 7a02 	vstr	s15, [r3, #8]

  	  if(ft==1&&flag==1)
 80027b8:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d11d      	bne.n	80027fc <main+0x8f4>
 80027c0:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d119      	bne.n	80027fc <main+0x8f4>
  	  {
  		  sprintf(mt, "Fever Detected  %.2f(degreeC)\r\n", temp_data);
 80027c8:	4b8b      	ldr	r3, [pc, #556]	; (80029f8 <main+0xaf0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd febb 	bl	8000548 <__aeabi_f2d>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	1d38      	adds	r0, r7, #4
 80027d8:	4988      	ldr	r1, [pc, #544]	; (80029fc <main+0xaf4>)
 80027da:	f005 fe3d 	bl	8008458 <siprintf>
  		  HAL_UART_Transmit(&huart1, (uint8_t*)mt, strlen(mt),0xFFFF);
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd fcf5 	bl	80001d0 <strlen>
 80027e6:	4603      	mov	r3, r0
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	1d39      	adds	r1, r7, #4
 80027ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f0:	4883      	ldr	r0, [pc, #524]	; (8002a00 <main+0xaf8>)
 80027f2:	f004 f8c5 	bl	8006980 <HAL_UART_Transmit>
  		  led=3;
 80027f6:	2303      	movs	r3, #3
 80027f8:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468


  	  }
  	  if(ff==1&&flag==1)
 80027fc:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002800:	2b01      	cmp	r3, #1
 8002802:	d134      	bne.n	800286e <main+0x966>
 8002804:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8002808:	2b01      	cmp	r3, #1
 800280a:	d130      	bne.n	800286e <main+0x966>
  	  {
  		  sprintf(mf, "Fall Detected  %.2f(g) %.2f(g) %.2f(g)\r\n", accel_data[0],accel_data[1],accel_data[2]);
 800280c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fe98 	bl	8000548 <__aeabi_f2d>
 8002818:	4680      	mov	r8, r0
 800281a:	4689      	mov	r9, r1
 800281c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fe90 	bl	8000548 <__aeabi_f2d>
 8002828:	4604      	mov	r4, r0
 800282a:	460d      	mov	r5, r1
 800282c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fe88 	bl	8000548 <__aeabi_f2d>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002840:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002844:	e9cd 4500 	strd	r4, r5, [sp]
 8002848:	4642      	mov	r2, r8
 800284a:	464b      	mov	r3, r9
 800284c:	496d      	ldr	r1, [pc, #436]	; (8002a04 <main+0xafc>)
 800284e:	f005 fe03 	bl	8008458 <siprintf>
  		  HAL_UART_Transmit(&huart1, (uint8_t*)mf, strlen(mf),0xFFFF);
 8002852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002856:	4618      	mov	r0, r3
 8002858:	f7fd fcba 	bl	80001d0 <strlen>
 800285c:	4603      	mov	r3, r0
 800285e:	b29a      	uxth	r2, r3
 8002860:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002868:	4865      	ldr	r0, [pc, #404]	; (8002a00 <main+0xaf8>)
 800286a:	f004 f889 	bl	8006980 <HAL_UART_Transmit>
  		  //led=1;

  	  }
  	  if(fp==1&&flag==1)
 800286e:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8002872:	2b01      	cmp	r3, #1
 8002874:	d11d      	bne.n	80028b2 <main+0x9aa>
 8002876:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800287a:	2b01      	cmp	r3, #1
 800287c:	d119      	bne.n	80028b2 <main+0x9aa>
  	  {
  		  sprintf(mp, "Check patient's breath! %.2f(hPa)\r\n",pre_data);
 800287e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	f7fd fe60 	bl	8000548 <__aeabi_f2d>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002890:	495d      	ldr	r1, [pc, #372]	; (8002a08 <main+0xb00>)
 8002892:	f005 fde1 	bl	8008458 <siprintf>
  		  HAL_UART_Transmit(&huart1, (uint8_t*)mp, strlen(mp),0xFFFF);
 8002896:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd fc98 	bl	80001d0 <strlen>
 80028a0:	4603      	mov	r3, r0
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80028a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ac:	4854      	ldr	r0, [pc, #336]	; (8002a00 <main+0xaf8>)
 80028ae:	f004 f867 	bl	8006980 <HAL_UART_Transmit>
  		  //led=1;

  	  }
  	  if(fh==1&&flag==1)
 80028b2:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d11d      	bne.n	80028f6 <main+0x9ee>
 80028ba:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d119      	bne.n	80028f6 <main+0x9ee>
  	  {
  		  sprintf(mh, "Check patient's breath! %.2f%(rH)\r\n",humid_data);
 80028c2:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	f7fd fe3e 	bl	8000548 <__aeabi_f2d>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80028d4:	494d      	ldr	r1, [pc, #308]	; (8002a0c <main+0xb04>)
 80028d6:	f005 fdbf 	bl	8008458 <siprintf>
  		  HAL_UART_Transmit(&huart1, (uint8_t*)mh, strlen(mh),0xFFFF);
 80028da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd fc76 	bl	80001d0 <strlen>
 80028e4:	4603      	mov	r3, r0
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80028ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f0:	4843      	ldr	r0, [pc, #268]	; (8002a00 <main+0xaf8>)
 80028f2:	f004 f845 	bl	8006980 <HAL_UART_Transmit>
  		  //led=1;

  	  }
  	  if(fg==1&&flag==1)
 80028f6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d120      	bne.n	8002940 <main+0xa38>
 80028fe:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8002902:	2b01      	cmp	r3, #1
 8002904:	d11c      	bne.n	8002940 <main+0xa38>
  	  {
  		  sprintf(mg, "Patient in pain! %.1f(pad/s)\r\n",gyrodata);
 8002906:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	f7fd fe1c 	bl	8000548 <__aeabi_f2d>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8002918:	493d      	ldr	r1, [pc, #244]	; (8002a10 <main+0xb08>)
 800291a:	f005 fd9d 	bl	8008458 <siprintf>
  		  HAL_UART_Transmit(&huart1, (uint8_t*)mg, strlen(mg),0xFFFF);
 800291e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fc54 	bl	80001d0 <strlen>
 8002928:	4603      	mov	r3, r0
 800292a:	b29a      	uxth	r2, r3
 800292c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002934:	4832      	ldr	r0, [pc, #200]	; (8002a00 <main+0xaf8>)
 8002936:	f004 f823 	bl	8006980 <HAL_UART_Transmit>
  		  led=2;
 800293a:	2302      	movs	r3, #2
 800293c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468

  	  }
  	  if(fm==1&&flag==1)
 8002940:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8002944:	2b01      	cmp	r3, #1
 8002946:	d137      	bne.n	80029b8 <main+0xab0>
 8002948:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800294c:	2b01      	cmp	r3, #1
 800294e:	d133      	bne.n	80029b8 <main+0xab0>
  	  {
  		  sprintf(mm, "Check patient's abnormal orientation! %.2f(Gauss) %.2f(Gauss) %.2f(Gauss)\r\n",mag_data[0],mag_data[1],mag_data[2]);
 8002950:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fdf6 	bl	8000548 <__aeabi_f2d>
 800295c:	4680      	mov	r8, r0
 800295e:	4689      	mov	r9, r1
 8002960:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fdee 	bl	8000548 <__aeabi_f2d>
 800296c:	4604      	mov	r4, r0
 800296e:	460d      	mov	r5, r1
 8002970:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fde6 	bl	8000548 <__aeabi_f2d>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8002984:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002988:	e9cd 4500 	strd	r4, r5, [sp]
 800298c:	4642      	mov	r2, r8
 800298e:	464b      	mov	r3, r9
 8002990:	4920      	ldr	r1, [pc, #128]	; (8002a14 <main+0xb0c>)
 8002992:	f005 fd61 	bl	8008458 <siprintf>
  		  HAL_UART_Transmit(&huart1, (uint8_t*)mm, strlen(mm),0xFFFF);
 8002996:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fc18 	bl	80001d0 <strlen>
 80029a0:	4603      	mov	r3, r0
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80029a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ac:	4814      	ldr	r0, [pc, #80]	; (8002a00 <main+0xaf8>)
 80029ae:	f003 ffe7 	bl	8006980 <HAL_UART_Transmit>
  		  led=2;
 80029b2:	2302      	movs	r3, #2
 80029b4:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468

  	  }
  	  if(flagn==1)
 80029b8:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <main+0xb10>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	f47f ab31 	bne.w	8002024 <main+0x11c>
  	  {
  		  ft=0;ff=0;fp=0;fh=0;fg=0;fm=0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 80029da:	2300      	movs	r3, #0
 80029dc:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
  		  mode=1;
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <main+0xb14>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
  		  enter=1;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
   {
 80029f2:	f7ff bb17 	b.w	8002024 <main+0x11c>
 80029f6:	bf00      	nop
 80029f8:	2000040c 	.word	0x2000040c
 80029fc:	0800ad10 	.word	0x0800ad10
 8002a00:	20000474 	.word	0x20000474
 8002a04:	0800ad30 	.word	0x0800ad30
 8002a08:	0800ad5c 	.word	0x0800ad5c
 8002a0c:	0800ad80 	.word	0x0800ad80
 8002a10:	0800ada4 	.word	0x0800ada4
 8002a14:	0800adc4 	.word	0x0800adc4
 8002a18:	200002d4 	.word	0x200002d4
 8002a1c:	20000000 	.word	0x20000000

08002a20 <HAL_GPIO_EXTI_Callback>:


}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	80fb      	strh	r3, [r7, #6]
	static int s=0;
	int e=0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  switch(GPIO_Pin){
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a34:	d00b      	beq.n	8002a4e <HAL_GPIO_EXTI_Callback+0x2e>
 8002a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a3a:	dc2c      	bgt.n	8002a96 <HAL_GPIO_EXTI_Callback+0x76>
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_EXTI_Callback+0x28>
 8002a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a44:	d022      	beq.n	8002a8c <HAL_GPIO_EXTI_Callback+0x6c>
	  //HAL_UART_Transmit(&huart1, (uint8_t*)"cao\r\n", strlen("cao\r\n"),0xFFFF);
	  fatal=1;


  } // use more cases in the case statement for other EXTI interrupts
}
 8002a46:	e026      	b.n	8002a96 <HAL_GPIO_EXTI_Callback+0x76>
      SPI_WIFI_ISR();
 8002a48:	f7ff fa4c 	bl	8001ee4 <SPI_WIFI_ISR>
      break;
 8002a4c:	e023      	b.n	8002a96 <HAL_GPIO_EXTI_Callback+0x76>
	  if (mode==2)
 8002a4e:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <HAL_GPIO_EXTI_Callback+0x80>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d112      	bne.n	8002a7c <HAL_GPIO_EXTI_Callback+0x5c>
	  	e=HAL_GetTick();
 8002a56:	f001 fcc5 	bl	80043e4 <HAL_GetTick>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	60fb      	str	r3, [r7, #12]
	  	if (e-s<500) {flagn=1;}
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <HAL_GPIO_EXTI_Callback+0x84>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a6a:	da03      	bge.n	8002a74 <HAL_GPIO_EXTI_Callback+0x54>
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <HAL_GPIO_EXTI_Callback+0x88>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
	  break;
 8002a72:	e00f      	b.n	8002a94 <HAL_GPIO_EXTI_Callback+0x74>
	  	else s=e;
 8002a74:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <HAL_GPIO_EXTI_Callback+0x84>)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6013      	str	r3, [r2, #0]
	  break;
 8002a7a:	e00b      	b.n	8002a94 <HAL_GPIO_EXTI_Callback+0x74>
	  else if (mode==1)
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HAL_GPIO_EXTI_Callback+0x80>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d107      	bne.n	8002a94 <HAL_GPIO_EXTI_Callback+0x74>
		  send=1;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_GPIO_EXTI_Callback+0x8c>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
	  break;
 8002a8a:	e003      	b.n	8002a94 <HAL_GPIO_EXTI_Callback+0x74>
	  fatal=1;
 8002a8c:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_GPIO_EXTI_Callback+0x90>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	e000      	b.n	8002a96 <HAL_GPIO_EXTI_Callback+0x76>
	  break;
 8002a94:	bf00      	nop
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	200002e0 	.word	0x200002e0
 8002aa8:	200002d4 	.word	0x200002d4
 8002aac:	200002d8 	.word	0x200002d8
 8002ab0:	200002dc 	.word	0x200002dc

08002ab4 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 8002ab8:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <SPI3_IRQHandler+0x10>)
 8002aba:	f003 fc7f 	bl	80063bc <HAL_SPI_IRQHandler>
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000410 	.word	0x20000410

08002ac8 <UART1_Init>:




 static void UART1_Init(void)
 {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
     /* Pin configuration for UART. BSP_COM_Init() can do this automatically */
     __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ace:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <UART1_Init+0xa0>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	4a25      	ldr	r2, [pc, #148]	; (8002b68 <UART1_Init+0xa0>)
 8002ad4:	f043 0302 	orr.w	r3, r3, #2
 8002ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <UART1_Init+0xa0>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
     GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002af4:	2307      	movs	r3, #7
 8002af6:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002af8:	23c0      	movs	r3, #192	; 0xc0
 8002afa:	607b      	str	r3, [r7, #4]
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	60bb      	str	r3, [r7, #8]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	613b      	str	r3, [r7, #16]
     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4817      	ldr	r0, [pc, #92]	; (8002b6c <UART1_Init+0xa4>)
 8002b0e:	f001 fde9 	bl	80046e4 <HAL_GPIO_Init>

     /* Configuring UART1 */
     huart1.Instance = USART1;
 8002b12:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <UART1_Init+0xa8>)
 8002b14:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <UART1_Init+0xac>)
 8002b16:	601a      	str	r2, [r3, #0]
     huart1.Init.BaudRate = 115200;
 8002b18:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <UART1_Init+0xa8>)
 8002b1a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b1e:	605a      	str	r2, [r3, #4]
     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <UART1_Init+0xa8>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
     huart1.Init.StopBits = UART_STOPBITS_1;
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <UART1_Init+0xa8>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	60da      	str	r2, [r3, #12]
     huart1.Init.Parity = UART_PARITY_NONE;
 8002b2c:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <UART1_Init+0xa8>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	611a      	str	r2, [r3, #16]
     huart1.Init.Mode = UART_MODE_TX_RX;
 8002b32:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <UART1_Init+0xa8>)
 8002b34:	220c      	movs	r2, #12
 8002b36:	615a      	str	r2, [r3, #20]
     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <UART1_Init+0xa8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]
     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <UART1_Init+0xa8>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	61da      	str	r2, [r3, #28]
     huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <UART1_Init+0xa8>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	621a      	str	r2, [r3, #32]
     huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <UART1_Init+0xa8>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24
     if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b50:	4807      	ldr	r0, [pc, #28]	; (8002b70 <UART1_Init+0xa8>)
 8002b52:	f003 fec7 	bl	80068e4 <HAL_UART_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d000      	beq.n	8002b5e <UART1_Init+0x96>
     {
       while(1);
 8002b5c:	e7fe      	b.n	8002b5c <UART1_Init+0x94>
     }
 }
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	48000400 	.word	0x48000400
 8002b70:	20000474 	.word	0x20000474
 8002b74:	40013800 	.word	0x40013800

08002b78 <MX_GPIO_Init>:

 static void MX_GPIO_Init(void)
 {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7e:	f107 030c 	add.w	r3, r7, #12
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
 8002b8c:	611a      	str	r2, [r3, #16]

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <MX_GPIO_Init+0xcc>)
 8002b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b92:	4a2c      	ldr	r2, [pc, #176]	; (8002c44 <MX_GPIO_Init+0xcc>)
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b9a:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <MX_GPIO_Init+0xcc>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]

   __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba6:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <MX_GPIO_Init+0xcc>)
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002baa:	4a26      	ldr	r2, [pc, #152]	; (8002c44 <MX_GPIO_Init+0xcc>)
 8002bac:	f043 0304 	orr.w	r3, r3, #4
 8002bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bb2:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <MX_GPIO_Init+0xcc>)
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]

   __HAL_RCC_GPIOD_CLK_ENABLE();// Enable AHB2 Bus for GPIOC
 8002bbe:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <MX_GPIO_Init+0xcc>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	4a20      	ldr	r2, [pc, #128]	; (8002c44 <MX_GPIO_Init+0xcc>)
 8002bc4:	f043 0308 	orr.w	r3, r3, #8
 8002bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bca:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <MX_GPIO_Init+0xcc>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bdc:	481a      	ldr	r0, [pc, #104]	; (8002c48 <MX_GPIO_Init+0xd0>)
 8002bde:	f002 f837 	bl	8004c50 <HAL_GPIO_WritePin>

   /*Configure GPIO pin LED2_Pin */
   GPIO_InitStruct.Pin = LED2_Pin;
 8002be2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002be6:	60fb      	str	r3, [r7, #12]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be8:	2301      	movs	r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf4:	f107 030c 	add.w	r3, r7, #12
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4813      	ldr	r0, [pc, #76]	; (8002c48 <MX_GPIO_Init+0xd0>)
 8002bfc:	f001 fd72 	bl	80046e4 <HAL_GPIO_Init>

	// Configuration of BUTTON_EXTI13_Pin (GPIO-C Pin-13) as AF,
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8002c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c04:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <MX_GPIO_Init+0xd4>)
 8002c08:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	4619      	mov	r1, r3
 8002c14:	480e      	ldr	r0, [pc, #56]	; (8002c50 <MX_GPIO_Init+0xd8>)
 8002c16:	f001 fd65 	bl	80046e4 <HAL_GPIO_Init>

	//
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c1e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <MX_GPIO_Init+0xdc>)
 8002c22:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c28:	f107 030c 	add.w	r3, r7, #12
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	480a      	ldr	r0, [pc, #40]	; (8002c58 <MX_GPIO_Init+0xe0>)
 8002c30:	f001 fd58 	bl	80046e4 <HAL_GPIO_Init>
	// Enable NVIC EXTI line 13
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c34:	2028      	movs	r0, #40	; 0x28
 8002c36:	f001 fcfa 	bl	800462e <HAL_NVIC_EnableIRQ>

 }
 8002c3a:	bf00      	nop
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	48000400 	.word	0x48000400
 8002c4c:	10210000 	.word	0x10210000
 8002c50:	48000800 	.word	0x48000800
 8002c54:	10110000 	.word	0x10110000
 8002c58:	48000c00 	.word	0x48000c00

08002c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_MspInit+0x44>)
 8002c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c66:	4a0e      	ldr	r2, [pc, #56]	; (8002ca0 <HAL_MspInit+0x44>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_MspInit+0x44>)
 8002c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	607b      	str	r3, [r7, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_MspInit+0x44>)
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7e:	4a08      	ldr	r2, [pc, #32]	; (8002ca0 <HAL_MspInit+0x44>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c84:	6593      	str	r3, [r2, #88]	; 0x58
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_MspInit+0x44>)
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <HAL_I2C_MspInit+0x7c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d128      	bne.n	8002d18 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <HAL_I2C_MspInit+0x80>)
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	4a16      	ldr	r2, [pc, #88]	; (8002d24 <HAL_I2C_MspInit+0x80>)
 8002ccc:	f043 0302 	orr.w	r3, r3, #2
 8002cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <HAL_I2C_MspInit+0x80>)
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002cde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ce4:	2312      	movs	r3, #18
 8002ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cec:	2303      	movs	r3, #3
 8002cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	480b      	ldr	r0, [pc, #44]	; (8002d28 <HAL_I2C_MspInit+0x84>)
 8002cfc:	f001 fcf2 	bl	80046e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <HAL_I2C_MspInit+0x80>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <HAL_I2C_MspInit+0x80>)
 8002d06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_I2C_MspInit+0x80>)
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3728      	adds	r7, #40	; 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40005800 	.word	0x40005800
 8002d24:	40021000 	.word	0x40021000
 8002d28:	48000400 	.word	0x48000400

08002d2c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <HAL_I2C_MspDeInit+0x30>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10a      	bne.n	8002d54 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_I2C_MspDeInit+0x34>)
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <HAL_I2C_MspDeInit+0x34>)
 8002d44:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002d48:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8002d4a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002d4e:	4805      	ldr	r0, [pc, #20]	; (8002d64 <HAL_I2C_MspDeInit+0x38>)
 8002d50:	f001 fe72 	bl	8004a38 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40005800 	.word	0x40005800
 8002d60:	40021000 	.word	0x40021000
 8002d64:	48000400 	.word	0x48000400

08002d68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a17      	ldr	r2, [pc, #92]	; (8002de4 <HAL_SPI_MspInit+0x7c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d128      	bne.n	8002ddc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <HAL_SPI_MspInit+0x80>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	4a16      	ldr	r2, [pc, #88]	; (8002de8 <HAL_SPI_MspInit+0x80>)
 8002d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d94:	6593      	str	r3, [r2, #88]	; 0x58
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <HAL_SPI_MspInit+0x80>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_SPI_MspInit+0x80>)
 8002da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da6:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <HAL_SPI_MspInit+0x80>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_SPI_MspInit+0x80>)
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002dba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002dcc:	2306      	movs	r3, #6
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4805      	ldr	r0, [pc, #20]	; (8002dec <HAL_SPI_MspInit+0x84>)
 8002dd8:	f001 fc84 	bl	80046e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ddc:	bf00      	nop
 8002dde:	3728      	adds	r7, #40	; 0x28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40003c00 	.word	0x40003c00
 8002de8:	40021000 	.word	0x40021000
 8002dec:	48000800 	.word	0x48000800

08002df0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a08      	ldr	r2, [pc, #32]	; (8002e20 <HAL_SPI_MspDeInit+0x30>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d10a      	bne.n	8002e18 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <HAL_SPI_MspDeInit+0x34>)
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <HAL_SPI_MspDeInit+0x34>)
 8002e08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e0c:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8002e0e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002e12:	4805      	ldr	r0, [pc, #20]	; (8002e28 <HAL_SPI_MspDeInit+0x38>)
 8002e14:	f001 fe10 	bl	8004a38 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40003c00 	.word	0x40003c00
 8002e24:	40021000 	.word	0x40021000
 8002e28:	48000800 	.word	0x48000800

08002e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	; 0x30
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	f107 031c 	add.w	r3, r7, #28
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a2e      	ldr	r2, [pc, #184]	; (8002f04 <HAL_UART_MspInit+0xd8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d128      	bne.n	8002ea0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e4e:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <HAL_UART_MspInit+0xdc>)
 8002e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e52:	4a2d      	ldr	r2, [pc, #180]	; (8002f08 <HAL_UART_MspInit+0xdc>)
 8002e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e58:	6613      	str	r3, [r2, #96]	; 0x60
 8002e5a:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <HAL_UART_MspInit+0xdc>)
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e66:	4b28      	ldr	r3, [pc, #160]	; (8002f08 <HAL_UART_MspInit+0xdc>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	4a27      	ldr	r2, [pc, #156]	; (8002f08 <HAL_UART_MspInit+0xdc>)
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e72:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <HAL_UART_MspInit+0xdc>)
 8002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002e7e:	23c0      	movs	r3, #192	; 0xc0
 8002e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e8e:	2307      	movs	r3, #7
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e92:	f107 031c 	add.w	r3, r7, #28
 8002e96:	4619      	mov	r1, r3
 8002e98:	481c      	ldr	r0, [pc, #112]	; (8002f0c <HAL_UART_MspInit+0xe0>)
 8002e9a:	f001 fc23 	bl	80046e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e9e:	e02d      	b.n	8002efc <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1a      	ldr	r2, [pc, #104]	; (8002f10 <HAL_UART_MspInit+0xe4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d128      	bne.n	8002efc <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eaa:	4b17      	ldr	r3, [pc, #92]	; (8002f08 <HAL_UART_MspInit+0xdc>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	4a16      	ldr	r2, [pc, #88]	; (8002f08 <HAL_UART_MspInit+0xdc>)
 8002eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8002eb6:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <HAL_UART_MspInit+0xdc>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ec2:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <HAL_UART_MspInit+0xdc>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	4a10      	ldr	r2, [pc, #64]	; (8002f08 <HAL_UART_MspInit+0xdc>)
 8002ec8:	f043 0308 	orr.w	r3, r3, #8
 8002ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ece:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <HAL_UART_MspInit+0xdc>)
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002eec:	2307      	movs	r3, #7
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ef0:	f107 031c 	add.w	r3, r7, #28
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4807      	ldr	r0, [pc, #28]	; (8002f14 <HAL_UART_MspInit+0xe8>)
 8002ef8:	f001 fbf4 	bl	80046e4 <HAL_GPIO_Init>
}
 8002efc:	bf00      	nop
 8002efe:	3730      	adds	r7, #48	; 0x30
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40013800 	.word	0x40013800
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	48000400 	.word	0x48000400
 8002f10:	40004800 	.word	0x40004800
 8002f14:	48000c00 	.word	0x48000c00

08002f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f2a:	e7fe      	b.n	8002f2a <HardFault_Handler+0x4>

08002f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f30:	e7fe      	b.n	8002f30 <MemManage_Handler+0x4>

08002f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f36:	e7fe      	b.n	8002f36 <BusFault_Handler+0x4>

08002f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f3c:	e7fe      	b.n	8002f3c <UsageFault_Handler+0x4>

08002f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f6c:	f001 fa28 	bl	80043c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002f78:	2020      	movs	r0, #32
 8002f7a:	f001 fe9b 	bl	8004cb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002f7e:	2040      	movs	r0, #64	; 0x40
 8002f80:	f001 fe98 	bl	8004cb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002f84:	2080      	movs	r0, #128	; 0x80
 8002f86:	f001 fe95 	bl	8004cb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002f8a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f8e:	f001 fe91 	bl	8004cb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002f9a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f9e:	f001 fe89 	bl	8004cb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002fa2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002fa6:	f001 fe85 	bl	8004cb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002faa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fae:	f001 fe81 	bl	8004cb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002fb2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fb6:	f001 fe7d 	bl	8004cb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002fba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002fbe:	f001 fe79 	bl	8004cb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002fca:	2002      	movs	r0, #2
 8002fcc:	f001 fe72 	bl	8004cb4 <HAL_GPIO_EXTI_IRQHandler>
}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <_sbrk+0x50>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <_sbrk+0x16>
		heap_end = &end;
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <_sbrk+0x50>)
 8002fe6:	4a10      	ldr	r2, [pc, #64]	; (8003028 <_sbrk+0x54>)
 8002fe8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002fea:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <_sbrk+0x50>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <_sbrk+0x50>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	466a      	mov	r2, sp
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d907      	bls.n	800300e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002ffe:	f004 fb8f 	bl	8007720 <__errno>
 8003002:	4603      	mov	r3, r0
 8003004:	220c      	movs	r2, #12
 8003006:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
 800300c:	e006      	b.n	800301c <_sbrk+0x48>
	}

	heap_end += incr;
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <_sbrk+0x50>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	4a03      	ldr	r2, [pc, #12]	; (8003024 <_sbrk+0x50>)
 8003018:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800301a:	68fb      	ldr	r3, [r7, #12]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	200002e4 	.word	0x200002e4
 8003028:	20000c80 	.word	0x20000c80

0800302c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003030:	4b17      	ldr	r3, [pc, #92]	; (8003090 <SystemInit+0x64>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	4a16      	ldr	r2, [pc, #88]	; (8003090 <SystemInit+0x64>)
 8003038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800303c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <SystemInit+0x68>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a13      	ldr	r2, [pc, #76]	; (8003094 <SystemInit+0x68>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <SystemInit+0x68>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <SystemInit+0x68>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a0f      	ldr	r2, [pc, #60]	; (8003094 <SystemInit+0x68>)
 8003058:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800305c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003060:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <SystemInit+0x68>)
 8003064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003068:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <SystemInit+0x68>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <SystemInit+0x68>)
 8003070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003074:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <SystemInit+0x68>)
 8003078:	2200      	movs	r2, #0
 800307a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <SystemInit+0x64>)
 800307e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003082:	609a      	str	r2, [r3, #8]
#endif
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000ed00 	.word	0xe000ed00
 8003094:	40021000 	.word	0x40021000

08003098 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 80030a2:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <WIFI_Init+0x40>)
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <WIFI_Init+0x44>)
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <WIFI_Init+0x48>)
 80030ac:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <WIFI_Init+0x4c>)
 80030ae:	490e      	ldr	r1, [pc, #56]	; (80030e8 <WIFI_Init+0x50>)
 80030b0:	480e      	ldr	r0, [pc, #56]	; (80030ec <WIFI_Init+0x54>)
 80030b2:	f7fe f9d9 	bl	8001468 <ES_WIFI_RegisterBusIO>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d107      	bne.n	80030cc <WIFI_Init+0x34>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80030bc:	480b      	ldr	r0, [pc, #44]	; (80030ec <WIFI_Init+0x54>)
 80030be:	f7fe f9a5 	bl	800140c <ES_WIFI_Init>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 80030cc:	79fb      	ldrb	r3, [r7, #7]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	08001c8d 	.word	0x08001c8d
 80030dc:	08001d71 	.word	0x08001d71
 80030e0:	08001e31 	.word	0x08001e31
 80030e4:	08001bf5 	.word	0x08001bf5
 80030e8:	08001a6d 	.word	0x08001a6d
 80030ec:	200004f4 	.word	0x200004f4

080030f0 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	4613      	mov	r3, r2
 80030fc:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 80030fe:	2301      	movs	r3, #1
 8003100:	75fb      	strb	r3, [r7, #23]
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	68f9      	ldr	r1, [r7, #12]
 8003108:	4809      	ldr	r0, [pc, #36]	; (8003130 <WIFI_Connect+0x40>)
 800310a:	f7fe f9e1 	bl	80014d0 <ES_WIFI_Connect>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d107      	bne.n	8003124 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003114:	4806      	ldr	r0, [pc, #24]	; (8003130 <WIFI_Connect+0x40>)
 8003116:	f7fe fa53 	bl	80015c0 <ES_WIFI_GetNetworkSettings>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	75fb      	strb	r3, [r7, #23]
    }
    
  }
  return ret;
 8003124:	7dfb      	ldrb	r3, [r7, #23]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200004f4 	.word	0x200004f4

08003134 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	; 0x28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	460b      	mov	r3, r1
 8003142:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	757b      	strb	r3, [r7, #21]
  conn.RemotePort = port;
 8003150:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003152:	82fb      	strh	r3, [r7, #22]
  conn.LocalPort = local_port;
 8003154:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003156:	833b      	strh	r3, [r7, #24]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8003158:	7afb      	ldrb	r3, [r7, #11]
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	753b      	strb	r3, [r7, #20]
  conn.RemoteIP[0] = ipaddr[0];
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	76bb      	strb	r3, [r7, #26]
  conn.RemoteIP[1] = ipaddr[1];
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	785b      	ldrb	r3, [r3, #1]
 8003170:	76fb      	strb	r3, [r7, #27]
  conn.RemoteIP[2] = ipaddr[2];
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	789b      	ldrb	r3, [r3, #2]
 8003176:	773b      	strb	r3, [r7, #28]
  conn.RemoteIP[3] = ipaddr[3];
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	78db      	ldrb	r3, [r3, #3]
 800317c:	777b      	strb	r3, [r7, #29]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800317e:	f107 0314 	add.w	r3, r7, #20
 8003182:	4619      	mov	r1, r3
 8003184:	4807      	ldr	r0, [pc, #28]	; (80031a4 <WIFI_OpenClientConnection+0x70>)
 8003186:	f7fe fa45 	bl	8001614 <ES_WIFI_StartClientConnection>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8003196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800319a:	4618      	mov	r0, r3
 800319c:	3728      	adds	r7, #40	; 0x28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200004f4 	.word	0x200004f4

080031a8 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	4603      	mov	r3, r0
 80031b4:	73fb      	strb	r3, [r7, #15]
 80031b6:	4613      	mov	r3, r2
 80031b8:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80031be:	89ba      	ldrh	r2, [r7, #12]
 80031c0:	7bf9      	ldrb	r1, [r7, #15]
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	4613      	mov	r3, r2
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	4806      	ldr	r0, [pc, #24]	; (80031e8 <WIFI_SendData+0x40>)
 80031d0:	f7fe fadc 	bl	800178c <ES_WIFI_SendData>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	200004f4 	.word	0x200004f4

080031ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003224 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80031f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80031f2:	e003      	b.n	80031fc <LoopCopyDataInit>

080031f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80031f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80031f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80031fa:	3104      	adds	r1, #4

080031fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031fc:	480b      	ldr	r0, [pc, #44]	; (800322c <LoopForever+0xa>)
	ldr	r3, =_edata
 80031fe:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003200:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003202:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003204:	d3f6      	bcc.n	80031f4 <CopyDataInit>
	ldr	r2, =_sbss
 8003206:	4a0b      	ldr	r2, [pc, #44]	; (8003234 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003208:	e002      	b.n	8003210 <LoopFillZerobss>

0800320a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800320a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800320c:	f842 3b04 	str.w	r3, [r2], #4

08003210 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <LoopForever+0x16>)
	cmp	r2, r3
 8003212:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003214:	d3f9      	bcc.n	800320a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003216:	f7ff ff09 	bl	800302c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800321a:	f004 fb7d 	bl	8007918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800321e:	f7fe fe73 	bl	8001f08 <main>

08003222 <LoopForever>:

LoopForever:
    b LoopForever
 8003222:	e7fe      	b.n	8003222 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003224:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003228:	0800b2a0 	.word	0x0800b2a0
	ldr	r0, =_sdata
 800322c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003230:	200002b4 	.word	0x200002b4
	ldr	r2, =_sbss
 8003234:	200002b4 	.word	0x200002b4
	ldr	r3, = _ebss
 8003238:	20000c7c 	.word	0x20000c7c

0800323c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800323c:	e7fe      	b.n	800323c <ADC1_2_IRQHandler>
	...

08003240 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003248:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <I2Cx_MspInit+0xa8>)
 800324a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324c:	4a26      	ldr	r2, [pc, #152]	; (80032e8 <I2Cx_MspInit+0xa8>)
 800324e:	f043 0302 	orr.w	r3, r3, #2
 8003252:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <I2Cx_MspInit+0xa8>)
 8003256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003260:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003264:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003266:	2312      	movs	r3, #18
 8003268:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800326a:	2301      	movs	r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326e:	2303      	movs	r3, #3
 8003270:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003272:	2304      	movs	r3, #4
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003276:	f107 0314 	add.w	r3, r7, #20
 800327a:	4619      	mov	r1, r3
 800327c:	481b      	ldr	r0, [pc, #108]	; (80032ec <I2Cx_MspInit+0xac>)
 800327e:	f001 fa31 	bl	80046e4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003282:	f107 0314 	add.w	r3, r7, #20
 8003286:	4619      	mov	r1, r3
 8003288:	4818      	ldr	r0, [pc, #96]	; (80032ec <I2Cx_MspInit+0xac>)
 800328a:	f001 fa2b 	bl	80046e4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800328e:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <I2Cx_MspInit+0xa8>)
 8003290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003292:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <I2Cx_MspInit+0xa8>)
 8003294:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003298:	6593      	str	r3, [r2, #88]	; 0x58
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <I2Cx_MspInit+0xa8>)
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <I2Cx_MspInit+0xa8>)
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <I2Cx_MspInit+0xa8>)
 80032ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032b0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <I2Cx_MspInit+0xa8>)
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	4a0c      	ldr	r2, [pc, #48]	; (80032e8 <I2Cx_MspInit+0xa8>)
 80032b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80032bc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80032be:	2200      	movs	r2, #0
 80032c0:	210f      	movs	r1, #15
 80032c2:	2021      	movs	r0, #33	; 0x21
 80032c4:	f001 f997 	bl	80045f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80032c8:	2021      	movs	r0, #33	; 0x21
 80032ca:	f001 f9b0 	bl	800462e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	210f      	movs	r1, #15
 80032d2:	2022      	movs	r0, #34	; 0x22
 80032d4:	f001 f98f 	bl	80045f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80032d8:	2022      	movs	r0, #34	; 0x22
 80032da:	f001 f9a8 	bl	800462e <HAL_NVIC_EnableIRQ>
}
 80032de:	bf00      	nop
 80032e0:	3728      	adds	r7, #40	; 0x28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000
 80032ec:	48000400 	.word	0x48000400

080032f0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a12      	ldr	r2, [pc, #72]	; (8003344 <I2Cx_Init+0x54>)
 80032fc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a11      	ldr	r2, [pc, #68]	; (8003348 <I2Cx_Init+0x58>)
 8003302:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ff89 	bl	8003240 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f001 fcd8 	bl	8004ce4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003334:	2100      	movs	r1, #0
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f002 f9dc 	bl	80056f4 <HAL_I2CEx_ConfigAnalogFilter>
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40005800 	.word	0x40005800
 8003348:	00702681 	.word	0x00702681

0800334c <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	; 0x28
 8003350:	af04      	add	r7, sp, #16
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4603      	mov	r3, r0
 800335c:	72fb      	strb	r3, [r7, #11]
 800335e:	460b      	mov	r3, r1
 8003360:	813b      	strh	r3, [r7, #8]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800336a:	7afb      	ldrb	r3, [r7, #11]
 800336c:	b299      	uxth	r1, r3
 800336e:	88f8      	ldrh	r0, [r7, #6]
 8003370:	893a      	ldrh	r2, [r7, #8]
 8003372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003376:	9302      	str	r3, [sp, #8]
 8003378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	4603      	mov	r3, r0
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f001 fe80 	bl	8005088 <HAL_I2C_Mem_Read>
 8003388:	4603      	mov	r3, r0
 800338a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800338c:	7dfb      	ldrb	r3, [r7, #23]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8003392:	7afb      	ldrb	r3, [r7, #11]
 8003394:	4619      	mov	r1, r3
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f832 	bl	8003400 <I2Cx_Error>
  }
  return status;
 800339c:	7dfb      	ldrb	r3, [r7, #23]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b08a      	sub	sp, #40	; 0x28
 80033aa:	af04      	add	r7, sp, #16
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	4608      	mov	r0, r1
 80033b0:	4611      	mov	r1, r2
 80033b2:	461a      	mov	r2, r3
 80033b4:	4603      	mov	r3, r0
 80033b6:	72fb      	strb	r3, [r7, #11]
 80033b8:	460b      	mov	r3, r1
 80033ba:	813b      	strh	r3, [r7, #8]
 80033bc:	4613      	mov	r3, r2
 80033be:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80033c4:	7afb      	ldrb	r3, [r7, #11]
 80033c6:	b299      	uxth	r1, r3
 80033c8:	88f8      	ldrh	r0, [r7, #6]
 80033ca:	893a      	ldrh	r2, [r7, #8]
 80033cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033d0:	9302      	str	r3, [sp, #8]
 80033d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033d4:	9301      	str	r3, [sp, #4]
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	4603      	mov	r3, r0
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f001 fd3f 	bl	8004e60 <HAL_I2C_Mem_Write>
 80033e2:	4603      	mov	r3, r0
 80033e4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80033ec:	7afb      	ldrb	r3, [r7, #11]
 80033ee:	4619      	mov	r1, r3
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f805 	bl	8003400 <I2Cx_Error>
  }
  return status;
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f001 fcf8 	bl	8004e02 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ff6c 	bl	80032f0 <I2Cx_Init>
}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003424:	4802      	ldr	r0, [pc, #8]	; (8003430 <SENSOR_IO_Init+0x10>)
 8003426:	f7ff ff63 	bl	80032f0 <I2Cx_Init>
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000c1c 	.word	0x20000c1c

08003434 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af02      	add	r7, sp, #8
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
 800343e:	460b      	mov	r3, r1
 8003440:	71bb      	strb	r3, [r7, #6]
 8003442:	4613      	mov	r3, r2
 8003444:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003446:	79bb      	ldrb	r3, [r7, #6]
 8003448:	b29a      	uxth	r2, r3
 800344a:	79f9      	ldrb	r1, [r7, #7]
 800344c:	2301      	movs	r3, #1
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	1d7b      	adds	r3, r7, #5
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2301      	movs	r3, #1
 8003456:	4803      	ldr	r0, [pc, #12]	; (8003464 <SENSOR_IO_Write+0x30>)
 8003458:	f7ff ffa5 	bl	80033a6 <I2Cx_WriteMultiple>
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000c1c 	.word	0x20000c1c

08003468 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af02      	add	r7, sp, #8
 800346e:	4603      	mov	r3, r0
 8003470:	460a      	mov	r2, r1
 8003472:	71fb      	strb	r3, [r7, #7]
 8003474:	4613      	mov	r3, r2
 8003476:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800347c:	79bb      	ldrb	r3, [r7, #6]
 800347e:	b29a      	uxth	r2, r3
 8003480:	79f9      	ldrb	r1, [r7, #7]
 8003482:	2301      	movs	r3, #1
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	f107 030f 	add.w	r3, r7, #15
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	2301      	movs	r3, #1
 800348e:	4804      	ldr	r0, [pc, #16]	; (80034a0 <SENSOR_IO_Read+0x38>)
 8003490:	f7ff ff5c 	bl	800334c <I2Cx_ReadMultiple>

  return read_value;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000c1c 	.word	0x20000c1c

080034a4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	603a      	str	r2, [r7, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
 80034b2:	460b      	mov	r3, r1
 80034b4:	71bb      	strb	r3, [r7, #6]
 80034b6:	4613      	mov	r3, r2
 80034b8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80034ba:	79bb      	ldrb	r3, [r7, #6]
 80034bc:	b29a      	uxth	r2, r3
 80034be:	79f9      	ldrb	r1, [r7, #7]
 80034c0:	88bb      	ldrh	r3, [r7, #4]
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	2301      	movs	r3, #1
 80034ca:	4804      	ldr	r0, [pc, #16]	; (80034dc <SENSOR_IO_ReadMultiple+0x38>)
 80034cc:	f7ff ff3e 	bl	800334c <I2Cx_ReadMultiple>
 80034d0:	4603      	mov	r3, r0
 80034d2:	b29b      	uxth	r3, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000c1c 	.word	0x20000c1c

080034e0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80034ea:	2300      	movs	r3, #0
 80034ec:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80034ee:	4b19      	ldr	r3, [pc, #100]	; (8003554 <BSP_ACCELERO_Init+0x74>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	4798      	blx	r3
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b6a      	cmp	r3, #106	; 0x6a
 80034f8:	d002      	beq.n	8003500 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
 80034fe:	e024      	b.n	800354a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003500:	4b15      	ldr	r3, [pc, #84]	; (8003558 <BSP_ACCELERO_Init+0x78>)
 8003502:	4a14      	ldr	r2, [pc, #80]	; (8003554 <BSP_ACCELERO_Init+0x74>)
 8003504:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8003506:	2330      	movs	r3, #48	; 0x30
 8003508:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800350e:	2300      	movs	r3, #0
 8003510:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003512:	2340      	movs	r3, #64	; 0x40
 8003514:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800351e:	797a      	ldrb	r2, [r7, #5]
 8003520:	7abb      	ldrb	r3, [r7, #10]
 8003522:	4313      	orrs	r3, r2
 8003524:	b2db      	uxtb	r3, r3
 8003526:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003528:	7a3b      	ldrb	r3, [r7, #8]
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	b2db      	uxtb	r3, r3
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	b21a      	sxth	r2, r3
 8003534:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	b21b      	sxth	r3, r3
 800353c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <BSP_ACCELERO_Init+0x78>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	89ba      	ldrh	r2, [r7, #12]
 8003546:	4610      	mov	r0, r2
 8003548:	4798      	blx	r3
  }  

  return ret;
 800354a:	7bfb      	ldrb	r3, [r7, #15]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000070 	.word	0x20000070
 8003558:	200002e8 	.word	0x200002e8

0800355c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8003564:	4b08      	ldr	r3, [pc, #32]	; (8003588 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d009      	beq.n	8003580 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	2b00      	cmp	r3, #0
 8003574:	d004      	beq.n	8003580 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8003576:	4b04      	ldr	r3, [pc, #16]	; (8003588 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
    }
  }
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	200002e8 	.word	0x200002e8

0800358c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003596:	2300      	movs	r3, #0
 8003598:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800359a:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <BSP_GYRO_Init+0x7c>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	4798      	blx	r3
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b6a      	cmp	r3, #106	; 0x6a
 80035a4:	d002      	beq.n	80035ac <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	e028      	b.n	80035fe <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80035ac:	4b17      	ldr	r3, [pc, #92]	; (800360c <BSP_GYRO_Init+0x80>)
 80035ae:	4a16      	ldr	r2, [pc, #88]	; (8003608 <BSP_GYRO_Init+0x7c>)
 80035b0:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80035b6:	2330      	movs	r3, #48	; 0x30
 80035b8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80035c2:	2340      	movs	r3, #64	; 0x40
 80035c4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000;
 80035ca:	230c      	movs	r3, #12
 80035cc:	72bb      	strb	r3, [r7, #10]
    //LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_245;

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80035ce:	7aba      	ldrb	r2, [r7, #10]
 80035d0:	797b      	ldrb	r3, [r7, #5]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80035d8:	7a3b      	ldrb	r3, [r7, #8]
 80035da:	f043 0304 	orr.w	r3, r3, #4
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	021b      	lsls	r3, r3, #8
 80035e2:	b21a      	sxth	r2, r3
 80035e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	b21b      	sxth	r3, r3
 80035ec:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80035ee:	4b07      	ldr	r3, [pc, #28]	; (800360c <BSP_GYRO_Init+0x80>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	89ba      	ldrh	r2, [r7, #12]
 80035f6:	4610      	mov	r0, r2
 80035f8:	4798      	blx	r3
    
    ret = GYRO_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	200000a4 	.word	0x200000a4
 800360c:	200002ec 	.word	0x200002ec

08003610 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8003618:	4b08      	ldr	r3, [pc, #32]	; (800363c <BSP_GYRO_GetXYZ+0x2c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d009      	beq.n	8003634 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <BSP_GYRO_GetXYZ+0x2c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	2b00      	cmp	r3, #0
 8003628:	d004      	beq.n	8003634 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800362a:	4b04      	ldr	r3, [pc, #16]	; (800363c <BSP_GYRO_GetXYZ+0x2c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
    }
  }
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	200002ec 	.word	0x200002ec

08003640 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8003646:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <BSP_HSENSOR_Init+0x38>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	20be      	movs	r0, #190	; 0xbe
 800364c:	4798      	blx	r3
 800364e:	4603      	mov	r3, r0
 8003650:	2bbc      	cmp	r3, #188	; 0xbc
 8003652:	d002      	beq.n	800365a <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	607b      	str	r3, [r7, #4]
 8003658:	e009      	b.n	800366e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <BSP_HSENSOR_Init+0x3c>)
 800365c:	4a06      	ldr	r2, [pc, #24]	; (8003678 <BSP_HSENSOR_Init+0x38>)
 800365e:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8003660:	4b06      	ldr	r3, [pc, #24]	; (800367c <BSP_HSENSOR_Init+0x3c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	20be      	movs	r0, #190	; 0xbe
 8003668:	4798      	blx	r3
    ret = HSENSOR_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800366e:	687b      	ldr	r3, [r7, #4]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000014 	.word	0x20000014
 800367c:	200002f0 	.word	0x200002f0

08003680 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8003684:	4b04      	ldr	r3, [pc, #16]	; (8003698 <BSP_HSENSOR_ReadHumidity+0x18>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	20be      	movs	r0, #190	; 0xbe
 800368c:	4798      	blx	r3
 800368e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003692:	eeb0 0a67 	vmov.f32	s0, s15
 8003696:	bd80      	pop	{r7, pc}
 8003698:	200002f0 	.word	0x200002f0

0800369c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80036a6:	4b11      	ldr	r3, [pc, #68]	; (80036ec <BSP_MAGNETO_Init+0x50>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4798      	blx	r3
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b3d      	cmp	r3, #61	; 0x3d
 80036b0:	d002      	beq.n	80036b8 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	71fb      	strb	r3, [r7, #7]
 80036b6:	e013      	b.n	80036e0 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <BSP_MAGNETO_Init+0x54>)
 80036ba:	4a0c      	ldr	r2, [pc, #48]	; (80036ec <BSP_MAGNETO_Init+0x50>)
 80036bc:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80036be:	2358      	movs	r3, #88	; 0x58
 80036c0:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80036c2:	2300      	movs	r3, #0
 80036c4:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80036ca:	2308      	movs	r3, #8
 80036cc:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80036ce:	2340      	movs	r3, #64	; 0x40
 80036d0:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80036d2:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <BSP_MAGNETO_Init+0x54>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	463a      	mov	r2, r7
 80036da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036de:	4798      	blx	r3
  } 

  return ret;  
 80036e0:	79fb      	ldrb	r3, [r7, #7]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000030 	.word	0x20000030
 80036f0:	200002f4 	.word	0x200002f4

080036f4 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80036fc:	4b08      	ldr	r3, [pc, #32]	; (8003720 <BSP_MAGNETO_GetXYZ+0x2c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d009      	beq.n	8003718 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800370e:	4b04      	ldr	r3, [pc, #16]	; (8003720 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
    }
  }
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200002f4 	.word	0x200002f4

08003724 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <BSP_PSENSOR_Init+0x38>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	20ba      	movs	r0, #186	; 0xba
 8003730:	4798      	blx	r3
 8003732:	4603      	mov	r3, r0
 8003734:	2bb1      	cmp	r3, #177	; 0xb1
 8003736:	d002      	beq.n	800373e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	607b      	str	r3, [r7, #4]
 800373c:	e009      	b.n	8003752 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800373e:	4b08      	ldr	r3, [pc, #32]	; (8003760 <BSP_PSENSOR_Init+0x3c>)
 8003740:	4a06      	ldr	r2, [pc, #24]	; (800375c <BSP_PSENSOR_Init+0x38>)
 8003742:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <BSP_PSENSOR_Init+0x3c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	20ba      	movs	r0, #186	; 0xba
 800374c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8003752:	687b      	ldr	r3, [r7, #4]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000064 	.word	0x20000064
 8003760:	200002f8 	.word	0x200002f8

08003764 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <BSP_PSENSOR_ReadPressure+0x18>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	20ba      	movs	r0, #186	; 0xba
 8003770:	4798      	blx	r3
 8003772:	eef0 7a40 	vmov.f32	s15, s0
}
 8003776:	eeb0 0a67 	vmov.f32	s0, s15
 800377a:	bd80      	pop	{r7, pc}
 800377c:	200002f8 	.word	0x200002f8

08003780 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <BSP_TSENSOR_Init+0x30>)
 800378c:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <BSP_TSENSOR_Init+0x34>)
 800378e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003790:	f7ff fe46 	bl	8003420 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <BSP_TSENSOR_Init+0x30>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2100      	movs	r1, #0
 800379c:	20be      	movs	r0, #190	; 0xbe
 800379e:	4798      	blx	r3

  ret = TSENSOR_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80037a4:	79fb      	ldrb	r3, [r7, #7]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	200002fc 	.word	0x200002fc
 80037b4:	20000020 	.word	0x20000020

080037b8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <BSP_TSENSOR_ReadTemp+0x18>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	20be      	movs	r0, #190	; 0xbe
 80037c4:	4798      	blx	r3
 80037c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80037ca:	eeb0 0a67 	vmov.f32	s0, s15
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200002fc 	.word	0x200002fc

080037d4 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2120      	movs	r1, #32
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fe3f 	bl	8003468 <SENSOR_IO_Read>
 80037ea:	4603      	mov	r3, r0
 80037ec:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	f023 0304 	bic.w	r3, r3, #4
 80037f4:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	f043 0304 	orr.w	r3, r3, #4
 80037fc:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	f023 0303 	bic.w	r3, r3, #3
 8003804:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003814:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	2120      	movs	r1, #32
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fe08 	bl	8003434 <SENSOR_IO_Write>
}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800383a:	f7ff fdf1 	bl	8003420 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	210f      	movs	r1, #15
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff fe0f 	bl	8003468 <SENSOR_IO_Read>
 800384a:	4603      	mov	r3, r0
 800384c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	b2d8      	uxtb	r0, r3
 8003866:	f107 020c 	add.w	r2, r7, #12
 800386a:	2302      	movs	r3, #2
 800386c:	21b0      	movs	r1, #176	; 0xb0
 800386e:	f7ff fe19 	bl	80034a4 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8003872:	7b3b      	ldrb	r3, [r7, #12]
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	b2db      	uxtb	r3, r3
 8003878:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800387a:	7b7b      	ldrb	r3, [r7, #13]
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	b2db      	uxtb	r3, r3
 8003880:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	b2d8      	uxtb	r0, r3
 8003886:	f107 020c 	add.w	r2, r7, #12
 800388a:	2302      	movs	r3, #2
 800388c:	21b6      	movs	r1, #182	; 0xb6
 800388e:	f7ff fe09 	bl	80034a4 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003892:	7b7b      	ldrb	r3, [r7, #13]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	b21a      	sxth	r2, r3
 8003898:	7b3b      	ldrb	r3, [r7, #12]
 800389a:	b21b      	sxth	r3, r3
 800389c:	4313      	orrs	r3, r2
 800389e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	b2d8      	uxtb	r0, r3
 80038a4:	f107 020c 	add.w	r2, r7, #12
 80038a8:	2302      	movs	r3, #2
 80038aa:	21ba      	movs	r1, #186	; 0xba
 80038ac:	f7ff fdfa 	bl	80034a4 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80038b0:	7b7b      	ldrb	r3, [r7, #13]
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	b21a      	sxth	r2, r3
 80038b6:	7b3b      	ldrb	r3, [r7, #12]
 80038b8:	b21b      	sxth	r3, r3
 80038ba:	4313      	orrs	r3, r2
 80038bc:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	b2d8      	uxtb	r0, r3
 80038c2:	f107 020c 	add.w	r2, r7, #12
 80038c6:	2302      	movs	r3, #2
 80038c8:	21a8      	movs	r1, #168	; 0xa8
 80038ca:	f7ff fdeb 	bl	80034a4 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80038ce:	7b7b      	ldrb	r3, [r7, #13]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	b21a      	sxth	r2, r3
 80038d4:	7b3b      	ldrb	r3, [r7, #12]
 80038d6:	b21b      	sxth	r3, r3
 80038d8:	4313      	orrs	r3, r2
 80038da:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80038dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80038e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038ee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80038f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	ee07 3a90 	vmov	s15, r3
 80038fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003900:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003904:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003908:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800391a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800392a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800392e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003932:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800393a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800393e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003942:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003988 <HTS221_H_ReadHumidity+0x130>
 8003946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800394a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394e:	dd01      	ble.n	8003954 <HTS221_H_ReadHumidity+0xfc>
 8003950:	4b0e      	ldr	r3, [pc, #56]	; (800398c <HTS221_H_ReadHumidity+0x134>)
 8003952:	e00a      	b.n	800396a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8003954:	edd7 7a04 	vldr	s15, [r7, #16]
 8003958:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800395c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003960:	d502      	bpl.n	8003968 <HTS221_H_ReadHumidity+0x110>
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	e000      	b.n	800396a <HTS221_H_ReadHumidity+0x112>
 8003968:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800396a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800396c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003970:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003974:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003978:	eef0 7a66 	vmov.f32	s15, s13
}
 800397c:	eeb0 0a67 	vmov.f32	s0, s15
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	447a0000 	.word	0x447a0000
 800398c:	447a0000 	.word	0x447a0000

08003990 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	6039      	str	r1, [r7, #0]
 800399a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2120      	movs	r1, #32
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fd60 	bl	8003468 <SENSOR_IO_Read>
 80039a8:	4603      	mov	r3, r0
 80039aa:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	f023 0304 	bic.w	r3, r3, #4
 80039b2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	f043 0304 	orr.w	r3, r3, #4
 80039ba:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039d2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	7bfa      	ldrb	r2, [r7, #15]
 80039da:	2120      	movs	r1, #32
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fd29 	bl	8003434 <SENSOR_IO_Write>
}
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b088      	sub	sp, #32
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	4603      	mov	r3, r0
 80039f2:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	b2d8      	uxtb	r0, r3
 80039f8:	f107 0208 	add.w	r2, r7, #8
 80039fc:	2302      	movs	r3, #2
 80039fe:	21b2      	movs	r1, #178	; 0xb2
 8003a00:	f7ff fd50 	bl	80034a4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2135      	movs	r1, #53	; 0x35
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fd2c 	bl	8003468 <SENSOR_IO_Read>
 8003a10:	4603      	mov	r3, r0
 8003a12:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8003a14:	7ffb      	ldrb	r3, [r7, #31]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	b21b      	sxth	r3, r3
 8003a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1e:	b21a      	sxth	r2, r3
 8003a20:	7a3b      	ldrb	r3, [r7, #8]
 8003a22:	b21b      	sxth	r3, r3
 8003a24:	4313      	orrs	r3, r2
 8003a26:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8003a28:	7ffb      	ldrb	r3, [r7, #31]
 8003a2a:	019b      	lsls	r3, r3, #6
 8003a2c:	b21b      	sxth	r3, r3
 8003a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a32:	b21a      	sxth	r2, r3
 8003a34:	7a7b      	ldrb	r3, [r7, #9]
 8003a36:	b21b      	sxth	r3, r3
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8003a3c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003a40:	10db      	asrs	r3, r3, #3
 8003a42:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8003a44:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003a48:	10db      	asrs	r3, r3, #3
 8003a4a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	b2d8      	uxtb	r0, r3
 8003a50:	f107 0208 	add.w	r2, r7, #8
 8003a54:	2304      	movs	r3, #4
 8003a56:	21bc      	movs	r1, #188	; 0xbc
 8003a58:	f7ff fd24 	bl	80034a4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003a5c:	7a7b      	ldrb	r3, [r7, #9]
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	b21a      	sxth	r2, r3
 8003a62:	7a3b      	ldrb	r3, [r7, #8]
 8003a64:	b21b      	sxth	r3, r3
 8003a66:	4313      	orrs	r3, r2
 8003a68:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	b21a      	sxth	r2, r3
 8003a70:	7abb      	ldrb	r3, [r7, #10]
 8003a72:	b21b      	sxth	r3, r3
 8003a74:	4313      	orrs	r3, r2
 8003a76:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	b2d8      	uxtb	r0, r3
 8003a7c:	f107 0208 	add.w	r2, r7, #8
 8003a80:	2302      	movs	r3, #2
 8003a82:	21aa      	movs	r1, #170	; 0xaa
 8003a84:	f7ff fd0e 	bl	80034a4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003a88:	7a7b      	ldrb	r3, [r7, #9]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	b21a      	sxth	r2, r3
 8003a8e:	7a3b      	ldrb	r3, [r7, #8]
 8003a90:	b21b      	sxth	r3, r3
 8003a92:	4313      	orrs	r3, r2
 8003a94:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8003a96:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003a9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	ee07 3a90 	vmov	s15, r3
 8003aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aa8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003aac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aba:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003abe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003ac2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003ad8:	ee07 3a90 	vmov	s15, r3
 8003adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ae4:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	ee07 3a90 	vmov	s15, r3
}
 8003aee:	eeb0 0a67 	vmov.f32	s0, s15
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	463b      	mov	r3, r7
 8003b00:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8003b04:	783b      	ldrb	r3, [r7, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	2120      	movs	r1, #32
 8003b0a:	203c      	movs	r0, #60	; 0x3c
 8003b0c:	f7ff fc92 	bl	8003434 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8003b10:	787b      	ldrb	r3, [r7, #1]
 8003b12:	461a      	mov	r2, r3
 8003b14:	2121      	movs	r1, #33	; 0x21
 8003b16:	203c      	movs	r0, #60	; 0x3c
 8003b18:	f7ff fc8c 	bl	8003434 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8003b1c:	78bb      	ldrb	r3, [r7, #2]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2122      	movs	r1, #34	; 0x22
 8003b22:	203c      	movs	r0, #60	; 0x3c
 8003b24:	f7ff fc86 	bl	8003434 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2123      	movs	r1, #35	; 0x23
 8003b2e:	203c      	movs	r0, #60	; 0x3c
 8003b30:	f7ff fc80 	bl	8003434 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8003b34:	793b      	ldrb	r3, [r7, #4]
 8003b36:	461a      	mov	r2, r3
 8003b38:	2124      	movs	r1, #36	; 0x24
 8003b3a:	203c      	movs	r0, #60	; 0x3c
 8003b3c:	f7ff fc7a 	bl	8003434 <SENSOR_IO_Write>
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8003b52:	2122      	movs	r1, #34	; 0x22
 8003b54:	203c      	movs	r0, #60	; 0x3c
 8003b56:	f7ff fc87 	bl	8003468 <SENSOR_IO_Read>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	f023 0303 	bic.w	r3, r3, #3
 8003b64:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	f043 0303 	orr.w	r3, r3, #3
 8003b6c:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	461a      	mov	r2, r3
 8003b72:	2122      	movs	r1, #34	; 0x22
 8003b74:	203c      	movs	r0, #60	; 0x3c
 8003b76:	f7ff fc5d 	bl	8003434 <SENSOR_IO_Write>
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003b86:	f7ff fc4b 	bl	8003420 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8003b8a:	210f      	movs	r1, #15
 8003b8c:	203c      	movs	r0, #60	; 0x3c
 8003b8e:	f7ff fc6b 	bl	8003468 <SENSOR_IO_Read>
 8003b92:	4603      	mov	r3, r0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8003ba6:	2122      	movs	r1, #34	; 0x22
 8003ba8:	203c      	movs	r0, #60	; 0x3c
 8003baa:	f7ff fc5d 	bl	8003468 <SENSOR_IO_Read>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	f023 0320 	bic.w	r3, r3, #32
 8003bb8:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	f043 0320 	orr.w	r3, r3, #32
 8003bc6:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2122      	movs	r1, #34	; 0x22
 8003bce:	203c      	movs	r0, #60	; 0x3c
 8003bd0:	f7ff fc30 	bl	8003434 <SENSOR_IO_Write>
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8003bf2:	2121      	movs	r1, #33	; 0x21
 8003bf4:	203c      	movs	r0, #60	; 0x3c
 8003bf6:	f7ff fc37 	bl	8003468 <SENSOR_IO_Read>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8003bfe:	f107 0208 	add.w	r2, r7, #8
 8003c02:	2306      	movs	r3, #6
 8003c04:	21a8      	movs	r1, #168	; 0xa8
 8003c06:	203c      	movs	r0, #60	; 0x3c
 8003c08:	f7ff fc4c 	bl	80034a4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e01f      	b.n	8003c52 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003c12:	7ffb      	ldrb	r3, [r7, #31]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	3301      	adds	r3, #1
 8003c18:	f107 0220 	add.w	r2, r7, #32
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	7ffb      	ldrb	r3, [r7, #31]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	f107 0120 	add.w	r1, r7, #32
 8003c30:	440b      	add	r3, r1
 8003c32:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	7ffb      	ldrb	r3, [r7, #31]
 8003c3e:	b212      	sxth	r2, r2
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	f107 0120 	add.w	r1, r7, #32
 8003c46:	440b      	add	r3, r1
 8003c48:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003c4c:	7ffb      	ldrb	r3, [r7, #31]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	77fb      	strb	r3, [r7, #31]
 8003c52:	7ffb      	ldrb	r3, [r7, #31]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d9dc      	bls.n	8003c12 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003c5e:	2b60      	cmp	r3, #96	; 0x60
 8003c60:	d013      	beq.n	8003c8a <LIS3MDL_MagReadXYZ+0xae>
 8003c62:	2b60      	cmp	r3, #96	; 0x60
 8003c64:	dc14      	bgt.n	8003c90 <LIS3MDL_MagReadXYZ+0xb4>
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d00c      	beq.n	8003c84 <LIS3MDL_MagReadXYZ+0xa8>
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	dc10      	bgt.n	8003c90 <LIS3MDL_MagReadXYZ+0xb4>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <LIS3MDL_MagReadXYZ+0x9c>
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d003      	beq.n	8003c7e <LIS3MDL_MagReadXYZ+0xa2>
 8003c76:	e00b      	b.n	8003c90 <LIS3MDL_MagReadXYZ+0xb4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8003c78:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <LIS3MDL_MagReadXYZ+0x104>)
 8003c7a:	61bb      	str	r3, [r7, #24]
    break;
 8003c7c:	e008      	b.n	8003c90 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8003c7e:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <LIS3MDL_MagReadXYZ+0x108>)
 8003c80:	61bb      	str	r3, [r7, #24]
    break;
 8003c82:	e005      	b.n	8003c90 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8003c84:	4b18      	ldr	r3, [pc, #96]	; (8003ce8 <LIS3MDL_MagReadXYZ+0x10c>)
 8003c86:	61bb      	str	r3, [r7, #24]
    break;
 8003c88:	e002      	b.n	8003c90 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <LIS3MDL_MagReadXYZ+0x110>)
 8003c8c:	61bb      	str	r3, [r7, #24]
    break;    
 8003c8e:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8003c90:	2300      	movs	r3, #0
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e01b      	b.n	8003cce <LIS3MDL_MagReadXYZ+0xf2>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003c96:	7ffb      	ldrb	r3, [r7, #31]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	f107 0220 	add.w	r2, r7, #32
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb4:	7ffb      	ldrb	r3, [r7, #31]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	4413      	add	r3, r2
 8003cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cc0:	ee17 2a90 	vmov	r2, s15
 8003cc4:	b212      	sxth	r2, r2
 8003cc6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003cc8:	7ffb      	ldrb	r3, [r7, #31]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	7ffb      	ldrb	r3, [r7, #31]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d9e0      	bls.n	8003c96 <LIS3MDL_MagReadXYZ+0xba>
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	3e0f5c29 	.word	0x3e0f5c29
 8003ce4:	3e947ae1 	.word	0x3e947ae1
 8003ce8:	3edc28f6 	.word	0x3edc28f6
 8003cec:	3f147ae1 	.word	0x3f147ae1

08003cf0 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f87b 	bl	8003df8 <LPS22HB_Init>
}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	4603      	mov	r3, r0
 8003d12:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003d14:	2300      	movs	r3, #0
 8003d16:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003d18:	f7ff fb82 	bl	8003420 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	210f      	movs	r1, #15
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fba0 	bl	8003468 <SENSOR_IO_Read>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	74fb      	strb	r3, [r7, #19]
 8003d4a:	e013      	b.n	8003d74 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	7cfb      	ldrb	r3, [r7, #19]
 8003d52:	3328      	adds	r3, #40	; 0x28
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	7cfc      	ldrb	r4, [r7, #19]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f7ff fb84 	bl	8003468 <SENSOR_IO_Read>
 8003d60:	4603      	mov	r3, r0
 8003d62:	461a      	mov	r2, r3
 8003d64:	f107 0318 	add.w	r3, r7, #24
 8003d68:	4423      	add	r3, r4
 8003d6a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	3301      	adds	r3, #1
 8003d72:	74fb      	strb	r3, [r7, #19]
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d9e8      	bls.n	8003d4c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	74fb      	strb	r3, [r7, #19]
 8003d7e:	e010      	b.n	8003da2 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8003d80:	7cfb      	ldrb	r3, [r7, #19]
 8003d82:	f107 0218 	add.w	r2, r7, #24
 8003d86:	4413      	add	r3, r2
 8003d88:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	7cfb      	ldrb	r3, [r7, #19]
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	74fb      	strb	r3, [r7, #19]
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d9eb      	bls.n	8003d80 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db8:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2264      	movs	r2, #100	; 0x64
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	da01      	bge.n	8003dce <LPS22HB_P_ReadPressure+0x96>
 8003dca:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003dce:	131b      	asrs	r3, r3, #12
 8003dd0:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ddc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003df4 <LPS22HB_P_ReadPressure+0xbc>
 8003de0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003de4:	eef0 7a66 	vmov.f32	s15, s13
}
 8003de8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd90      	pop	{r4, r7, pc}
 8003df2:	bf00      	nop
 8003df4:	42c80000 	.word	0x42c80000

08003df8 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	211a      	movs	r1, #26
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fb2d 	bl	8003468 <SENSOR_IO_Read>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	211a      	movs	r1, #26
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fb02 	bl	8003434 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2110      	movs	r1, #16
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fb16 	bl	8003468 <SENSOR_IO_Read>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e46:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003e4e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	f023 0302 	bic.w	r3, r3, #2
 8003e56:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	f043 0302 	orr.w	r3, r3, #2
 8003e5e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	2110      	movs	r1, #16
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fae3 	bl	8003434 <SENSOR_IO_Write>
}  
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003e80:	2300      	movs	r3, #0
 8003e82:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003e84:	2110      	movs	r1, #16
 8003e86:	20d4      	movs	r0, #212	; 0xd4
 8003e88:	f7ff faee 	bl	8003468 <SENSOR_IO_Read>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003e94:	7bbb      	ldrb	r3, [r7, #14]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003e9c:	7bba      	ldrb	r2, [r7, #14]
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003ea4:	7bbb      	ldrb	r3, [r7, #14]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	2110      	movs	r1, #16
 8003eaa:	20d4      	movs	r0, #212	; 0xd4
 8003eac:	f7ff fac2 	bl	8003434 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003eb0:	2112      	movs	r1, #18
 8003eb2:	20d4      	movs	r0, #212	; 0xd4
 8003eb4:	f7ff fad8 	bl	8003468 <SENSOR_IO_Read>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003ec4:	7bbb      	ldrb	r3, [r7, #14]
 8003ec6:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8003eca:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003ecc:	7bba      	ldrb	r2, [r7, #14]
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003ed4:	7bbb      	ldrb	r3, [r7, #14]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2112      	movs	r1, #18
 8003eda:	20d4      	movs	r0, #212	; 0xd4
 8003edc:	f7ff faaa 	bl	8003434 <SENSOR_IO_Write>
//
  //
  //tilt interrupt
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL10_C);
 8003ee0:	2119      	movs	r1, #25
 8003ee2:	20d4      	movs	r0, #212	; 0xd4
 8003ee4:	f7ff fac0 	bl	8003468 <SENSOR_IO_Read>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	73bb      	strb	r3, [r7, #14]
  tmp |= 0x0C;
 8003eec:	7bbb      	ldrb	r3, [r7, #14]
 8003eee:	f043 030c 	orr.w	r3, r3, #12
 8003ef2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL10_C, tmp);
 8003ef4:	7bbb      	ldrb	r3, [r7, #14]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	2119      	movs	r1, #25
 8003efa:	20d4      	movs	r0, #212	; 0xd4
 8003efc:	f7ff fa9a 	bl	8003434 <SENSOR_IO_Write>

  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG);
 8003f00:	215e      	movs	r1, #94	; 0x5e
 8003f02:	20d4      	movs	r0, #212	; 0xd4
 8003f04:	f7ff fab0 	bl	8003468 <SENSOR_IO_Read>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	73bb      	strb	r3, [r7, #14]
  tmp |= 0x02;
 8003f0c:	7bbb      	ldrb	r3, [r7, #14]
 8003f0e:	f043 0302 	orr.w	r3, r3, #2
 8003f12:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG, tmp);
 8003f14:	7bbb      	ldrb	r3, [r7, #14]
 8003f16:	461a      	mov	r2, r3
 8003f18:	215e      	movs	r1, #94	; 0x5e
 8003f1a:	20d4      	movs	r0, #212	; 0xd4
 8003f1c:	f7ff fa8a 	bl	8003434 <SENSOR_IO_Write>




}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003f32:	2110      	movs	r1, #16
 8003f34:	20d4      	movs	r0, #212	; 0xd4
 8003f36:	f7ff fa97 	bl	8003468 <SENSOR_IO_Read>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2110      	movs	r1, #16
 8003f4c:	20d4      	movs	r0, #212	; 0xd4
 8003f4e:	f7ff fa71 	bl	8003434 <SENSOR_IO_Write>
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8003f5e:	f7ff fa5f 	bl	8003420 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003f62:	210f      	movs	r1, #15
 8003f64:	20d4      	movs	r0, #212	; 0xd4
 8003f66:	f7ff fa7f 	bl	8003468 <SENSOR_IO_Read>
 8003f6a:	4603      	mov	r3, r0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003f7e:	2115      	movs	r1, #21
 8003f80:	20d4      	movs	r0, #212	; 0xd4
 8003f82:	f7ff fa71 	bl	8003468 <SENSOR_IO_Read>
 8003f86:	4603      	mov	r3, r0
 8003f88:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	f023 0310 	bic.w	r3, r3, #16
 8003f90:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	f043 0310 	orr.w	r3, r3, #16
 8003f9e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2115      	movs	r1, #21
 8003fa6:	20d4      	movs	r0, #212	; 0xd4
 8003fa8:	f7ff fa44 	bl	8003434 <SENSOR_IO_Write>
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003fca:	2110      	movs	r1, #16
 8003fcc:	20d4      	movs	r0, #212	; 0xd4
 8003fce:	f7ff fa4b 	bl	8003468 <SENSOR_IO_Read>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003fd6:	f107 0208 	add.w	r2, r7, #8
 8003fda:	2306      	movs	r3, #6
 8003fdc:	2128      	movs	r1, #40	; 0x28
 8003fde:	20d4      	movs	r0, #212	; 0xd4
 8003fe0:	f7ff fa60 	bl	80034a4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	77fb      	strb	r3, [r7, #31]
 8003fe8:	e01f      	b.n	800402a <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003fea:	7ffb      	ldrb	r3, [r7, #31]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	3301      	adds	r3, #1
 8003ff0:	f107 0220 	add.w	r2, r7, #32
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	7ffb      	ldrb	r3, [r7, #31]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	f107 0120 	add.w	r1, r7, #32
 8004008:	440b      	add	r3, r1
 800400a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800400e:	b29b      	uxth	r3, r3
 8004010:	4413      	add	r3, r2
 8004012:	b29a      	uxth	r2, r3
 8004014:	7ffb      	ldrb	r3, [r7, #31]
 8004016:	b212      	sxth	r2, r2
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	f107 0120 	add.w	r1, r7, #32
 800401e:	440b      	add	r3, r1
 8004020:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8004024:	7ffb      	ldrb	r3, [r7, #31]
 8004026:	3301      	adds	r3, #1
 8004028:	77fb      	strb	r3, [r7, #31]
 800402a:	7ffb      	ldrb	r3, [r7, #31]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d9dc      	bls.n	8003fea <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d828      	bhi.n	800408c <LSM6DSL_AccReadXYZ+0xd8>
 800403a:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <LSM6DSL_AccReadXYZ+0x8c>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004075 	.word	0x08004075
 8004044:	0800408d 	.word	0x0800408d
 8004048:	0800408d 	.word	0x0800408d
 800404c:	0800408d 	.word	0x0800408d
 8004050:	08004087 	.word	0x08004087
 8004054:	0800408d 	.word	0x0800408d
 8004058:	0800408d 	.word	0x0800408d
 800405c:	0800408d 	.word	0x0800408d
 8004060:	0800407b 	.word	0x0800407b
 8004064:	0800408d 	.word	0x0800408d
 8004068:	0800408d 	.word	0x0800408d
 800406c:	0800408d 	.word	0x0800408d
 8004070:	08004081 	.word	0x08004081
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8004074:	4b19      	ldr	r3, [pc, #100]	; (80040dc <LSM6DSL_AccReadXYZ+0x128>)
 8004076:	61bb      	str	r3, [r7, #24]
    break;
 8004078:	e008      	b.n	800408c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800407a:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <LSM6DSL_AccReadXYZ+0x12c>)
 800407c:	61bb      	str	r3, [r7, #24]
    break;
 800407e:	e005      	b.n	800408c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8004080:	4b18      	ldr	r3, [pc, #96]	; (80040e4 <LSM6DSL_AccReadXYZ+0x130>)
 8004082:	61bb      	str	r3, [r7, #24]
    break;
 8004084:	e002      	b.n	800408c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8004086:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <LSM6DSL_AccReadXYZ+0x134>)
 8004088:	61bb      	str	r3, [r7, #24]
    break;    
 800408a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800408c:	2300      	movs	r3, #0
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e01b      	b.n	80040ca <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8004092:	7ffb      	ldrb	r3, [r7, #31]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	f107 0220 	add.w	r2, r7, #32
 800409a:	4413      	add	r3, r2
 800409c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80040a0:	ee07 3a90 	vmov	s15, r3
 80040a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80040ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b0:	7ffb      	ldrb	r3, [r7, #31]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	4413      	add	r3, r2
 80040b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040bc:	ee17 2a90 	vmov	r2, s15
 80040c0:	b212      	sxth	r2, r2
 80040c2:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80040c4:	7ffb      	ldrb	r3, [r7, #31]
 80040c6:	3301      	adds	r3, #1
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	7ffb      	ldrb	r3, [r7, #31]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d9e0      	bls.n	8004092 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	3d79db23 	.word	0x3d79db23
 80040e0:	3df9db23 	.word	0x3df9db23
 80040e4:	3e79db23 	.word	0x3e79db23
 80040e8:	3ef9db23 	.word	0x3ef9db23

080040ec <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80040fa:	2111      	movs	r1, #17
 80040fc:	20d4      	movs	r0, #212	; 0xd4
 80040fe:	f7ff f9b3 	bl	8003468 <SENSOR_IO_Read>
 8004102:	4603      	mov	r3, r0
 8004104:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800410a:	7bbb      	ldrb	r3, [r7, #14]
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8004112:	7bba      	ldrb	r2, [r7, #14]
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	4313      	orrs	r3, r2
 8004118:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800411a:	7bbb      	ldrb	r3, [r7, #14]
 800411c:	461a      	mov	r2, r3
 800411e:	2111      	movs	r1, #17
 8004120:	20d4      	movs	r0, #212	; 0xd4
 8004122:	f7ff f987 	bl	8003434 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004126:	2112      	movs	r1, #18
 8004128:	20d4      	movs	r0, #212	; 0xd4
 800412a:	f7ff f99d 	bl	8003468 <SENSOR_IO_Read>
 800412e:	4603      	mov	r3, r0
 8004130:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	0a1b      	lsrs	r3, r3, #8
 8004136:	b29b      	uxth	r3, r3
 8004138:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800413a:	7bbb      	ldrb	r3, [r7, #14]
 800413c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8004140:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8004142:	7bba      	ldrb	r2, [r7, #14]
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	4313      	orrs	r3, r2
 8004148:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800414a:	7bbb      	ldrb	r3, [r7, #14]
 800414c:	461a      	mov	r2, r3
 800414e:	2112      	movs	r1, #18
 8004150:	20d4      	movs	r0, #212	; 0xd4
 8004152:	f7ff f96f 	bl	8003434 <SENSOR_IO_Write>
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004164:	2300      	movs	r3, #0
 8004166:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004168:	2111      	movs	r1, #17
 800416a:	20d4      	movs	r0, #212	; 0xd4
 800416c:	f7ff f97c 	bl	8003468 <SENSOR_IO_Read>
 8004170:	4603      	mov	r3, r0
 8004172:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	461a      	mov	r2, r3
 8004180:	2111      	movs	r1, #17
 8004182:	20d4      	movs	r0, #212	; 0xd4
 8004184:	f7ff f956 	bl	8003434 <SENSOR_IO_Write>
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004194:	f7ff f944 	bl	8003420 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8004198:	210f      	movs	r1, #15
 800419a:	20d4      	movs	r0, #212	; 0xd4
 800419c:	f7ff f964 	bl	8003468 <SENSOR_IO_Read>
 80041a0:	4603      	mov	r3, r0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	4603      	mov	r3, r0
 80041ae:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80041b0:	2300      	movs	r3, #0
 80041b2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80041b4:	2116      	movs	r1, #22
 80041b6:	20d4      	movs	r0, #212	; 0xd4
 80041b8:	f7ff f956 	bl	8003468 <SENSOR_IO_Read>
 80041bc:	4603      	mov	r3, r0
 80041be:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041d4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	461a      	mov	r2, r3
 80041da:	2116      	movs	r1, #22
 80041dc:	20d4      	movs	r0, #212	; 0xd4
 80041de:	f7ff f929 	bl	8003434 <SENSOR_IO_Write>
}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004202:	2111      	movs	r1, #17
 8004204:	20d4      	movs	r0, #212	; 0xd4
 8004206:	f7ff f92f 	bl	8003468 <SENSOR_IO_Read>
 800420a:	4603      	mov	r3, r0
 800420c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800420e:	f107 0208 	add.w	r2, r7, #8
 8004212:	2306      	movs	r3, #6
 8004214:	2122      	movs	r1, #34	; 0x22
 8004216:	20d4      	movs	r0, #212	; 0xd4
 8004218:	f7ff f944 	bl	80034a4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800421c:	2300      	movs	r3, #0
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e01f      	b.n	8004262 <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004222:	7ffb      	ldrb	r3, [r7, #31]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	3301      	adds	r3, #1
 8004228:	f107 0220 	add.w	r2, r7, #32
 800422c:	4413      	add	r3, r2
 800422e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004232:	b29b      	uxth	r3, r3
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	b29a      	uxth	r2, r3
 8004238:	7ffb      	ldrb	r3, [r7, #31]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	f107 0120 	add.w	r1, r7, #32
 8004240:	440b      	add	r3, r1
 8004242:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004246:	b29b      	uxth	r3, r3
 8004248:	4413      	add	r3, r2
 800424a:	b29a      	uxth	r2, r3
 800424c:	7ffb      	ldrb	r3, [r7, #31]
 800424e:	b212      	sxth	r2, r2
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	f107 0120 	add.w	r1, r7, #32
 8004256:	440b      	add	r3, r1
 8004258:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800425c:	7ffb      	ldrb	r3, [r7, #31]
 800425e:	3301      	adds	r3, #1
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	7ffb      	ldrb	r3, [r7, #31]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d9dc      	bls.n	8004222 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8004268:	7dfb      	ldrb	r3, [r7, #23]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b0c      	cmp	r3, #12
 8004270:	d828      	bhi.n	80042c4 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	080042ad 	.word	0x080042ad
 800427c:	080042c5 	.word	0x080042c5
 8004280:	080042c5 	.word	0x080042c5
 8004284:	080042c5 	.word	0x080042c5
 8004288:	080042b3 	.word	0x080042b3
 800428c:	080042c5 	.word	0x080042c5
 8004290:	080042c5 	.word	0x080042c5
 8004294:	080042c5 	.word	0x080042c5
 8004298:	080042b9 	.word	0x080042b9
 800429c:	080042c5 	.word	0x080042c5
 80042a0:	080042c5 	.word	0x080042c5
 80042a4:	080042c5 	.word	0x080042c5
 80042a8:	080042bf 	.word	0x080042bf
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80042ac:	4b17      	ldr	r3, [pc, #92]	; (800430c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80042ae:	61bb      	str	r3, [r7, #24]
    break;
 80042b0:	e008      	b.n	80042c4 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80042b2:	4b17      	ldr	r3, [pc, #92]	; (8004310 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80042b4:	61bb      	str	r3, [r7, #24]
    break;
 80042b6:	e005      	b.n	80042c4 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80042b8:	4b16      	ldr	r3, [pc, #88]	; (8004314 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 80042ba:	61bb      	str	r3, [r7, #24]
    break;
 80042bc:	e002      	b.n	80042c4 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80042be:	4b16      	ldr	r3, [pc, #88]	; (8004318 <LSM6DSL_GyroReadXYZAngRate+0x12c>)
 80042c0:	61bb      	str	r3, [r7, #24]
    break;    
 80042c2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80042c4:	2300      	movs	r3, #0
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e017      	b.n	80042fa <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80042ca:	7ffb      	ldrb	r3, [r7, #31]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	f107 0220 	add.w	r2, r7, #32
 80042d2:	4413      	add	r3, r2
 80042d4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80042d8:	ee07 3a90 	vmov	s15, r3
 80042dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042e0:	7ffb      	ldrb	r3, [r7, #31]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	4413      	add	r3, r2
 80042e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80042ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f0:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80042f4:	7ffb      	ldrb	r3, [r7, #31]
 80042f6:	3301      	adds	r3, #1
 80042f8:	77fb      	strb	r3, [r7, #31]
 80042fa:	7ffb      	ldrb	r3, [r7, #31]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d9e4      	bls.n	80042ca <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	410c0000 	.word	0x410c0000
 8004310:	418c0000 	.word	0x418c0000
 8004314:	420c0000 	.word	0x420c0000
 8004318:	428c0000 	.word	0x428c0000

0800431c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004326:	2003      	movs	r0, #3
 8004328:	f000 f95a 	bl	80045e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800432c:	2000      	movs	r0, #0
 800432e:	f000 f80d 	bl	800434c <HAL_InitTick>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	71fb      	strb	r3, [r7, #7]
 800433c:	e001      	b.n	8004342 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800433e:	f7fe fc8d 	bl	8002c5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004342:	79fb      	ldrb	r3, [r7, #7]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004358:	4b16      	ldr	r3, [pc, #88]	; (80043b4 <HAL_InitTick+0x68>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d022      	beq.n	80043a6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004360:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <HAL_InitTick+0x6c>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <HAL_InitTick+0x68>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800436c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	4618      	mov	r0, r3
 8004376:	f000 f968 	bl	800464a <HAL_SYSTICK_Config>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10f      	bne.n	80043a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b0f      	cmp	r3, #15
 8004384:	d809      	bhi.n	800439a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004386:	2200      	movs	r2, #0
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	f04f 30ff 	mov.w	r0, #4294967295
 800438e:	f000 f932 	bl	80045f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004392:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <HAL_InitTick+0x70>)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	e007      	b.n	80043aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	e004      	b.n	80043aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e001      	b.n	80043aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	200000dc 	.word	0x200000dc
 80043b8:	20000010 	.word	0x20000010
 80043bc:	200000d8 	.word	0x200000d8

080043c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <HAL_IncTick+0x1c>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_IncTick+0x20>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4413      	add	r3, r2
 80043ce:	4a03      	ldr	r2, [pc, #12]	; (80043dc <HAL_IncTick+0x1c>)
 80043d0:	6013      	str	r3, [r2, #0]
}
 80043d2:	bf00      	nop
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	20000c68 	.word	0x20000c68
 80043e0:	200000dc 	.word	0x200000dc

080043e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return uwTick;
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <HAL_GetTick+0x14>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000c68 	.word	0x20000c68

080043fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004404:	f7ff ffee 	bl	80043e4 <HAL_GetTick>
 8004408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d004      	beq.n	8004420 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <HAL_Delay+0x40>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4413      	add	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004420:	bf00      	nop
 8004422:	f7ff ffdf 	bl	80043e4 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	429a      	cmp	r2, r3
 8004430:	d8f7      	bhi.n	8004422 <HAL_Delay+0x26>
  {
  }
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	200000dc 	.word	0x200000dc

08004440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <__NVIC_SetPriorityGrouping+0x44>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800445c:	4013      	ands	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800446c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004472:	4a04      	ldr	r2, [pc, #16]	; (8004484 <__NVIC_SetPriorityGrouping+0x44>)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	60d3      	str	r3, [r2, #12]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	e000ed00 	.word	0xe000ed00

08004488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800448c:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <__NVIC_GetPriorityGrouping+0x18>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	f003 0307 	and.w	r3, r3, #7
}
 8004496:	4618      	mov	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	db0b      	blt.n	80044ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	f003 021f 	and.w	r2, r3, #31
 80044bc:	4907      	ldr	r1, [pc, #28]	; (80044dc <__NVIC_EnableIRQ+0x38>)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	2001      	movs	r0, #1
 80044c6:	fa00 f202 	lsl.w	r2, r0, r2
 80044ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	e000e100 	.word	0xe000e100

080044e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	6039      	str	r1, [r7, #0]
 80044ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	db0a      	blt.n	800450a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	490c      	ldr	r1, [pc, #48]	; (800452c <__NVIC_SetPriority+0x4c>)
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	0112      	lsls	r2, r2, #4
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	440b      	add	r3, r1
 8004504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004508:	e00a      	b.n	8004520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4908      	ldr	r1, [pc, #32]	; (8004530 <__NVIC_SetPriority+0x50>)
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	3b04      	subs	r3, #4
 8004518:	0112      	lsls	r2, r2, #4
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	440b      	add	r3, r1
 800451e:	761a      	strb	r2, [r3, #24]
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	e000e100 	.word	0xe000e100
 8004530:	e000ed00 	.word	0xe000ed00

08004534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004534:	b480      	push	{r7}
 8004536:	b089      	sub	sp, #36	; 0x24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f1c3 0307 	rsb	r3, r3, #7
 800454e:	2b04      	cmp	r3, #4
 8004550:	bf28      	it	cs
 8004552:	2304      	movcs	r3, #4
 8004554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3304      	adds	r3, #4
 800455a:	2b06      	cmp	r3, #6
 800455c:	d902      	bls.n	8004564 <NVIC_EncodePriority+0x30>
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3b03      	subs	r3, #3
 8004562:	e000      	b.n	8004566 <NVIC_EncodePriority+0x32>
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004568:	f04f 32ff 	mov.w	r2, #4294967295
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43da      	mvns	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	401a      	ands	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800457c:	f04f 31ff 	mov.w	r1, #4294967295
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	fa01 f303 	lsl.w	r3, r1, r3
 8004586:	43d9      	mvns	r1, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800458c:	4313      	orrs	r3, r2
         );
}
 800458e:	4618      	mov	r0, r3
 8004590:	3724      	adds	r7, #36	; 0x24
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045ac:	d301      	bcc.n	80045b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ae:	2301      	movs	r3, #1
 80045b0:	e00f      	b.n	80045d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045b2:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <SysTick_Config+0x40>)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ba:	210f      	movs	r1, #15
 80045bc:	f04f 30ff 	mov.w	r0, #4294967295
 80045c0:	f7ff ff8e 	bl	80044e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <SysTick_Config+0x40>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ca:	4b04      	ldr	r3, [pc, #16]	; (80045dc <SysTick_Config+0x40>)
 80045cc:	2207      	movs	r2, #7
 80045ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	e000e010 	.word	0xe000e010

080045e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff ff29 	bl	8004440 <__NVIC_SetPriorityGrouping>
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b086      	sub	sp, #24
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	4603      	mov	r3, r0
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	607a      	str	r2, [r7, #4]
 8004602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004608:	f7ff ff3e 	bl	8004488 <__NVIC_GetPriorityGrouping>
 800460c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	6978      	ldr	r0, [r7, #20]
 8004614:	f7ff ff8e 	bl	8004534 <NVIC_EncodePriority>
 8004618:	4602      	mov	r2, r0
 800461a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800461e:	4611      	mov	r1, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff ff5d 	bl	80044e0 <__NVIC_SetPriority>
}
 8004626:	bf00      	nop
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	4603      	mov	r3, r0
 8004636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ff31 	bl	80044a4 <__NVIC_EnableIRQ>
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff ffa2 	bl	800459c <SysTick_Config>
 8004658:	4603      	mov	r3, r0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d005      	beq.n	8004686 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2204      	movs	r2, #4
 800467e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
 8004684:	e029      	b.n	80046da <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 020e 	bic.w	r2, r2, #14
 8004694:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0201 	bic.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046aa:	f003 021c 	and.w	r2, r3, #28
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	2101      	movs	r1, #1
 80046b4:	fa01 f202 	lsl.w	r2, r1, r2
 80046b8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	4798      	blx	r3
    }
  }
  return status;
 80046da:	7bfb      	ldrb	r3, [r7, #15]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046f2:	e17f      	b.n	80049f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	2101      	movs	r1, #1
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004700:	4013      	ands	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8171 	beq.w	80049ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d00b      	beq.n	800472c <HAL_GPIO_Init+0x48>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d007      	beq.n	800472c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004720:	2b11      	cmp	r3, #17
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b12      	cmp	r3, #18
 800472a:	d130      	bne.n	800478e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	2203      	movs	r2, #3
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4013      	ands	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004762:	2201      	movs	r2, #1
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43db      	mvns	r3, r3
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4013      	ands	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	091b      	lsrs	r3, r3, #4
 8004778:	f003 0201 	and.w	r2, r3, #1
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	2b03      	cmp	r3, #3
 8004798:	d118      	bne.n	80047cc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80047a0:	2201      	movs	r2, #1
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4013      	ands	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	08db      	lsrs	r3, r3, #3
 80047b6:	f003 0201 	and.w	r2, r3, #1
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	2203      	movs	r2, #3
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	43db      	mvns	r3, r3
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4013      	ands	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d003      	beq.n	800480c <HAL_GPIO_Init+0x128>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b12      	cmp	r3, #18
 800480a:	d123      	bne.n	8004854 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	08da      	lsrs	r2, r3, #3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3208      	adds	r2, #8
 8004814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004818:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	220f      	movs	r2, #15
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	43db      	mvns	r3, r3
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4013      	ands	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	08da      	lsrs	r2, r3, #3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3208      	adds	r2, #8
 800484e:	6939      	ldr	r1, [r7, #16]
 8004850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	2203      	movs	r2, #3
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	43db      	mvns	r3, r3
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4013      	ands	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 0203 	and.w	r2, r3, #3
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80ac 	beq.w	80049ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004896:	4b5f      	ldr	r3, [pc, #380]	; (8004a14 <HAL_GPIO_Init+0x330>)
 8004898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489a:	4a5e      	ldr	r2, [pc, #376]	; (8004a14 <HAL_GPIO_Init+0x330>)
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	6613      	str	r3, [r2, #96]	; 0x60
 80048a2:	4b5c      	ldr	r3, [pc, #368]	; (8004a14 <HAL_GPIO_Init+0x330>)
 80048a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80048ae:	4a5a      	ldr	r2, [pc, #360]	; (8004a18 <HAL_GPIO_Init+0x334>)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	089b      	lsrs	r3, r3, #2
 80048b4:	3302      	adds	r3, #2
 80048b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	220f      	movs	r2, #15
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	43db      	mvns	r3, r3
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4013      	ands	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80048d8:	d025      	beq.n	8004926 <HAL_GPIO_Init+0x242>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a4f      	ldr	r2, [pc, #316]	; (8004a1c <HAL_GPIO_Init+0x338>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01f      	beq.n	8004922 <HAL_GPIO_Init+0x23e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a4e      	ldr	r2, [pc, #312]	; (8004a20 <HAL_GPIO_Init+0x33c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d019      	beq.n	800491e <HAL_GPIO_Init+0x23a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a4d      	ldr	r2, [pc, #308]	; (8004a24 <HAL_GPIO_Init+0x340>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_GPIO_Init+0x236>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a4c      	ldr	r2, [pc, #304]	; (8004a28 <HAL_GPIO_Init+0x344>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00d      	beq.n	8004916 <HAL_GPIO_Init+0x232>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a4b      	ldr	r2, [pc, #300]	; (8004a2c <HAL_GPIO_Init+0x348>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d007      	beq.n	8004912 <HAL_GPIO_Init+0x22e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a4a      	ldr	r2, [pc, #296]	; (8004a30 <HAL_GPIO_Init+0x34c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d101      	bne.n	800490e <HAL_GPIO_Init+0x22a>
 800490a:	2306      	movs	r3, #6
 800490c:	e00c      	b.n	8004928 <HAL_GPIO_Init+0x244>
 800490e:	2307      	movs	r3, #7
 8004910:	e00a      	b.n	8004928 <HAL_GPIO_Init+0x244>
 8004912:	2305      	movs	r3, #5
 8004914:	e008      	b.n	8004928 <HAL_GPIO_Init+0x244>
 8004916:	2304      	movs	r3, #4
 8004918:	e006      	b.n	8004928 <HAL_GPIO_Init+0x244>
 800491a:	2303      	movs	r3, #3
 800491c:	e004      	b.n	8004928 <HAL_GPIO_Init+0x244>
 800491e:	2302      	movs	r3, #2
 8004920:	e002      	b.n	8004928 <HAL_GPIO_Init+0x244>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_GPIO_Init+0x244>
 8004926:	2300      	movs	r3, #0
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	f002 0203 	and.w	r2, r2, #3
 800492e:	0092      	lsls	r2, r2, #2
 8004930:	4093      	lsls	r3, r2
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004938:	4937      	ldr	r1, [pc, #220]	; (8004a18 <HAL_GPIO_Init+0x334>)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	089b      	lsrs	r3, r3, #2
 800493e:	3302      	adds	r3, #2
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004946:	4b3b      	ldr	r3, [pc, #236]	; (8004a34 <HAL_GPIO_Init+0x350>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	43db      	mvns	r3, r3
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4013      	ands	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800496a:	4a32      	ldr	r2, [pc, #200]	; (8004a34 <HAL_GPIO_Init+0x350>)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004970:	4b30      	ldr	r3, [pc, #192]	; (8004a34 <HAL_GPIO_Init+0x350>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	43db      	mvns	r3, r3
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004994:	4a27      	ldr	r2, [pc, #156]	; (8004a34 <HAL_GPIO_Init+0x350>)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800499a:	4b26      	ldr	r3, [pc, #152]	; (8004a34 <HAL_GPIO_Init+0x350>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	43db      	mvns	r3, r3
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4013      	ands	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049be:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <HAL_GPIO_Init+0x350>)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049c4:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <HAL_GPIO_Init+0x350>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	43db      	mvns	r3, r3
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4013      	ands	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049e8:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <HAL_GPIO_Init+0x350>)
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	3301      	adds	r3, #1
 80049f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	fa22 f303 	lsr.w	r3, r2, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f47f ae78 	bne.w	80046f4 <HAL_GPIO_Init+0x10>
  }
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	48000400 	.word	0x48000400
 8004a20:	48000800 	.word	0x48000800
 8004a24:	48000c00 	.word	0x48000c00
 8004a28:	48001000 	.word	0x48001000
 8004a2c:	48001400 	.word	0x48001400
 8004a30:	48001800 	.word	0x48001800
 8004a34:	40010400 	.word	0x40010400

08004a38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004a46:	e0cd      	b.n	8004be4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004a48:	2201      	movs	r2, #1
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	4013      	ands	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80c0 	beq.w	8004bde <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004a5e:	4a68      	ldr	r2, [pc, #416]	; (8004c00 <HAL_GPIO_DeInit+0x1c8>)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	089b      	lsrs	r3, r3, #2
 8004a64:	3302      	adds	r3, #2
 8004a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	220f      	movs	r2, #15
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a86:	d025      	beq.n	8004ad4 <HAL_GPIO_DeInit+0x9c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a5e      	ldr	r2, [pc, #376]	; (8004c04 <HAL_GPIO_DeInit+0x1cc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d01f      	beq.n	8004ad0 <HAL_GPIO_DeInit+0x98>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a5d      	ldr	r2, [pc, #372]	; (8004c08 <HAL_GPIO_DeInit+0x1d0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d019      	beq.n	8004acc <HAL_GPIO_DeInit+0x94>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a5c      	ldr	r2, [pc, #368]	; (8004c0c <HAL_GPIO_DeInit+0x1d4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d013      	beq.n	8004ac8 <HAL_GPIO_DeInit+0x90>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a5b      	ldr	r2, [pc, #364]	; (8004c10 <HAL_GPIO_DeInit+0x1d8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00d      	beq.n	8004ac4 <HAL_GPIO_DeInit+0x8c>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a5a      	ldr	r2, [pc, #360]	; (8004c14 <HAL_GPIO_DeInit+0x1dc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d007      	beq.n	8004ac0 <HAL_GPIO_DeInit+0x88>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a59      	ldr	r2, [pc, #356]	; (8004c18 <HAL_GPIO_DeInit+0x1e0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d101      	bne.n	8004abc <HAL_GPIO_DeInit+0x84>
 8004ab8:	2306      	movs	r3, #6
 8004aba:	e00c      	b.n	8004ad6 <HAL_GPIO_DeInit+0x9e>
 8004abc:	2307      	movs	r3, #7
 8004abe:	e00a      	b.n	8004ad6 <HAL_GPIO_DeInit+0x9e>
 8004ac0:	2305      	movs	r3, #5
 8004ac2:	e008      	b.n	8004ad6 <HAL_GPIO_DeInit+0x9e>
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	e006      	b.n	8004ad6 <HAL_GPIO_DeInit+0x9e>
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e004      	b.n	8004ad6 <HAL_GPIO_DeInit+0x9e>
 8004acc:	2302      	movs	r3, #2
 8004ace:	e002      	b.n	8004ad6 <HAL_GPIO_DeInit+0x9e>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <HAL_GPIO_DeInit+0x9e>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	f002 0203 	and.w	r2, r2, #3
 8004adc:	0092      	lsls	r2, r2, #2
 8004ade:	4093      	lsls	r3, r2
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d132      	bne.n	8004b4c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004ae6:	4b4d      	ldr	r3, [pc, #308]	; (8004c1c <HAL_GPIO_DeInit+0x1e4>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	43db      	mvns	r3, r3
 8004aee:	494b      	ldr	r1, [pc, #300]	; (8004c1c <HAL_GPIO_DeInit+0x1e4>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004af4:	4b49      	ldr	r3, [pc, #292]	; (8004c1c <HAL_GPIO_DeInit+0x1e4>)
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	43db      	mvns	r3, r3
 8004afc:	4947      	ldr	r1, [pc, #284]	; (8004c1c <HAL_GPIO_DeInit+0x1e4>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004b02:	4b46      	ldr	r3, [pc, #280]	; (8004c1c <HAL_GPIO_DeInit+0x1e4>)
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	4944      	ldr	r1, [pc, #272]	; (8004c1c <HAL_GPIO_DeInit+0x1e4>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004b10:	4b42      	ldr	r3, [pc, #264]	; (8004c1c <HAL_GPIO_DeInit+0x1e4>)
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	43db      	mvns	r3, r3
 8004b18:	4940      	ldr	r1, [pc, #256]	; (8004c1c <HAL_GPIO_DeInit+0x1e4>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	220f      	movs	r2, #15
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004b2e:	4a34      	ldr	r2, [pc, #208]	; (8004c00 <HAL_GPIO_DeInit+0x1c8>)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	089b      	lsrs	r3, r3, #2
 8004b34:	3302      	adds	r3, #2
 8004b36:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	43da      	mvns	r2, r3
 8004b3e:	4830      	ldr	r0, [pc, #192]	; (8004c00 <HAL_GPIO_DeInit+0x1c8>)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	089b      	lsrs	r3, r3, #2
 8004b44:	400a      	ands	r2, r1
 8004b46:	3302      	adds	r3, #2
 8004b48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	2103      	movs	r1, #3
 8004b56:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	08da      	lsrs	r2, r3, #3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3208      	adds	r2, #8
 8004b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	220f      	movs	r2, #15
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	08d2      	lsrs	r2, r2, #3
 8004b80:	4019      	ands	r1, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3208      	adds	r2, #8
 8004b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	2103      	movs	r1, #3
 8004b94:	fa01 f303 	lsl.w	r3, r1, r3
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	401a      	ands	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bac:	43db      	mvns	r3, r3
 8004bae:	401a      	ands	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	2103      	movs	r1, #3
 8004bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	401a      	ands	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bce:	2101      	movs	r1, #1
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	401a      	ands	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	3301      	adds	r3, #1
 8004be2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f47f af2b 	bne.w	8004a48 <HAL_GPIO_DeInit+0x10>
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	bf00      	nop
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	40010000 	.word	0x40010000
 8004c04:	48000400 	.word	0x48000400
 8004c08:	48000800 	.word	0x48000800
 8004c0c:	48000c00 	.word	0x48000c00
 8004c10:	48001000 	.word	0x48001000
 8004c14:	48001400 	.word	0x48001400
 8004c18:	48001800 	.word	0x48001800
 8004c1c:	40010400 	.word	0x40010400

08004c20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	887b      	ldrh	r3, [r7, #2]
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
 8004c3c:	e001      	b.n	8004c42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	807b      	strh	r3, [r7, #2]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c60:	787b      	ldrb	r3, [r7, #1]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c66:	887a      	ldrh	r2, [r7, #2]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c6c:	e002      	b.n	8004c74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c6e:	887a      	ldrh	r2, [r7, #2]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	887b      	ldrh	r3, [r7, #2]
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c98:	887a      	ldrh	r2, [r7, #2]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8004c9e:	e002      	b.n	8004ca6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ca0:	887a      	ldrh	r2, [r7, #2]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	619a      	str	r2, [r3, #24]
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004cbe:	4b08      	ldr	r3, [pc, #32]	; (8004ce0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d006      	beq.n	8004cd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cca:	4a05      	ldr	r2, [pc, #20]	; (8004ce0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ccc:	88fb      	ldrh	r3, [r7, #6]
 8004cce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cd0:	88fb      	ldrh	r3, [r7, #6]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd fea4 	bl	8002a20 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40010400 	.word	0x40010400

08004ce4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e081      	b.n	8004dfa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fd ffca 	bl	8002ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2224      	movs	r2, #36	; 0x24
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d107      	bne.n	8004d5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d5a:	609a      	str	r2, [r3, #8]
 8004d5c:	e006      	b.n	8004d6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d104      	bne.n	8004d7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004da0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	ea42 0103 	orr.w	r1, r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	021a      	lsls	r2, r3, #8
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69d9      	ldr	r1, [r3, #28]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1a      	ldr	r2, [r3, #32]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e021      	b.n	8004e58 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2224      	movs	r2, #36	; 0x24
 8004e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0201 	bic.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7fd ff7d 	bl	8002d2c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	4608      	mov	r0, r1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4603      	mov	r3, r0
 8004e70:	817b      	strh	r3, [r7, #10]
 8004e72:	460b      	mov	r3, r1
 8004e74:	813b      	strh	r3, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	f040 80f9 	bne.w	800507a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_I2C_Mem_Write+0x34>
 8004e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d105      	bne.n	8004ea0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0ed      	b.n	800507c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_I2C_Mem_Write+0x4e>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e0e6      	b.n	800507c <HAL_I2C_Mem_Write+0x21c>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004eb6:	f7ff fa95 	bl	80043e4 <HAL_GetTick>
 8004eba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	2319      	movs	r3, #25
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fac3 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0d1      	b.n	800507c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2221      	movs	r2, #33	; 0x21
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2240      	movs	r2, #64	; 0x40
 8004ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a3a      	ldr	r2, [r7, #32]
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f00:	88f8      	ldrh	r0, [r7, #6]
 8004f02:	893a      	ldrh	r2, [r7, #8]
 8004f04:	8979      	ldrh	r1, [r7, #10]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	4603      	mov	r3, r0
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f9d3 	bl	80052bc <I2C_RequestMemoryWrite>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0a9      	b.n	800507c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2bff      	cmp	r3, #255	; 0xff
 8004f30:	d90e      	bls.n	8004f50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	22ff      	movs	r2, #255	; 0xff
 8004f36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	8979      	ldrh	r1, [r7, #10]
 8004f40:	2300      	movs	r3, #0
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fba5 	bl	8005698 <I2C_TransferConfig>
 8004f4e:	e00f      	b.n	8004f70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	8979      	ldrh	r1, [r7, #10]
 8004f62:	2300      	movs	r3, #0
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 fb94 	bl	8005698 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 faad 	bl	80054d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e07b      	b.n	800507c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	781a      	ldrb	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d034      	beq.n	8005028 <HAL_I2C_Mem_Write+0x1c8>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d130      	bne.n	8005028 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2180      	movs	r1, #128	; 0x80
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 fa3f 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e04d      	b.n	800507c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2bff      	cmp	r3, #255	; 0xff
 8004fe8:	d90e      	bls.n	8005008 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	22ff      	movs	r2, #255	; 0xff
 8004fee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	8979      	ldrh	r1, [r7, #10]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 fb49 	bl	8005698 <I2C_TransferConfig>
 8005006:	e00f      	b.n	8005028 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005016:	b2da      	uxtb	r2, r3
 8005018:	8979      	ldrh	r1, [r7, #10]
 800501a:	2300      	movs	r3, #0
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fb38 	bl	8005698 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d19e      	bne.n	8004f70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 fa8c 	bl	8005554 <I2C_WaitOnSTOPFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e01a      	b.n	800507c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2220      	movs	r2, #32
 800504c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6859      	ldr	r1, [r3, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <HAL_I2C_Mem_Write+0x224>)
 800505a:	400b      	ands	r3, r1
 800505c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	e000      	b.n	800507c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800507a:	2302      	movs	r3, #2
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	fe00e800 	.word	0xfe00e800

08005088 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	4608      	mov	r0, r1
 8005092:	4611      	mov	r1, r2
 8005094:	461a      	mov	r2, r3
 8005096:	4603      	mov	r3, r0
 8005098:	817b      	strh	r3, [r7, #10]
 800509a:	460b      	mov	r3, r1
 800509c:	813b      	strh	r3, [r7, #8]
 800509e:	4613      	mov	r3, r2
 80050a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	f040 80fd 	bne.w	80052aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <HAL_I2C_Mem_Read+0x34>
 80050b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d105      	bne.n	80050c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0f1      	b.n	80052ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_I2C_Mem_Read+0x4e>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e0ea      	b.n	80052ac <HAL_I2C_Mem_Read+0x224>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050de:	f7ff f981 	bl	80043e4 <HAL_GetTick>
 80050e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2319      	movs	r3, #25
 80050ea:	2201      	movs	r2, #1
 80050ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f9af 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0d5      	b.n	80052ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2222      	movs	r2, #34	; 0x22
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2240      	movs	r2, #64	; 0x40
 800510c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a3a      	ldr	r2, [r7, #32]
 800511a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005120:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005128:	88f8      	ldrh	r0, [r7, #6]
 800512a:	893a      	ldrh	r2, [r7, #8]
 800512c:	8979      	ldrh	r1, [r7, #10]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	9301      	str	r3, [sp, #4]
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	4603      	mov	r3, r0
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f913 	bl	8005364 <I2C_RequestMemoryRead>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0ad      	b.n	80052ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005154:	b29b      	uxth	r3, r3
 8005156:	2bff      	cmp	r3, #255	; 0xff
 8005158:	d90e      	bls.n	8005178 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	22ff      	movs	r2, #255	; 0xff
 800515e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005164:	b2da      	uxtb	r2, r3
 8005166:	8979      	ldrh	r1, [r7, #10]
 8005168:	4b52      	ldr	r3, [pc, #328]	; (80052b4 <HAL_I2C_Mem_Read+0x22c>)
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fa91 	bl	8005698 <I2C_TransferConfig>
 8005176:	e00f      	b.n	8005198 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005186:	b2da      	uxtb	r2, r3
 8005188:	8979      	ldrh	r1, [r7, #10]
 800518a:	4b4a      	ldr	r3, [pc, #296]	; (80052b4 <HAL_I2C_Mem_Read+0x22c>)
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fa80 	bl	8005698 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	2200      	movs	r2, #0
 80051a0:	2104      	movs	r1, #4
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f956 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e07c      	b.n	80052ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d034      	beq.n	8005258 <HAL_I2C_Mem_Read+0x1d0>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d130      	bne.n	8005258 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	2200      	movs	r2, #0
 80051fe:	2180      	movs	r1, #128	; 0x80
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f927 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e04d      	b.n	80052ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005214:	b29b      	uxth	r3, r3
 8005216:	2bff      	cmp	r3, #255	; 0xff
 8005218:	d90e      	bls.n	8005238 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	22ff      	movs	r2, #255	; 0xff
 800521e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005224:	b2da      	uxtb	r2, r3
 8005226:	8979      	ldrh	r1, [r7, #10]
 8005228:	2300      	movs	r3, #0
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fa31 	bl	8005698 <I2C_TransferConfig>
 8005236:	e00f      	b.n	8005258 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005246:	b2da      	uxtb	r2, r3
 8005248:	8979      	ldrh	r1, [r7, #10]
 800524a:	2300      	movs	r3, #0
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 fa20 	bl	8005698 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d19a      	bne.n	8005198 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f974 	bl	8005554 <I2C_WaitOnSTOPFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e01a      	b.n	80052ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2220      	movs	r2, #32
 800527c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6859      	ldr	r1, [r3, #4]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_I2C_Mem_Read+0x230>)
 800528a:	400b      	ands	r3, r1
 800528c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e000      	b.n	80052ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80052aa:	2302      	movs	r3, #2
  }
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	80002400 	.word	0x80002400
 80052b8:	fe00e800 	.word	0xfe00e800

080052bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	4608      	mov	r0, r1
 80052c6:	4611      	mov	r1, r2
 80052c8:	461a      	mov	r2, r3
 80052ca:	4603      	mov	r3, r0
 80052cc:	817b      	strh	r3, [r7, #10]
 80052ce:	460b      	mov	r3, r1
 80052d0:	813b      	strh	r3, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	8979      	ldrh	r1, [r7, #10]
 80052dc:	4b20      	ldr	r3, [pc, #128]	; (8005360 <I2C_RequestMemoryWrite+0xa4>)
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f9d7 	bl	8005698 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	69b9      	ldr	r1, [r7, #24]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f8f0 	bl	80054d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e02c      	b.n	8005358 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d105      	bne.n	8005310 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005304:	893b      	ldrh	r3, [r7, #8]
 8005306:	b2da      	uxtb	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	629a      	str	r2, [r3, #40]	; 0x28
 800530e:	e015      	b.n	800533c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005310:	893b      	ldrh	r3, [r7, #8]
 8005312:	0a1b      	lsrs	r3, r3, #8
 8005314:	b29b      	uxth	r3, r3
 8005316:	b2da      	uxtb	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	69b9      	ldr	r1, [r7, #24]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f8d6 	bl	80054d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e012      	b.n	8005358 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005332:	893b      	ldrh	r3, [r7, #8]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2200      	movs	r2, #0
 8005344:	2180      	movs	r1, #128	; 0x80
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f884 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	80002000 	.word	0x80002000

08005364 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	4608      	mov	r0, r1
 800536e:	4611      	mov	r1, r2
 8005370:	461a      	mov	r2, r3
 8005372:	4603      	mov	r3, r0
 8005374:	817b      	strh	r3, [r7, #10]
 8005376:	460b      	mov	r3, r1
 8005378:	813b      	strh	r3, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	b2da      	uxtb	r2, r3
 8005382:	8979      	ldrh	r1, [r7, #10]
 8005384:	4b20      	ldr	r3, [pc, #128]	; (8005408 <I2C_RequestMemoryRead+0xa4>)
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	2300      	movs	r3, #0
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f984 	bl	8005698 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	69b9      	ldr	r1, [r7, #24]
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f89d 	bl	80054d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e02c      	b.n	80053fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053a4:	88fb      	ldrh	r3, [r7, #6]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d105      	bne.n	80053b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053aa:	893b      	ldrh	r3, [r7, #8]
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	629a      	str	r2, [r3, #40]	; 0x28
 80053b4:	e015      	b.n	80053e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053b6:	893b      	ldrh	r3, [r7, #8]
 80053b8:	0a1b      	lsrs	r3, r3, #8
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	69b9      	ldr	r1, [r7, #24]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f883 	bl	80054d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e012      	b.n	80053fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053d8:	893b      	ldrh	r3, [r7, #8]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2200      	movs	r2, #0
 80053ea:	2140      	movs	r1, #64	; 0x40
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f831 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	80002000 	.word	0x80002000

0800540c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b02      	cmp	r3, #2
 8005420:	d103      	bne.n	800542a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2200      	movs	r2, #0
 8005428:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b01      	cmp	r3, #1
 8005436:	d007      	beq.n	8005448 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	619a      	str	r2, [r3, #24]
  }
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	4613      	mov	r3, r2
 8005462:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005464:	e022      	b.n	80054ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d01e      	beq.n	80054ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546e:	f7fe ffb9 	bl	80043e4 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <I2C_WaitOnFlagUntilTimeout+0x30>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d113      	bne.n	80054ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005488:	f043 0220 	orr.w	r2, r3, #32
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e00f      	b.n	80054cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4013      	ands	r3, r2
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	bf0c      	ite	eq
 80054bc:	2301      	moveq	r3, #1
 80054be:	2300      	movne	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d0cd      	beq.n	8005466 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054e0:	e02c      	b.n	800553c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f870 	bl	80055cc <I2C_IsAcknowledgeFailed>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e02a      	b.n	800554c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d01e      	beq.n	800553c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fe:	f7fe ff71 	bl	80043e4 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	429a      	cmp	r2, r3
 800550c:	d302      	bcc.n	8005514 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d113      	bne.n	800553c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005518:	f043 0220 	orr.w	r2, r3, #32
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e007      	b.n	800554c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	d1cb      	bne.n	80054e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005560:	e028      	b.n	80055b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 f830 	bl	80055cc <I2C_IsAcknowledgeFailed>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e026      	b.n	80055c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005576:	f7fe ff35 	bl	80043e4 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d113      	bne.n	80055b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005590:	f043 0220 	orr.w	r2, r3, #32
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e007      	b.n	80055c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d1cf      	bne.n	8005562 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f003 0310 	and.w	r3, r3, #16
 80055e2:	2b10      	cmp	r3, #16
 80055e4:	d151      	bne.n	800568a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055e6:	e022      	b.n	800562e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ee:	d01e      	beq.n	800562e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f0:	f7fe fef8 	bl	80043e4 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d302      	bcc.n	8005606 <I2C_IsAcknowledgeFailed+0x3a>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d113      	bne.n	800562e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	f043 0220 	orr.w	r2, r3, #32
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e02e      	b.n	800568c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f003 0320 	and.w	r3, r3, #32
 8005638:	2b20      	cmp	r3, #32
 800563a:	d1d5      	bne.n	80055e8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2210      	movs	r2, #16
 8005642:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2220      	movs	r2, #32
 800564a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f7ff fedd 	bl	800540c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6859      	ldr	r1, [r3, #4]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <I2C_IsAcknowledgeFailed+0xc8>)
 800565e:	400b      	ands	r3, r1
 8005660:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005666:	f043 0204 	orr.w	r2, r3, #4
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	fe00e800 	.word	0xfe00e800

08005698 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	607b      	str	r3, [r7, #4]
 80056a2:	460b      	mov	r3, r1
 80056a4:	817b      	strh	r3, [r7, #10]
 80056a6:	4613      	mov	r3, r2
 80056a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	0d5b      	lsrs	r3, r3, #21
 80056b4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80056b8:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <I2C_TransferConfig+0x58>)
 80056ba:	430b      	orrs	r3, r1
 80056bc:	43db      	mvns	r3, r3
 80056be:	ea02 0103 	and.w	r1, r2, r3
 80056c2:	897b      	ldrh	r3, [r7, #10]
 80056c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056c8:	7a7b      	ldrb	r3, [r7, #9]
 80056ca:	041b      	lsls	r3, r3, #16
 80056cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	431a      	orrs	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	03ff63ff 	.word	0x03ff63ff

080056f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b20      	cmp	r3, #32
 8005708:	d138      	bne.n	800577c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005714:	2302      	movs	r3, #2
 8005716:	e032      	b.n	800577e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2224      	movs	r2, #36	; 0x24
 8005724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0201 	bic.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005746:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6819      	ldr	r1, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	e000      	b.n	800577e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800577c:	2302      	movs	r3, #2
  }
}
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800578c:	b480      	push	{r7}
 800578e:	b089      	sub	sp, #36	; 0x24
 8005790:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	2300      	movs	r3, #0
 8005798:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800579a:	4b3e      	ldr	r3, [pc, #248]	; (8005894 <HAL_RCC_GetSysClockFreq+0x108>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 030c 	and.w	r3, r3, #12
 80057a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057a4:	4b3b      	ldr	r3, [pc, #236]	; (8005894 <HAL_RCC_GetSysClockFreq+0x108>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <HAL_RCC_GetSysClockFreq+0x34>
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	2b0c      	cmp	r3, #12
 80057b8:	d121      	bne.n	80057fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d11e      	bne.n	80057fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80057c0:	4b34      	ldr	r3, [pc, #208]	; (8005894 <HAL_RCC_GetSysClockFreq+0x108>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d107      	bne.n	80057dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80057cc:	4b31      	ldr	r3, [pc, #196]	; (8005894 <HAL_RCC_GetSysClockFreq+0x108>)
 80057ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d2:	0a1b      	lsrs	r3, r3, #8
 80057d4:	f003 030f 	and.w	r3, r3, #15
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	e005      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80057dc:	4b2d      	ldr	r3, [pc, #180]	; (8005894 <HAL_RCC_GetSysClockFreq+0x108>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	091b      	lsrs	r3, r3, #4
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80057e8:	4a2b      	ldr	r2, [pc, #172]	; (8005898 <HAL_RCC_GetSysClockFreq+0x10c>)
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10d      	bne.n	8005814 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057fc:	e00a      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	2b04      	cmp	r3, #4
 8005802:	d102      	bne.n	800580a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005804:	4b25      	ldr	r3, [pc, #148]	; (800589c <HAL_RCC_GetSysClockFreq+0x110>)
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	e004      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b08      	cmp	r3, #8
 800580e:	d101      	bne.n	8005814 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005810:	4b23      	ldr	r3, [pc, #140]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005812:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	2b0c      	cmp	r3, #12
 8005818:	d134      	bne.n	8005884 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800581a:	4b1e      	ldr	r3, [pc, #120]	; (8005894 <HAL_RCC_GetSysClockFreq+0x108>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d003      	beq.n	8005832 <HAL_RCC_GetSysClockFreq+0xa6>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b03      	cmp	r3, #3
 800582e:	d003      	beq.n	8005838 <HAL_RCC_GetSysClockFreq+0xac>
 8005830:	e005      	b.n	800583e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005832:	4b1a      	ldr	r3, [pc, #104]	; (800589c <HAL_RCC_GetSysClockFreq+0x110>)
 8005834:	617b      	str	r3, [r7, #20]
      break;
 8005836:	e005      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005838:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800583a:	617b      	str	r3, [r7, #20]
      break;
 800583c:	e002      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	617b      	str	r3, [r7, #20]
      break;
 8005842:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005844:	4b13      	ldr	r3, [pc, #76]	; (8005894 <HAL_RCC_GetSysClockFreq+0x108>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	091b      	lsrs	r3, r3, #4
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	3301      	adds	r3, #1
 8005850:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005852:	4b10      	ldr	r3, [pc, #64]	; (8005894 <HAL_RCC_GetSysClockFreq+0x108>)
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	0a1b      	lsrs	r3, r3, #8
 8005858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	fb02 f203 	mul.w	r2, r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800586a:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <HAL_RCC_GetSysClockFreq+0x108>)
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	0e5b      	lsrs	r3, r3, #25
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	3301      	adds	r3, #1
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005882:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005884:	69bb      	ldr	r3, [r7, #24]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3724      	adds	r7, #36	; 0x24
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40021000 	.word	0x40021000
 8005898:	0800ae18 	.word	0x0800ae18
 800589c:	00f42400 	.word	0x00f42400
 80058a0:	007a1200 	.word	0x007a1200

080058a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058a8:	4b03      	ldr	r3, [pc, #12]	; (80058b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80058aa:	681b      	ldr	r3, [r3, #0]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	20000010 	.word	0x20000010

080058bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058c0:	f7ff fff0 	bl	80058a4 <HAL_RCC_GetHCLKFreq>
 80058c4:	4602      	mov	r2, r0
 80058c6:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	0a1b      	lsrs	r3, r3, #8
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	4904      	ldr	r1, [pc, #16]	; (80058e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058d2:	5ccb      	ldrb	r3, [r1, r3]
 80058d4:	f003 031f 	and.w	r3, r3, #31
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40021000 	.word	0x40021000
 80058e4:	0800ae10 	.word	0x0800ae10

080058e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058ec:	f7ff ffda 	bl	80058a4 <HAL_RCC_GetHCLKFreq>
 80058f0:	4602      	mov	r2, r0
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <HAL_RCC_GetPCLK2Freq+0x24>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	0adb      	lsrs	r3, r3, #11
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	4904      	ldr	r1, [pc, #16]	; (8005910 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005908:	4618      	mov	r0, r3
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40021000 	.word	0x40021000
 8005910:	0800ae10 	.word	0x0800ae10

08005914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e07c      	b.n	8005a20 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7fd fa11 	bl	8002d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800595c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005966:	d902      	bls.n	800596e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	e002      	b.n	8005974 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800596e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005972:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800597c:	d007      	beq.n	800598e <HAL_SPI_Init+0x7a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005986:	d002      	beq.n	800598e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800599e:	d903      	bls.n	80059a8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30
 80059a6:	e002      	b.n	80059ae <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	ea42 0103 	orr.w	r1, r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	0c1b      	lsrs	r3, r3, #16
 80059ee:	f003 0204 	and.w	r2, r3, #4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	ea42 0103 	orr.w	r1, r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e01a      	b.n	8005a70 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a50:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fd f9cc 	bl	8002df0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_SPI_Transmit+0x22>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e150      	b.n	8005d3c <HAL_SPI_Transmit+0x2c4>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aa2:	f7fe fc9f 	bl	80043e4 <HAL_GetTick>
 8005aa6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005aa8:	88fb      	ldrh	r3, [r7, #6]
 8005aaa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d002      	beq.n	8005abe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ab8:	2302      	movs	r3, #2
 8005aba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005abc:	e135      	b.n	8005d2a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_SPI_Transmit+0x52>
 8005ac4:	88fb      	ldrh	r3, [r7, #6]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d102      	bne.n	8005ad0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ace:	e12c      	b.n	8005d2a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2203      	movs	r2, #3
 8005ad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	88fa      	ldrh	r2, [r7, #6]
 8005ae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	88fa      	ldrh	r2, [r7, #6]
 8005aee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b1a:	d107      	bne.n	8005b2c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b2a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b36:	2b40      	cmp	r3, #64	; 0x40
 8005b38:	d007      	beq.n	8005b4a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b52:	d94b      	bls.n	8005bec <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_SPI_Transmit+0xea>
 8005b5c:	8afb      	ldrh	r3, [r7, #22]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d13e      	bne.n	8005be0 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	881a      	ldrh	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	1c9a      	adds	r2, r3, #2
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b86:	e02b      	b.n	8005be0 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d112      	bne.n	8005bbc <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	881a      	ldrh	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	1c9a      	adds	r2, r3, #2
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bba:	e011      	b.n	8005be0 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bbc:	f7fe fc12 	bl	80043e4 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d803      	bhi.n	8005bd4 <HAL_SPI_Transmit+0x15c>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d102      	bne.n	8005bda <HAL_SPI_Transmit+0x162>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d102      	bne.n	8005be0 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bde:	e0a4      	b.n	8005d2a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1ce      	bne.n	8005b88 <HAL_SPI_Transmit+0x110>
 8005bea:	e07c      	b.n	8005ce6 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <HAL_SPI_Transmit+0x182>
 8005bf4:	8afb      	ldrh	r3, [r7, #22]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d170      	bne.n	8005cdc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d912      	bls.n	8005c2a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c08:	881a      	ldrh	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	1c9a      	adds	r2, r3, #2
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b02      	subs	r3, #2
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c28:	e058      	b.n	8005cdc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	330c      	adds	r3, #12
 8005c34:	7812      	ldrb	r2, [r2, #0]
 8005c36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c50:	e044      	b.n	8005cdc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d12b      	bne.n	8005cb8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d912      	bls.n	8005c90 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	881a      	ldrh	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	1c9a      	adds	r2, r3, #2
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b02      	subs	r3, #2
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c8e:	e025      	b.n	8005cdc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	7812      	ldrb	r2, [r2, #0]
 8005c9c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cb6:	e011      	b.n	8005cdc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cb8:	f7fe fb94 	bl	80043e4 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d803      	bhi.n	8005cd0 <HAL_SPI_Transmit+0x258>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cce:	d102      	bne.n	8005cd6 <HAL_SPI_Transmit+0x25e>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cda:	e026      	b.n	8005d2a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1b5      	bne.n	8005c52 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 fdb4 	bl	8006858 <SPI_EndRxTxTransaction>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d04:	2300      	movs	r3, #0
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	77fb      	strb	r3, [r7, #31]
 8005d26:	e000      	b.n	8005d2a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005d28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3720      	adds	r7, #32
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	4613      	mov	r3, r2
 8005d52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d60:	d112      	bne.n	8005d88 <HAL_SPI_Receive+0x44>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10e      	bne.n	8005d88 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d72:	88fa      	ldrh	r2, [r7, #6]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	68b9      	ldr	r1, [r7, #8]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f908 	bl	8005f94 <HAL_SPI_TransmitReceive>
 8005d84:	4603      	mov	r3, r0
 8005d86:	e101      	b.n	8005f8c <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_SPI_Receive+0x52>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e0fa      	b.n	8005f8c <HAL_SPI_Receive+0x248>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d9e:	f7fe fb21 	bl	80043e4 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d002      	beq.n	8005db6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005db0:	2302      	movs	r3, #2
 8005db2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005db4:	e0e1      	b.n	8005f7a <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <HAL_SPI_Receive+0x7e>
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d102      	bne.n	8005dc8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dc6:	e0d8      	b.n	8005f7a <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2204      	movs	r2, #4
 8005dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	88fa      	ldrh	r2, [r7, #6]
 8005de0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	88fa      	ldrh	r2, [r7, #6]
 8005de8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e12:	d908      	bls.n	8005e26 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e22:	605a      	str	r2, [r3, #4]
 8005e24:	e007      	b.n	8005e36 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e34:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3e:	d107      	bne.n	8005e50 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e4e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5a:	2b40      	cmp	r3, #64	; 0x40
 8005e5c:	d007      	beq.n	8005e6e <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e6c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e76:	d867      	bhi.n	8005f48 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e78:	e030      	b.n	8005edc <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d117      	bne.n	8005eb8 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f103 020c 	add.w	r2, r3, #12
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	7812      	ldrb	r2, [r2, #0]
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005eb6:	e011      	b.n	8005edc <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eb8:	f7fe fa94 	bl	80043e4 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d803      	bhi.n	8005ed0 <HAL_SPI_Receive+0x18c>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ece:	d102      	bne.n	8005ed6 <HAL_SPI_Receive+0x192>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d102      	bne.n	8005edc <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005eda:	e04e      	b.n	8005f7a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1c8      	bne.n	8005e7a <HAL_SPI_Receive+0x136>
 8005ee8:	e034      	b.n	8005f54 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d115      	bne.n	8005f24 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	b292      	uxth	r2, r2
 8005f04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	1c9a      	adds	r2, r3, #2
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005f22:	e011      	b.n	8005f48 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f24:	f7fe fa5e 	bl	80043e4 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d803      	bhi.n	8005f3c <HAL_SPI_Receive+0x1f8>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	d102      	bne.n	8005f42 <HAL_SPI_Receive+0x1fe>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d102      	bne.n	8005f48 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f46:	e018      	b.n	8005f7a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1ca      	bne.n	8005eea <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fc25 	bl	80067a8 <SPI_EndRxTransaction>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	75fb      	strb	r3, [r7, #23]
 8005f76:	e000      	b.n	8005f7a <HAL_SPI_Receive+0x236>
  }

error :
 8005f78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08a      	sub	sp, #40	; 0x28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x26>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e1fb      	b.n	80063b2 <HAL_SPI_TransmitReceive+0x41e>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fc2:	f7fe fa0f 	bl	80043e4 <HAL_GetTick>
 8005fc6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fce:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005fd6:	887b      	ldrh	r3, [r7, #2]
 8005fd8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005fda:	887b      	ldrh	r3, [r7, #2]
 8005fdc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fde:	7efb      	ldrb	r3, [r7, #27]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d00e      	beq.n	8006002 <HAL_SPI_TransmitReceive+0x6e>
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fea:	d106      	bne.n	8005ffa <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d102      	bne.n	8005ffa <HAL_SPI_TransmitReceive+0x66>
 8005ff4:	7efb      	ldrb	r3, [r7, #27]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d003      	beq.n	8006002 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006000:	e1cd      	b.n	800639e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_SPI_TransmitReceive+0x80>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <HAL_SPI_TransmitReceive+0x80>
 800600e:	887b      	ldrh	r3, [r7, #2]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d103      	bne.n	800601c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800601a:	e1c0      	b.n	800639e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b04      	cmp	r3, #4
 8006026:	d003      	beq.n	8006030 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2205      	movs	r2, #5
 800602c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	887a      	ldrh	r2, [r7, #2]
 8006040:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	887a      	ldrh	r2, [r7, #2]
 8006048:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	887a      	ldrh	r2, [r7, #2]
 8006056:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	887a      	ldrh	r2, [r7, #2]
 800605c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006072:	d802      	bhi.n	800607a <HAL_SPI_TransmitReceive+0xe6>
 8006074:	8a3b      	ldrh	r3, [r7, #16]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d908      	bls.n	800608c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	e007      	b.n	800609c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800609a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a6:	2b40      	cmp	r3, #64	; 0x40
 80060a8:	d007      	beq.n	80060ba <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060c2:	d97c      	bls.n	80061be <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <HAL_SPI_TransmitReceive+0x13e>
 80060cc:	8a7b      	ldrh	r3, [r7, #18]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d169      	bne.n	80061a6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d6:	881a      	ldrh	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	1c9a      	adds	r2, r3, #2
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060f6:	e056      	b.n	80061a6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b02      	cmp	r3, #2
 8006104:	d11b      	bne.n	800613e <HAL_SPI_TransmitReceive+0x1aa>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d016      	beq.n	800613e <HAL_SPI_TransmitReceive+0x1aa>
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	2b01      	cmp	r3, #1
 8006114:	d113      	bne.n	800613e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	881a      	ldrh	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006126:	1c9a      	adds	r2, r3, #2
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b01      	cmp	r3, #1
 800614a:	d11c      	bne.n	8006186 <HAL_SPI_TransmitReceive+0x1f2>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d016      	beq.n	8006186 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	b292      	uxth	r2, r2
 8006164:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	1c9a      	adds	r2, r3, #2
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006176:	b29b      	uxth	r3, r3
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006182:	2301      	movs	r3, #1
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006186:	f7fe f92d 	bl	80043e4 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006192:	429a      	cmp	r2, r3
 8006194:	d807      	bhi.n	80061a6 <HAL_SPI_TransmitReceive+0x212>
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d003      	beq.n	80061a6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80061a4:	e0fb      	b.n	800639e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1a3      	bne.n	80060f8 <HAL_SPI_TransmitReceive+0x164>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d19d      	bne.n	80060f8 <HAL_SPI_TransmitReceive+0x164>
 80061bc:	e0df      	b.n	800637e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_SPI_TransmitReceive+0x23a>
 80061c6:	8a7b      	ldrh	r3, [r7, #18]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	f040 80cb 	bne.w	8006364 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d912      	bls.n	80061fe <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	881a      	ldrh	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	1c9a      	adds	r2, r3, #2
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b02      	subs	r3, #2
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061fc:	e0b2      	b.n	8006364 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	330c      	adds	r3, #12
 8006208:	7812      	ldrb	r2, [r2, #0]
 800620a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006224:	e09e      	b.n	8006364 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b02      	cmp	r3, #2
 8006232:	d134      	bne.n	800629e <HAL_SPI_TransmitReceive+0x30a>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d02f      	beq.n	800629e <HAL_SPI_TransmitReceive+0x30a>
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	2b01      	cmp	r3, #1
 8006242:	d12c      	bne.n	800629e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b01      	cmp	r3, #1
 800624c:	d912      	bls.n	8006274 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006252:	881a      	ldrh	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	1c9a      	adds	r2, r3, #2
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b02      	subs	r3, #2
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006272:	e012      	b.n	800629a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	330c      	adds	r3, #12
 800627e:	7812      	ldrb	r2, [r2, #0]
 8006280:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d148      	bne.n	800633e <HAL_SPI_TransmitReceive+0x3aa>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d042      	beq.n	800633e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d923      	bls.n	800630c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	b292      	uxth	r2, r2
 80062d0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	1c9a      	adds	r2, r3, #2
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b02      	subs	r3, #2
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d81f      	bhi.n	800633a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006308:	605a      	str	r2, [r3, #4]
 800630a:	e016      	b.n	800633a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f103 020c 	add.w	r2, r3, #12
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006318:	7812      	ldrb	r2, [r2, #0]
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800633a:	2301      	movs	r3, #1
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800633e:	f7fe f851 	bl	80043e4 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634a:	429a      	cmp	r2, r3
 800634c:	d803      	bhi.n	8006356 <HAL_SPI_TransmitReceive+0x3c2>
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006354:	d102      	bne.n	800635c <HAL_SPI_TransmitReceive+0x3c8>
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	2b00      	cmp	r3, #0
 800635a:	d103      	bne.n	8006364 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006362:	e01c      	b.n	800639e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	f47f af5b 	bne.w	8006226 <HAL_SPI_TransmitReceive+0x292>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006376:	b29b      	uxth	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	f47f af54 	bne.w	8006226 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 fa68 	bl	8006858 <SPI_EndRxTxTransaction>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d006      	beq.n	800639c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	661a      	str	r2, [r3, #96]	; 0x60
 800639a:	e000      	b.n	800639e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800639c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80063ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3728      	adds	r7, #40	; 0x28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	099b      	lsrs	r3, r3, #6
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10f      	bne.n	8006400 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	099b      	lsrs	r3, r3, #6
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d004      	beq.n	8006400 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	4798      	blx	r3
    return;
 80063fe:	e0d7      	b.n	80065b0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	085b      	lsrs	r3, r3, #1
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <HAL_SPI_IRQHandler+0x66>
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	09db      	lsrs	r3, r3, #7
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d004      	beq.n	8006422 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	4798      	blx	r3
    return;
 8006420:	e0c6      	b.n	80065b0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	095b      	lsrs	r3, r3, #5
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10c      	bne.n	8006448 <HAL_SPI_IRQHandler+0x8c>
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	099b      	lsrs	r3, r3, #6
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <HAL_SPI_IRQHandler+0x8c>
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	0a1b      	lsrs	r3, r3, #8
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 80b4 	beq.w	80065b0 <HAL_SPI_IRQHandler+0x1f4>
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80ad 	beq.w	80065b0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	099b      	lsrs	r3, r3, #6
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d023      	beq.n	80064aa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b03      	cmp	r3, #3
 800646c:	d011      	beq.n	8006492 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006472:	f043 0204 	orr.w	r2, r3, #4
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	e00b      	b.n	80064aa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006492:	2300      	movs	r3, #0
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	613b      	str	r3, [r7, #16]
 80064a6:	693b      	ldr	r3, [r7, #16]
        return;
 80064a8:	e082      	b.n	80065b0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d014      	beq.n	80064e0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ba:	f043 0201 	orr.w	r2, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	0a1b      	lsrs	r3, r3, #8
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00c      	beq.n	8006506 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f0:	f043 0208 	orr.w	r2, r3, #8
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80064f8:	2300      	movs	r3, #0
 80064fa:	60bb      	str	r3, [r7, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	60bb      	str	r3, [r7, #8]
 8006504:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800650a:	2b00      	cmp	r3, #0
 800650c:	d04f      	beq.n	80065ae <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800651c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d104      	bne.n	800653a <HAL_SPI_IRQHandler+0x17e>
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d034      	beq.n	80065a4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0203 	bic.w	r2, r2, #3
 8006548:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800654e:	2b00      	cmp	r3, #0
 8006550:	d011      	beq.n	8006576 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006556:	4a18      	ldr	r2, [pc, #96]	; (80065b8 <HAL_SPI_IRQHandler+0x1fc>)
 8006558:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe f87f 	bl	8004662 <HAL_DMA_Abort_IT>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d005      	beq.n	8006576 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657a:	2b00      	cmp	r3, #0
 800657c:	d016      	beq.n	80065ac <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006582:	4a0d      	ldr	r2, [pc, #52]	; (80065b8 <HAL_SPI_IRQHandler+0x1fc>)
 8006584:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe f869 	bl	8004662 <HAL_DMA_Abort_IT>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800659a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80065a2:	e003      	b.n	80065ac <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f809 	bl	80065bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80065aa:	e000      	b.n	80065ae <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80065ac:	bf00      	nop
    return;
 80065ae:	bf00      	nop
  }
}
 80065b0:	3720      	adds	r7, #32
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	080065d1 	.word	0x080065d1

080065bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7ff ffe5 	bl	80065bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065f2:	bf00      	nop
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	603b      	str	r3, [r7, #0]
 8006606:	4613      	mov	r3, r2
 8006608:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800660a:	e04c      	b.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d048      	beq.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006614:	f7fd fee6 	bl	80043e4 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d902      	bls.n	800662a <SPI_WaitFlagStateUntilTimeout+0x30>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d13d      	bne.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006638:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006642:	d111      	bne.n	8006668 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800664c:	d004      	beq.n	8006658 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006656:	d107      	bne.n	8006668 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006666:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006670:	d10f      	bne.n	8006692 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006690:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e00f      	b.n	80066c6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4013      	ands	r3, r2
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	bf0c      	ite	eq
 80066b6:	2301      	moveq	r3, #1
 80066b8:	2300      	movne	r3, #0
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	79fb      	ldrb	r3, [r7, #7]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d1a3      	bne.n	800660c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	607a      	str	r2, [r7, #4]
 80066da:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80066dc:	e057      	b.n	800678e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80066e4:	d106      	bne.n	80066f4 <SPI_WaitFifoStateUntilTimeout+0x26>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d103      	bne.n	80066f4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fa:	d048      	beq.n	800678e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80066fc:	f7fd fe72 	bl	80043e4 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d902      	bls.n	8006712 <SPI_WaitFifoStateUntilTimeout+0x44>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d13d      	bne.n	800678e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800672a:	d111      	bne.n	8006750 <SPI_WaitFifoStateUntilTimeout+0x82>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006734:	d004      	beq.n	8006740 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800673e:	d107      	bne.n	8006750 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800674e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006758:	d10f      	bne.n	800677a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006768:	601a      	str	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e008      	b.n	80067a0 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	4013      	ands	r3, r2
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	429a      	cmp	r2, r3
 800679c:	d19f      	bne.n	80066de <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067bc:	d111      	bne.n	80067e2 <SPI_EndRxTransaction+0x3a>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067c6:	d004      	beq.n	80067d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d0:	d107      	bne.n	80067e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067e0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2200      	movs	r2, #0
 80067ea:	2180      	movs	r1, #128	; 0x80
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7ff ff04 	bl	80065fa <SPI_WaitFlagStateUntilTimeout>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fc:	f043 0220 	orr.w	r2, r3, #32
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e023      	b.n	8006850 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006810:	d11d      	bne.n	800684e <SPI_EndRxTransaction+0xa6>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800681a:	d004      	beq.n	8006826 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006824:	d113      	bne.n	800684e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2200      	movs	r2, #0
 800682e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f7ff ff4b 	bl	80066ce <SPI_WaitFifoStateUntilTimeout>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d007      	beq.n	800684e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006842:	f043 0220 	orr.w	r2, r3, #32
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e000      	b.n	8006850 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af02      	add	r7, sp, #8
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2200      	movs	r2, #0
 800686c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7ff ff2c 	bl	80066ce <SPI_WaitFifoStateUntilTimeout>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d007      	beq.n	800688c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006880:	f043 0220 	orr.w	r2, r3, #32
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e027      	b.n	80068dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2200      	movs	r2, #0
 8006894:	2180      	movs	r1, #128	; 0x80
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7ff feaf 	bl	80065fa <SPI_WaitFlagStateUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d007      	beq.n	80068b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a6:	f043 0220 	orr.w	r2, r3, #32
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e014      	b.n	80068dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff ff05 	bl	80066ce <SPI_WaitFifoStateUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ce:	f043 0220 	orr.w	r2, r3, #32
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e000      	b.n	80068dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e040      	b.n	8006978 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fc fa90 	bl	8002e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2224      	movs	r2, #36	; 0x24
 8006910:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0201 	bic.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f8c0 	bl	8006aa8 <UART_SetConfig>
 8006928:	4603      	mov	r3, r0
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e022      	b.n	8006978 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fc36 	bl	80071ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800694e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800695e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fcbd 	bl	80072f0 <UART_CheckIdleState>
 8006976:	4603      	mov	r3, r0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08a      	sub	sp, #40	; 0x28
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	4613      	mov	r3, r2
 800698e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006994:	2b20      	cmp	r3, #32
 8006996:	f040 8081 	bne.w	8006a9c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <HAL_UART_Transmit+0x26>
 80069a0:	88fb      	ldrh	r3, [r7, #6]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e079      	b.n	8006a9e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_UART_Transmit+0x38>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e072      	b.n	8006a9e <HAL_UART_Transmit+0x11e>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2221      	movs	r2, #33	; 0x21
 80069ca:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80069cc:	f7fd fd0a 	bl	80043e4 <HAL_GetTick>
 80069d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	88fa      	ldrh	r2, [r7, #6]
 80069d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	88fa      	ldrh	r2, [r7, #6]
 80069de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ea:	d108      	bne.n	80069fe <HAL_UART_Transmit+0x7e>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	e003      	b.n	8006a06 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006a0e:	e02d      	b.n	8006a6c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2200      	movs	r2, #0
 8006a18:	2180      	movs	r1, #128	; 0x80
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fcad 	bl	800737a <UART_WaitOnFlagUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e039      	b.n	8006a9e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10b      	bne.n	8006a48 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	881a      	ldrh	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a3c:	b292      	uxth	r2, r2
 8006a3e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	3302      	adds	r3, #2
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	e008      	b.n	8006a5a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	b292      	uxth	r2, r2
 8006a52:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	3301      	adds	r3, #1
 8006a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1cb      	bne.n	8006a10 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2140      	movs	r1, #64	; 0x40
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 fc79 	bl	800737a <UART_WaitOnFlagUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e005      	b.n	8006a9e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2220      	movs	r2, #32
 8006a96:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e000      	b.n	8006a9e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006a9c:	2302      	movs	r3, #2
  }
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3720      	adds	r7, #32
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006aac:	b08c      	sub	sp, #48	; 0x30
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61fb      	str	r3, [r7, #28]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689a      	ldr	r2, [r3, #8]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	4bb9      	ldr	r3, [pc, #740]	; (8006dc4 <UART_SetConfig+0x31c>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4aae      	ldr	r2, [pc, #696]	; (8006dc8 <UART_SetConfig+0x320>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d004      	beq.n	8006b1c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4aa5      	ldr	r2, [pc, #660]	; (8006dcc <UART_SetConfig+0x324>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d126      	bne.n	8006b88 <UART_SetConfig+0xe0>
 8006b3a:	4ba5      	ldr	r3, [pc, #660]	; (8006dd0 <UART_SetConfig+0x328>)
 8006b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b40:	f003 0303 	and.w	r3, r3, #3
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d81b      	bhi.n	8006b80 <UART_SetConfig+0xd8>
 8006b48:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <UART_SetConfig+0xa8>)
 8006b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4e:	bf00      	nop
 8006b50:	08006b61 	.word	0x08006b61
 8006b54:	08006b71 	.word	0x08006b71
 8006b58:	08006b69 	.word	0x08006b69
 8006b5c:	08006b79 	.word	0x08006b79
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b66:	e106      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b6e:	e102      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006b70:	2304      	movs	r3, #4
 8006b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b76:	e0fe      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006b78:	2308      	movs	r3, #8
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b7e:	e0fa      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006b80:	2310      	movs	r3, #16
 8006b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b86:	e0f6      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a91      	ldr	r2, [pc, #580]	; (8006dd4 <UART_SetConfig+0x32c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d138      	bne.n	8006c04 <UART_SetConfig+0x15c>
 8006b92:	4b8f      	ldr	r3, [pc, #572]	; (8006dd0 <UART_SetConfig+0x328>)
 8006b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b98:	f003 030c 	and.w	r3, r3, #12
 8006b9c:	2b0c      	cmp	r3, #12
 8006b9e:	d82d      	bhi.n	8006bfc <UART_SetConfig+0x154>
 8006ba0:	a201      	add	r2, pc, #4	; (adr r2, 8006ba8 <UART_SetConfig+0x100>)
 8006ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba6:	bf00      	nop
 8006ba8:	08006bdd 	.word	0x08006bdd
 8006bac:	08006bfd 	.word	0x08006bfd
 8006bb0:	08006bfd 	.word	0x08006bfd
 8006bb4:	08006bfd 	.word	0x08006bfd
 8006bb8:	08006bed 	.word	0x08006bed
 8006bbc:	08006bfd 	.word	0x08006bfd
 8006bc0:	08006bfd 	.word	0x08006bfd
 8006bc4:	08006bfd 	.word	0x08006bfd
 8006bc8:	08006be5 	.word	0x08006be5
 8006bcc:	08006bfd 	.word	0x08006bfd
 8006bd0:	08006bfd 	.word	0x08006bfd
 8006bd4:	08006bfd 	.word	0x08006bfd
 8006bd8:	08006bf5 	.word	0x08006bf5
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be2:	e0c8      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006be4:	2302      	movs	r3, #2
 8006be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bea:	e0c4      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006bec:	2304      	movs	r3, #4
 8006bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bf2:	e0c0      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006bf4:	2308      	movs	r3, #8
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfa:	e0bc      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006bfc:	2310      	movs	r3, #16
 8006bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c02:	e0b8      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a73      	ldr	r2, [pc, #460]	; (8006dd8 <UART_SetConfig+0x330>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d125      	bne.n	8006c5a <UART_SetConfig+0x1b2>
 8006c0e:	4b70      	ldr	r3, [pc, #448]	; (8006dd0 <UART_SetConfig+0x328>)
 8006c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c18:	2b30      	cmp	r3, #48	; 0x30
 8006c1a:	d016      	beq.n	8006c4a <UART_SetConfig+0x1a2>
 8006c1c:	2b30      	cmp	r3, #48	; 0x30
 8006c1e:	d818      	bhi.n	8006c52 <UART_SetConfig+0x1aa>
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d00a      	beq.n	8006c3a <UART_SetConfig+0x192>
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d814      	bhi.n	8006c52 <UART_SetConfig+0x1aa>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <UART_SetConfig+0x18a>
 8006c2c:	2b10      	cmp	r3, #16
 8006c2e:	d008      	beq.n	8006c42 <UART_SetConfig+0x19a>
 8006c30:	e00f      	b.n	8006c52 <UART_SetConfig+0x1aa>
 8006c32:	2300      	movs	r3, #0
 8006c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c38:	e09d      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c40:	e099      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006c42:	2304      	movs	r3, #4
 8006c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c48:	e095      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006c4a:	2308      	movs	r3, #8
 8006c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c50:	e091      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006c52:	2310      	movs	r3, #16
 8006c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c58:	e08d      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a5f      	ldr	r2, [pc, #380]	; (8006ddc <UART_SetConfig+0x334>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d125      	bne.n	8006cb0 <UART_SetConfig+0x208>
 8006c64:	4b5a      	ldr	r3, [pc, #360]	; (8006dd0 <UART_SetConfig+0x328>)
 8006c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c6e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c70:	d016      	beq.n	8006ca0 <UART_SetConfig+0x1f8>
 8006c72:	2bc0      	cmp	r3, #192	; 0xc0
 8006c74:	d818      	bhi.n	8006ca8 <UART_SetConfig+0x200>
 8006c76:	2b80      	cmp	r3, #128	; 0x80
 8006c78:	d00a      	beq.n	8006c90 <UART_SetConfig+0x1e8>
 8006c7a:	2b80      	cmp	r3, #128	; 0x80
 8006c7c:	d814      	bhi.n	8006ca8 <UART_SetConfig+0x200>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <UART_SetConfig+0x1e0>
 8006c82:	2b40      	cmp	r3, #64	; 0x40
 8006c84:	d008      	beq.n	8006c98 <UART_SetConfig+0x1f0>
 8006c86:	e00f      	b.n	8006ca8 <UART_SetConfig+0x200>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c8e:	e072      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006c90:	2302      	movs	r3, #2
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c96:	e06e      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c9e:	e06a      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ca6:	e066      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cae:	e062      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a4a      	ldr	r2, [pc, #296]	; (8006de0 <UART_SetConfig+0x338>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d12a      	bne.n	8006d10 <UART_SetConfig+0x268>
 8006cba:	4b45      	ldr	r3, [pc, #276]	; (8006dd0 <UART_SetConfig+0x328>)
 8006cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cc8:	d01a      	beq.n	8006d00 <UART_SetConfig+0x258>
 8006cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cce:	d81b      	bhi.n	8006d08 <UART_SetConfig+0x260>
 8006cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd4:	d00c      	beq.n	8006cf0 <UART_SetConfig+0x248>
 8006cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cda:	d815      	bhi.n	8006d08 <UART_SetConfig+0x260>
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <UART_SetConfig+0x240>
 8006ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce4:	d008      	beq.n	8006cf8 <UART_SetConfig+0x250>
 8006ce6:	e00f      	b.n	8006d08 <UART_SetConfig+0x260>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cee:	e042      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cf6:	e03e      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006cf8:	2304      	movs	r3, #4
 8006cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cfe:	e03a      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006d00:	2308      	movs	r3, #8
 8006d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d06:	e036      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006d08:	2310      	movs	r3, #16
 8006d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d0e:	e032      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a2c      	ldr	r2, [pc, #176]	; (8006dc8 <UART_SetConfig+0x320>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d12a      	bne.n	8006d70 <UART_SetConfig+0x2c8>
 8006d1a:	4b2d      	ldr	r3, [pc, #180]	; (8006dd0 <UART_SetConfig+0x328>)
 8006d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d28:	d01a      	beq.n	8006d60 <UART_SetConfig+0x2b8>
 8006d2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d2e:	d81b      	bhi.n	8006d68 <UART_SetConfig+0x2c0>
 8006d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d34:	d00c      	beq.n	8006d50 <UART_SetConfig+0x2a8>
 8006d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d3a:	d815      	bhi.n	8006d68 <UART_SetConfig+0x2c0>
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <UART_SetConfig+0x2a0>
 8006d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d44:	d008      	beq.n	8006d58 <UART_SetConfig+0x2b0>
 8006d46:	e00f      	b.n	8006d68 <UART_SetConfig+0x2c0>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d4e:	e012      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006d50:	2302      	movs	r3, #2
 8006d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d56:	e00e      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d5e:	e00a      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006d60:	2308      	movs	r3, #8
 8006d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d66:	e006      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d6e:	e002      	b.n	8006d76 <UART_SetConfig+0x2ce>
 8006d70:	2310      	movs	r3, #16
 8006d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a13      	ldr	r2, [pc, #76]	; (8006dc8 <UART_SetConfig+0x320>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	f040 8105 	bne.w	8006f8c <UART_SetConfig+0x4e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d836      	bhi.n	8006df8 <UART_SetConfig+0x350>
 8006d8a:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <UART_SetConfig+0x2e8>)
 8006d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d90:	08006db5 	.word	0x08006db5
 8006d94:	08006df9 	.word	0x08006df9
 8006d98:	08006dbd 	.word	0x08006dbd
 8006d9c:	08006df9 	.word	0x08006df9
 8006da0:	08006de9 	.word	0x08006de9
 8006da4:	08006df9 	.word	0x08006df9
 8006da8:	08006df9 	.word	0x08006df9
 8006dac:	08006df9 	.word	0x08006df9
 8006db0:	08006df1 	.word	0x08006df1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006db4:	f7fe fd82 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006db8:	61f8      	str	r0, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006dba:	e021      	b.n	8006e00 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006dbc:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <UART_SetConfig+0x33c>)
 8006dbe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006dc0:	e01e      	b.n	8006e00 <UART_SetConfig+0x358>
 8006dc2:	bf00      	nop
 8006dc4:	efff69f3 	.word	0xefff69f3
 8006dc8:	40008000 	.word	0x40008000
 8006dcc:	40013800 	.word	0x40013800
 8006dd0:	40021000 	.word	0x40021000
 8006dd4:	40004400 	.word	0x40004400
 8006dd8:	40004800 	.word	0x40004800
 8006ddc:	40004c00 	.word	0x40004c00
 8006de0:	40005000 	.word	0x40005000
 8006de4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006de8:	f7fe fcd0 	bl	800578c <HAL_RCC_GetSysClockFreq>
 8006dec:	61f8      	str	r0, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006dee:	e007      	b.n	8006e00 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006df4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006df6:	e003      	b.n	8006e00 <UART_SetConfig+0x358>
      default:
        ret = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8006dfe:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 81c5 	beq.w	8007192 <UART_SetConfig+0x6ea>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	4413      	add	r3, r2
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d305      	bcc.n	8006e24 <UART_SetConfig+0x37c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e1e:	69fa      	ldr	r2, [r7, #28]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d903      	bls.n	8006e2c <UART_SetConfig+0x384>
      {
        ret = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e2a:	e1b2      	b.n	8007192 <UART_SetConfig+0x6ea>
      }
      else
      {
        switch (clocksource)
 8006e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	f200 8096 	bhi.w	8006f62 <UART_SetConfig+0x4ba>
 8006e36:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <UART_SetConfig+0x394>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e61 	.word	0x08006e61
 8006e40:	08006f63 	.word	0x08006f63
 8006e44:	08006eaf 	.word	0x08006eaf
 8006e48:	08006f63 	.word	0x08006f63
 8006e4c:	08006ee5 	.word	0x08006ee5
 8006e50:	08006f63 	.word	0x08006f63
 8006e54:	08006f63 	.word	0x08006f63
 8006e58:	08006f63 	.word	0x08006f63
 8006e5c:	08006f33 	.word	0x08006f33
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006e60:	f7fe fd2c 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006e64:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f04f 0100 	mov.w	r1, #0
 8006e6e:	f04f 0200 	mov.w	r2, #0
 8006e72:	f04f 0300 	mov.w	r3, #0
 8006e76:	020b      	lsls	r3, r1, #8
 8006e78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e7c:	0202      	lsls	r2, r0, #8
 8006e7e:	68f9      	ldr	r1, [r7, #12]
 8006e80:	6849      	ldr	r1, [r1, #4]
 8006e82:	0849      	lsrs	r1, r1, #1
 8006e84:	4608      	mov	r0, r1
 8006e86:	f04f 0100 	mov.w	r1, #0
 8006e8a:	1814      	adds	r4, r2, r0
 8006e8c:	603c      	str	r4, [r7, #0]
 8006e8e:	414b      	adcs	r3, r1
 8006e90:	607b      	str	r3, [r7, #4]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	461a      	mov	r2, r3
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ea0:	f7f9 fed2 	bl	8000c48 <__aeabi_uldivmod>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 8006eac:	e05d      	b.n	8006f6a <UART_SetConfig+0x4c2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	085b      	lsrs	r3, r3, #1
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f04f 0300 	mov.w	r3, #0
 8006eba:	48b3      	ldr	r0, [pc, #716]	; (8007188 <UART_SetConfig+0x6e0>)
 8006ebc:	f04f 0100 	mov.w	r1, #0
 8006ec0:	eb12 0a00 	adds.w	sl, r2, r0
 8006ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f04f 0300 	mov.w	r3, #0
 8006ed2:	4650      	mov	r0, sl
 8006ed4:	4659      	mov	r1, fp
 8006ed6:	f7f9 feb7 	bl	8000c48 <__aeabi_uldivmod>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4613      	mov	r3, r2
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 8006ee2:	e042      	b.n	8006f6a <UART_SetConfig+0x4c2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006ee4:	f7fe fc52 	bl	800578c <HAL_RCC_GetSysClockFreq>
 8006ee8:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f04f 0100 	mov.w	r1, #0
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	020b      	lsls	r3, r1, #8
 8006efc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f00:	0202      	lsls	r2, r0, #8
 8006f02:	68f9      	ldr	r1, [r7, #12]
 8006f04:	6849      	ldr	r1, [r1, #4]
 8006f06:	0849      	lsrs	r1, r1, #1
 8006f08:	4608      	mov	r0, r1
 8006f0a:	f04f 0100 	mov.w	r1, #0
 8006f0e:	eb12 0800 	adds.w	r8, r2, r0
 8006f12:	eb43 0901 	adc.w	r9, r3, r1
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f04f 0300 	mov.w	r3, #0
 8006f20:	4640      	mov	r0, r8
 8006f22:	4649      	mov	r1, r9
 8006f24:	f7f9 fe90 	bl	8000c48 <__aeabi_uldivmod>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 8006f30:	e01b      	b.n	8006f6a <UART_SetConfig+0x4c2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	085b      	lsrs	r3, r3, #1
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f04f 0300 	mov.w	r3, #0
 8006f3e:	f512 0400 	adds.w	r4, r2, #8388608	; 0x800000
 8006f42:	f143 0500 	adc.w	r5, r3, #0
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f04f 0300 	mov.w	r3, #0
 8006f50:	4620      	mov	r0, r4
 8006f52:	4629      	mov	r1, r5
 8006f54:	f7f9 fe78 	bl	8000c48 <__aeabi_uldivmod>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 8006f60:	e003      	b.n	8006f6a <UART_SetConfig+0x4c2>
          default:
            ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;
 8006f68:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f70:	d308      	bcc.n	8006f84 <UART_SetConfig+0x4dc>
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f78:	d204      	bcs.n	8006f84 <UART_SetConfig+0x4dc>
        {
          huart->Instance->BRR = usartdiv;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f80:	60da      	str	r2, [r3, #12]
 8006f82:	e106      	b.n	8007192 <UART_SetConfig+0x6ea>
        }
        else
        {
          ret = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f8a:	e102      	b.n	8007192 <UART_SetConfig+0x6ea>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f94:	f040 8086 	bne.w	80070a4 <UART_SetConfig+0x5fc>
  {
    switch (clocksource)
 8006f98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d85f      	bhi.n	8007060 <UART_SetConfig+0x5b8>
 8006fa0:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <UART_SetConfig+0x500>)
 8006fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	08006fcd 	.word	0x08006fcd
 8006fac:	08006fed 	.word	0x08006fed
 8006fb0:	0800700d 	.word	0x0800700d
 8006fb4:	08007061 	.word	0x08007061
 8006fb8:	08007029 	.word	0x08007029
 8006fbc:	08007061 	.word	0x08007061
 8006fc0:	08007061 	.word	0x08007061
 8006fc4:	08007061 	.word	0x08007061
 8006fc8:	08007049 	.word	0x08007049
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fcc:	f7fe fc76 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006fd0:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	005a      	lsls	r2, r3, #1
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	085b      	lsrs	r3, r3, #1
 8006fdc:	441a      	add	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8006fea:	e03d      	b.n	8007068 <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fec:	f7fe fc7c 	bl	80058e8 <HAL_RCC_GetPCLK2Freq>
 8006ff0:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	005a      	lsls	r2, r3, #1
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	085b      	lsrs	r3, r3, #1
 8006ffc:	441a      	add	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	fbb2 f3f3 	udiv	r3, r2, r3
 8007006:	b29b      	uxth	r3, r3
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800700a:	e02d      	b.n	8007068 <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	085b      	lsrs	r3, r3, #1
 8007012:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007016:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	6852      	ldr	r2, [r2, #4]
 800701e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007022:	b29b      	uxth	r3, r3
 8007024:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8007026:	e01f      	b.n	8007068 <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007028:	f7fe fbb0 	bl	800578c <HAL_RCC_GetSysClockFreq>
 800702c:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	005a      	lsls	r2, r3, #1
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	085b      	lsrs	r3, r3, #1
 8007038:	441a      	add	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007042:	b29b      	uxth	r3, r3
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8007046:	e00f      	b.n	8007068 <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	085b      	lsrs	r3, r3, #1
 800704e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	fbb2 f3f3 	udiv	r3, r2, r3
 800705a:	b29b      	uxth	r3, r3
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800705e:	e003      	b.n	8007068 <UART_SetConfig+0x5c0>
      default:
        ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8007066:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	2b0f      	cmp	r3, #15
 800706c:	d916      	bls.n	800709c <UART_SetConfig+0x5f4>
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007074:	d212      	bcs.n	800709c <UART_SetConfig+0x5f4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	b29b      	uxth	r3, r3
 800707a:	f023 030f 	bic.w	r3, r3, #15
 800707e:	82fb      	strh	r3, [r7, #22]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	085b      	lsrs	r3, r3, #1
 8007084:	b29b      	uxth	r3, r3
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	b29a      	uxth	r2, r3
 800708c:	8afb      	ldrh	r3, [r7, #22]
 800708e:	4313      	orrs	r3, r2
 8007090:	82fb      	strh	r3, [r7, #22]
      huart->Instance->BRR = brrtemp;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	8afa      	ldrh	r2, [r7, #22]
 8007098:	60da      	str	r2, [r3, #12]
 800709a:	e07a      	b.n	8007192 <UART_SetConfig+0x6ea>
    }
    else
    {
      ret = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070a2:	e076      	b.n	8007192 <UART_SetConfig+0x6ea>
    }
  }
  else
  {
    switch (clocksource)
 80070a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d85c      	bhi.n	8007166 <UART_SetConfig+0x6be>
 80070ac:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <UART_SetConfig+0x60c>)
 80070ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b2:	bf00      	nop
 80070b4:	080070d9 	.word	0x080070d9
 80070b8:	080070f7 	.word	0x080070f7
 80070bc:	08007115 	.word	0x08007115
 80070c0:	08007167 	.word	0x08007167
 80070c4:	08007131 	.word	0x08007131
 80070c8:	08007167 	.word	0x08007167
 80070cc:	08007167 	.word	0x08007167
 80070d0:	08007167 	.word	0x08007167
 80070d4:	0800714f 	.word	0x0800714f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d8:	f7fe fbf0 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 80070dc:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	085a      	lsrs	r2, r3, #1
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	441a      	add	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 80070f4:	e03b      	b.n	800716e <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070f6:	f7fe fbf7 	bl	80058e8 <HAL_RCC_GetPCLK2Freq>
 80070fa:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	085a      	lsrs	r2, r3, #1
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	441a      	add	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	fbb2 f3f3 	udiv	r3, r2, r3
 800710e:	b29b      	uxth	r3, r3
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8007112:	e02c      	b.n	800716e <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	085b      	lsrs	r3, r3, #1
 800711a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800711e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	6852      	ldr	r2, [r2, #4]
 8007126:	fbb3 f3f2 	udiv	r3, r3, r2
 800712a:	b29b      	uxth	r3, r3
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800712e:	e01e      	b.n	800716e <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007130:	f7fe fb2c 	bl	800578c <HAL_RCC_GetSysClockFreq>
 8007134:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	085a      	lsrs	r2, r3, #1
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	441a      	add	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	fbb2 f3f3 	udiv	r3, r2, r3
 8007148:	b29b      	uxth	r3, r3
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800714c:	e00f      	b.n	800716e <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	085b      	lsrs	r3, r3, #1
 8007154:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007160:	b29b      	uxth	r3, r3
 8007162:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8007164:	e003      	b.n	800716e <UART_SetConfig+0x6c6>
      default:
        ret = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800716c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	2b0f      	cmp	r3, #15
 8007172:	d90b      	bls.n	800718c <UART_SetConfig+0x6e4>
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800717a:	d207      	bcs.n	800718c <UART_SetConfig+0x6e4>
    {
      huart->Instance->BRR = usartdiv;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007182:	60da      	str	r2, [r3, #12]
 8007184:	e005      	b.n	8007192 <UART_SetConfig+0x6ea>
 8007186:	bf00      	nop
 8007188:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800719e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3730      	adds	r7, #48	; 0x30
 80071a6:	46bd      	mov	sp, r7
 80071a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080071ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	f003 0310 	and.w	r3, r3, #16
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00a      	beq.n	800725e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01a      	beq.n	80072c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072aa:	d10a      	bne.n	80072c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]
  }
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80072fe:	f7fd f871 	bl	80043e4 <HAL_GetTick>
 8007302:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b08      	cmp	r3, #8
 8007310:	d10e      	bne.n	8007330 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007312:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f82a 	bl	800737a <UART_WaitOnFlagUntilTimeout>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e020      	b.n	8007372 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0304 	and.w	r3, r3, #4
 800733a:	2b04      	cmp	r3, #4
 800733c:	d10e      	bne.n	800735c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800733e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f814 	bl	800737a <UART_WaitOnFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e00a      	b.n	8007372 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	603b      	str	r3, [r7, #0]
 8007386:	4613      	mov	r3, r2
 8007388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800738a:	e05d      	b.n	8007448 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007392:	d059      	beq.n	8007448 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007394:	f7fd f826 	bl	80043e4 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d302      	bcc.n	80073aa <UART_WaitOnFlagUntilTimeout+0x30>
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d11b      	bne.n	80073e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0201 	bic.w	r2, r2, #1
 80073c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2220      	movs	r2, #32
 80073ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2220      	movs	r2, #32
 80073d4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e042      	b.n	8007468 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d02b      	beq.n	8007448 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073fe:	d123      	bne.n	8007448 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007408:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007418:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0201 	bic.w	r2, r2, #1
 8007428:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2220      	movs	r2, #32
 800742e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2220      	movs	r2, #32
 8007434:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2220      	movs	r2, #32
 800743a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e00f      	b.n	8007468 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	69da      	ldr	r2, [r3, #28]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	4013      	ands	r3, r2
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	429a      	cmp	r2, r3
 8007456:	bf0c      	ite	eq
 8007458:	2301      	moveq	r3, #1
 800745a:	2300      	movne	r3, #0
 800745c:	b2db      	uxtb	r3, r3
 800745e:	461a      	mov	r2, r3
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	429a      	cmp	r2, r3
 8007464:	d092      	beq.n	800738c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <findslot>:
 8007470:	4b0a      	ldr	r3, [pc, #40]	; (800749c <findslot+0x2c>)
 8007472:	b510      	push	{r4, lr}
 8007474:	4604      	mov	r4, r0
 8007476:	6818      	ldr	r0, [r3, #0]
 8007478:	b118      	cbz	r0, 8007482 <findslot+0x12>
 800747a:	6983      	ldr	r3, [r0, #24]
 800747c:	b90b      	cbnz	r3, 8007482 <findslot+0x12>
 800747e:	f000 f9ad 	bl	80077dc <__sinit>
 8007482:	2c13      	cmp	r4, #19
 8007484:	d807      	bhi.n	8007496 <findslot+0x26>
 8007486:	4806      	ldr	r0, [pc, #24]	; (80074a0 <findslot+0x30>)
 8007488:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800748c:	3201      	adds	r2, #1
 800748e:	d002      	beq.n	8007496 <findslot+0x26>
 8007490:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007494:	bd10      	pop	{r4, pc}
 8007496:	2000      	movs	r0, #0
 8007498:	e7fc      	b.n	8007494 <findslot+0x24>
 800749a:	bf00      	nop
 800749c:	200000e0 	.word	0x200000e0
 80074a0:	20000300 	.word	0x20000300

080074a4 <checkerror>:
 80074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a6:	1c43      	adds	r3, r0, #1
 80074a8:	4604      	mov	r4, r0
 80074aa:	d109      	bne.n	80074c0 <checkerror+0x1c>
 80074ac:	f000 f938 	bl	8007720 <__errno>
 80074b0:	2613      	movs	r6, #19
 80074b2:	4605      	mov	r5, r0
 80074b4:	2700      	movs	r7, #0
 80074b6:	4630      	mov	r0, r6
 80074b8:	4639      	mov	r1, r7
 80074ba:	beab      	bkpt	0x00ab
 80074bc:	4606      	mov	r6, r0
 80074be:	602e      	str	r6, [r5, #0]
 80074c0:	4620      	mov	r0, r4
 80074c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074c4 <error>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	4604      	mov	r4, r0
 80074c8:	f000 f92a 	bl	8007720 <__errno>
 80074cc:	2613      	movs	r6, #19
 80074ce:	4605      	mov	r5, r0
 80074d0:	2700      	movs	r7, #0
 80074d2:	4630      	mov	r0, r6
 80074d4:	4639      	mov	r1, r7
 80074d6:	beab      	bkpt	0x00ab
 80074d8:	4606      	mov	r6, r0
 80074da:	602e      	str	r6, [r5, #0]
 80074dc:	4620      	mov	r0, r4
 80074de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074e0 <_swiread>:
 80074e0:	b530      	push	{r4, r5, lr}
 80074e2:	b085      	sub	sp, #20
 80074e4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80074e8:	9203      	str	r2, [sp, #12]
 80074ea:	2406      	movs	r4, #6
 80074ec:	ad01      	add	r5, sp, #4
 80074ee:	4620      	mov	r0, r4
 80074f0:	4629      	mov	r1, r5
 80074f2:	beab      	bkpt	0x00ab
 80074f4:	4604      	mov	r4, r0
 80074f6:	4620      	mov	r0, r4
 80074f8:	f7ff ffd4 	bl	80074a4 <checkerror>
 80074fc:	b005      	add	sp, #20
 80074fe:	bd30      	pop	{r4, r5, pc}

08007500 <_read>:
 8007500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007502:	4615      	mov	r5, r2
 8007504:	9101      	str	r1, [sp, #4]
 8007506:	f7ff ffb3 	bl	8007470 <findslot>
 800750a:	9901      	ldr	r1, [sp, #4]
 800750c:	4604      	mov	r4, r0
 800750e:	b938      	cbnz	r0, 8007520 <_read+0x20>
 8007510:	f000 f906 	bl	8007720 <__errno>
 8007514:	2309      	movs	r3, #9
 8007516:	6003      	str	r3, [r0, #0]
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	b003      	add	sp, #12
 800751e:	bd30      	pop	{r4, r5, pc}
 8007520:	6800      	ldr	r0, [r0, #0]
 8007522:	462a      	mov	r2, r5
 8007524:	f7ff ffdc 	bl	80074e0 <_swiread>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d0f7      	beq.n	800751c <_read+0x1c>
 800752c:	6863      	ldr	r3, [r4, #4]
 800752e:	1a2a      	subs	r2, r5, r0
 8007530:	4413      	add	r3, r2
 8007532:	6063      	str	r3, [r4, #4]
 8007534:	4610      	mov	r0, r2
 8007536:	e7f1      	b.n	800751c <_read+0x1c>

08007538 <_swilseek>:
 8007538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800753a:	460c      	mov	r4, r1
 800753c:	4616      	mov	r6, r2
 800753e:	f7ff ff97 	bl	8007470 <findslot>
 8007542:	4605      	mov	r5, r0
 8007544:	b940      	cbnz	r0, 8007558 <_swilseek+0x20>
 8007546:	f000 f8eb 	bl	8007720 <__errno>
 800754a:	2309      	movs	r3, #9
 800754c:	6003      	str	r3, [r0, #0]
 800754e:	f04f 34ff 	mov.w	r4, #4294967295
 8007552:	4620      	mov	r0, r4
 8007554:	b003      	add	sp, #12
 8007556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007558:	2e02      	cmp	r6, #2
 800755a:	d903      	bls.n	8007564 <_swilseek+0x2c>
 800755c:	f000 f8e0 	bl	8007720 <__errno>
 8007560:	2316      	movs	r3, #22
 8007562:	e7f3      	b.n	800754c <_swilseek+0x14>
 8007564:	2e01      	cmp	r6, #1
 8007566:	d112      	bne.n	800758e <_swilseek+0x56>
 8007568:	6843      	ldr	r3, [r0, #4]
 800756a:	18e4      	adds	r4, r4, r3
 800756c:	d4f6      	bmi.n	800755c <_swilseek+0x24>
 800756e:	682b      	ldr	r3, [r5, #0]
 8007570:	260a      	movs	r6, #10
 8007572:	e9cd 3400 	strd	r3, r4, [sp]
 8007576:	466f      	mov	r7, sp
 8007578:	4630      	mov	r0, r6
 800757a:	4639      	mov	r1, r7
 800757c:	beab      	bkpt	0x00ab
 800757e:	4606      	mov	r6, r0
 8007580:	4630      	mov	r0, r6
 8007582:	f7ff ff8f 	bl	80074a4 <checkerror>
 8007586:	2800      	cmp	r0, #0
 8007588:	dbe1      	blt.n	800754e <_swilseek+0x16>
 800758a:	606c      	str	r4, [r5, #4]
 800758c:	e7e1      	b.n	8007552 <_swilseek+0x1a>
 800758e:	2e02      	cmp	r6, #2
 8007590:	d1ed      	bne.n	800756e <_swilseek+0x36>
 8007592:	6803      	ldr	r3, [r0, #0]
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	260c      	movs	r6, #12
 8007598:	466f      	mov	r7, sp
 800759a:	4630      	mov	r0, r6
 800759c:	4639      	mov	r1, r7
 800759e:	beab      	bkpt	0x00ab
 80075a0:	4606      	mov	r6, r0
 80075a2:	4630      	mov	r0, r6
 80075a4:	f7ff ff7e 	bl	80074a4 <checkerror>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d0d0      	beq.n	800754e <_swilseek+0x16>
 80075ac:	4404      	add	r4, r0
 80075ae:	e7de      	b.n	800756e <_swilseek+0x36>

080075b0 <_lseek>:
 80075b0:	f7ff bfc2 	b.w	8007538 <_swilseek>

080075b4 <_swiwrite>:
 80075b4:	b530      	push	{r4, r5, lr}
 80075b6:	b085      	sub	sp, #20
 80075b8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80075bc:	9203      	str	r2, [sp, #12]
 80075be:	2405      	movs	r4, #5
 80075c0:	ad01      	add	r5, sp, #4
 80075c2:	4620      	mov	r0, r4
 80075c4:	4629      	mov	r1, r5
 80075c6:	beab      	bkpt	0x00ab
 80075c8:	4604      	mov	r4, r0
 80075ca:	4620      	mov	r0, r4
 80075cc:	f7ff ff6a 	bl	80074a4 <checkerror>
 80075d0:	b005      	add	sp, #20
 80075d2:	bd30      	pop	{r4, r5, pc}

080075d4 <_write>:
 80075d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075d6:	4615      	mov	r5, r2
 80075d8:	9101      	str	r1, [sp, #4]
 80075da:	f7ff ff49 	bl	8007470 <findslot>
 80075de:	9901      	ldr	r1, [sp, #4]
 80075e0:	4604      	mov	r4, r0
 80075e2:	b930      	cbnz	r0, 80075f2 <_write+0x1e>
 80075e4:	f000 f89c 	bl	8007720 <__errno>
 80075e8:	2309      	movs	r3, #9
 80075ea:	6003      	str	r3, [r0, #0]
 80075ec:	f04f 30ff 	mov.w	r0, #4294967295
 80075f0:	e012      	b.n	8007618 <_write+0x44>
 80075f2:	6800      	ldr	r0, [r0, #0]
 80075f4:	462a      	mov	r2, r5
 80075f6:	f7ff ffdd 	bl	80075b4 <_swiwrite>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	dbf6      	blt.n	80075ec <_write+0x18>
 80075fe:	6862      	ldr	r2, [r4, #4]
 8007600:	1a2b      	subs	r3, r5, r0
 8007602:	441a      	add	r2, r3
 8007604:	42a8      	cmp	r0, r5
 8007606:	6062      	str	r2, [r4, #4]
 8007608:	d105      	bne.n	8007616 <_write+0x42>
 800760a:	2000      	movs	r0, #0
 800760c:	b003      	add	sp, #12
 800760e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007612:	f7ff bf57 	b.w	80074c4 <error>
 8007616:	4618      	mov	r0, r3
 8007618:	b003      	add	sp, #12
 800761a:	bd30      	pop	{r4, r5, pc}

0800761c <_swiclose>:
 800761c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800761e:	2402      	movs	r4, #2
 8007620:	9001      	str	r0, [sp, #4]
 8007622:	ad01      	add	r5, sp, #4
 8007624:	4620      	mov	r0, r4
 8007626:	4629      	mov	r1, r5
 8007628:	beab      	bkpt	0x00ab
 800762a:	4604      	mov	r4, r0
 800762c:	4620      	mov	r0, r4
 800762e:	f7ff ff39 	bl	80074a4 <checkerror>
 8007632:	b003      	add	sp, #12
 8007634:	bd30      	pop	{r4, r5, pc}
	...

08007638 <_close>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4605      	mov	r5, r0
 800763c:	f7ff ff18 	bl	8007470 <findslot>
 8007640:	4604      	mov	r4, r0
 8007642:	b930      	cbnz	r0, 8007652 <_close+0x1a>
 8007644:	f000 f86c 	bl	8007720 <__errno>
 8007648:	2309      	movs	r3, #9
 800764a:	6003      	str	r3, [r0, #0]
 800764c:	f04f 30ff 	mov.w	r0, #4294967295
 8007650:	bd38      	pop	{r3, r4, r5, pc}
 8007652:	3d01      	subs	r5, #1
 8007654:	2d01      	cmp	r5, #1
 8007656:	d809      	bhi.n	800766c <_close+0x34>
 8007658:	4b09      	ldr	r3, [pc, #36]	; (8007680 <_close+0x48>)
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	429a      	cmp	r2, r3
 8007660:	d104      	bne.n	800766c <_close+0x34>
 8007662:	f04f 33ff 	mov.w	r3, #4294967295
 8007666:	6003      	str	r3, [r0, #0]
 8007668:	2000      	movs	r0, #0
 800766a:	e7f1      	b.n	8007650 <_close+0x18>
 800766c:	6820      	ldr	r0, [r4, #0]
 800766e:	f7ff ffd5 	bl	800761c <_swiclose>
 8007672:	2800      	cmp	r0, #0
 8007674:	d1ec      	bne.n	8007650 <_close+0x18>
 8007676:	f04f 33ff 	mov.w	r3, #4294967295
 800767a:	6023      	str	r3, [r4, #0]
 800767c:	e7e8      	b.n	8007650 <_close+0x18>
 800767e:	bf00      	nop
 8007680:	20000300 	.word	0x20000300

08007684 <_getpid>:
 8007684:	2001      	movs	r0, #1
 8007686:	4770      	bx	lr

08007688 <_swistat>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	460c      	mov	r4, r1
 800768c:	f7ff fef0 	bl	8007470 <findslot>
 8007690:	4605      	mov	r5, r0
 8007692:	b930      	cbnz	r0, 80076a2 <_swistat+0x1a>
 8007694:	f000 f844 	bl	8007720 <__errno>
 8007698:	2309      	movs	r3, #9
 800769a:	6003      	str	r3, [r0, #0]
 800769c:	f04f 30ff 	mov.w	r0, #4294967295
 80076a0:	bd70      	pop	{r4, r5, r6, pc}
 80076a2:	6863      	ldr	r3, [r4, #4]
 80076a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80076a8:	6063      	str	r3, [r4, #4]
 80076aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076ae:	64a3      	str	r3, [r4, #72]	; 0x48
 80076b0:	260c      	movs	r6, #12
 80076b2:	4630      	mov	r0, r6
 80076b4:	4629      	mov	r1, r5
 80076b6:	beab      	bkpt	0x00ab
 80076b8:	4605      	mov	r5, r0
 80076ba:	4628      	mov	r0, r5
 80076bc:	f7ff fef2 	bl	80074a4 <checkerror>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	bf1c      	itt	ne
 80076c4:	6120      	strne	r0, [r4, #16]
 80076c6:	2000      	movne	r0, #0
 80076c8:	e7ea      	b.n	80076a0 <_swistat+0x18>

080076ca <_fstat>:
 80076ca:	460b      	mov	r3, r1
 80076cc:	b510      	push	{r4, lr}
 80076ce:	2100      	movs	r1, #0
 80076d0:	4604      	mov	r4, r0
 80076d2:	2258      	movs	r2, #88	; 0x58
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 f954 	bl	8007982 <memset>
 80076da:	4601      	mov	r1, r0
 80076dc:	4620      	mov	r0, r4
 80076de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e2:	f7ff bfd1 	b.w	8007688 <_swistat>

080076e6 <_isatty>:
 80076e6:	b570      	push	{r4, r5, r6, lr}
 80076e8:	f7ff fec2 	bl	8007470 <findslot>
 80076ec:	2509      	movs	r5, #9
 80076ee:	4604      	mov	r4, r0
 80076f0:	b920      	cbnz	r0, 80076fc <_isatty+0x16>
 80076f2:	f000 f815 	bl	8007720 <__errno>
 80076f6:	6005      	str	r5, [r0, #0]
 80076f8:	4620      	mov	r0, r4
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
 80076fc:	4628      	mov	r0, r5
 80076fe:	4621      	mov	r1, r4
 8007700:	beab      	bkpt	0x00ab
 8007702:	4604      	mov	r4, r0
 8007704:	2c01      	cmp	r4, #1
 8007706:	d0f7      	beq.n	80076f8 <_isatty+0x12>
 8007708:	f000 f80a 	bl	8007720 <__errno>
 800770c:	2400      	movs	r4, #0
 800770e:	4605      	mov	r5, r0
 8007710:	2613      	movs	r6, #19
 8007712:	4630      	mov	r0, r6
 8007714:	4621      	mov	r1, r4
 8007716:	beab      	bkpt	0x00ab
 8007718:	4606      	mov	r6, r0
 800771a:	602e      	str	r6, [r5, #0]
 800771c:	e7ec      	b.n	80076f8 <_isatty+0x12>
	...

08007720 <__errno>:
 8007720:	4b01      	ldr	r3, [pc, #4]	; (8007728 <__errno+0x8>)
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	200000e0 	.word	0x200000e0

0800772c <std>:
 800772c:	2300      	movs	r3, #0
 800772e:	b510      	push	{r4, lr}
 8007730:	4604      	mov	r4, r0
 8007732:	e9c0 3300 	strd	r3, r3, [r0]
 8007736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800773a:	6083      	str	r3, [r0, #8]
 800773c:	8181      	strh	r1, [r0, #12]
 800773e:	6643      	str	r3, [r0, #100]	; 0x64
 8007740:	81c2      	strh	r2, [r0, #14]
 8007742:	6183      	str	r3, [r0, #24]
 8007744:	4619      	mov	r1, r3
 8007746:	2208      	movs	r2, #8
 8007748:	305c      	adds	r0, #92	; 0x5c
 800774a:	f000 f91a 	bl	8007982 <memset>
 800774e:	4b05      	ldr	r3, [pc, #20]	; (8007764 <std+0x38>)
 8007750:	6263      	str	r3, [r4, #36]	; 0x24
 8007752:	4b05      	ldr	r3, [pc, #20]	; (8007768 <std+0x3c>)
 8007754:	62a3      	str	r3, [r4, #40]	; 0x28
 8007756:	4b05      	ldr	r3, [pc, #20]	; (800776c <std+0x40>)
 8007758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800775a:	4b05      	ldr	r3, [pc, #20]	; (8007770 <std+0x44>)
 800775c:	6224      	str	r4, [r4, #32]
 800775e:	6323      	str	r3, [r4, #48]	; 0x30
 8007760:	bd10      	pop	{r4, pc}
 8007762:	bf00      	nop
 8007764:	08008499 	.word	0x08008499
 8007768:	080084bb 	.word	0x080084bb
 800776c:	080084f3 	.word	0x080084f3
 8007770:	08008517 	.word	0x08008517

08007774 <_cleanup_r>:
 8007774:	4901      	ldr	r1, [pc, #4]	; (800777c <_cleanup_r+0x8>)
 8007776:	f000 b8af 	b.w	80078d8 <_fwalk_reent>
 800777a:	bf00      	nop
 800777c:	0800962d 	.word	0x0800962d

08007780 <__sfmoreglue>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	1e4a      	subs	r2, r1, #1
 8007784:	2568      	movs	r5, #104	; 0x68
 8007786:	4355      	muls	r5, r2
 8007788:	460e      	mov	r6, r1
 800778a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800778e:	f000 f901 	bl	8007994 <_malloc_r>
 8007792:	4604      	mov	r4, r0
 8007794:	b140      	cbz	r0, 80077a8 <__sfmoreglue+0x28>
 8007796:	2100      	movs	r1, #0
 8007798:	e9c0 1600 	strd	r1, r6, [r0]
 800779c:	300c      	adds	r0, #12
 800779e:	60a0      	str	r0, [r4, #8]
 80077a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077a4:	f000 f8ed 	bl	8007982 <memset>
 80077a8:	4620      	mov	r0, r4
 80077aa:	bd70      	pop	{r4, r5, r6, pc}

080077ac <__sfp_lock_acquire>:
 80077ac:	4801      	ldr	r0, [pc, #4]	; (80077b4 <__sfp_lock_acquire+0x8>)
 80077ae:	f000 b8d8 	b.w	8007962 <__retarget_lock_acquire_recursive>
 80077b2:	bf00      	nop
 80077b4:	20000c74 	.word	0x20000c74

080077b8 <__sfp_lock_release>:
 80077b8:	4801      	ldr	r0, [pc, #4]	; (80077c0 <__sfp_lock_release+0x8>)
 80077ba:	f000 b8d3 	b.w	8007964 <__retarget_lock_release_recursive>
 80077be:	bf00      	nop
 80077c0:	20000c74 	.word	0x20000c74

080077c4 <__sinit_lock_acquire>:
 80077c4:	4801      	ldr	r0, [pc, #4]	; (80077cc <__sinit_lock_acquire+0x8>)
 80077c6:	f000 b8cc 	b.w	8007962 <__retarget_lock_acquire_recursive>
 80077ca:	bf00      	nop
 80077cc:	20000c6f 	.word	0x20000c6f

080077d0 <__sinit_lock_release>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__sinit_lock_release+0x8>)
 80077d2:	f000 b8c7 	b.w	8007964 <__retarget_lock_release_recursive>
 80077d6:	bf00      	nop
 80077d8:	20000c6f 	.word	0x20000c6f

080077dc <__sinit>:
 80077dc:	b510      	push	{r4, lr}
 80077de:	4604      	mov	r4, r0
 80077e0:	f7ff fff0 	bl	80077c4 <__sinit_lock_acquire>
 80077e4:	69a3      	ldr	r3, [r4, #24]
 80077e6:	b11b      	cbz	r3, 80077f0 <__sinit+0x14>
 80077e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ec:	f7ff bff0 	b.w	80077d0 <__sinit_lock_release>
 80077f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077f4:	6523      	str	r3, [r4, #80]	; 0x50
 80077f6:	4b13      	ldr	r3, [pc, #76]	; (8007844 <__sinit+0x68>)
 80077f8:	4a13      	ldr	r2, [pc, #76]	; (8007848 <__sinit+0x6c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80077fe:	42a3      	cmp	r3, r4
 8007800:	bf04      	itt	eq
 8007802:	2301      	moveq	r3, #1
 8007804:	61a3      	streq	r3, [r4, #24]
 8007806:	4620      	mov	r0, r4
 8007808:	f000 f820 	bl	800784c <__sfp>
 800780c:	6060      	str	r0, [r4, #4]
 800780e:	4620      	mov	r0, r4
 8007810:	f000 f81c 	bl	800784c <__sfp>
 8007814:	60a0      	str	r0, [r4, #8]
 8007816:	4620      	mov	r0, r4
 8007818:	f000 f818 	bl	800784c <__sfp>
 800781c:	2200      	movs	r2, #0
 800781e:	60e0      	str	r0, [r4, #12]
 8007820:	2104      	movs	r1, #4
 8007822:	6860      	ldr	r0, [r4, #4]
 8007824:	f7ff ff82 	bl	800772c <std>
 8007828:	68a0      	ldr	r0, [r4, #8]
 800782a:	2201      	movs	r2, #1
 800782c:	2109      	movs	r1, #9
 800782e:	f7ff ff7d 	bl	800772c <std>
 8007832:	68e0      	ldr	r0, [r4, #12]
 8007834:	2202      	movs	r2, #2
 8007836:	2112      	movs	r1, #18
 8007838:	f7ff ff78 	bl	800772c <std>
 800783c:	2301      	movs	r3, #1
 800783e:	61a3      	str	r3, [r4, #24]
 8007840:	e7d2      	b.n	80077e8 <__sinit+0xc>
 8007842:	bf00      	nop
 8007844:	0800aea8 	.word	0x0800aea8
 8007848:	08007775 	.word	0x08007775

0800784c <__sfp>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	4607      	mov	r7, r0
 8007850:	f7ff ffac 	bl	80077ac <__sfp_lock_acquire>
 8007854:	4b1e      	ldr	r3, [pc, #120]	; (80078d0 <__sfp+0x84>)
 8007856:	681e      	ldr	r6, [r3, #0]
 8007858:	69b3      	ldr	r3, [r6, #24]
 800785a:	b913      	cbnz	r3, 8007862 <__sfp+0x16>
 800785c:	4630      	mov	r0, r6
 800785e:	f7ff ffbd 	bl	80077dc <__sinit>
 8007862:	3648      	adds	r6, #72	; 0x48
 8007864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007868:	3b01      	subs	r3, #1
 800786a:	d503      	bpl.n	8007874 <__sfp+0x28>
 800786c:	6833      	ldr	r3, [r6, #0]
 800786e:	b30b      	cbz	r3, 80078b4 <__sfp+0x68>
 8007870:	6836      	ldr	r6, [r6, #0]
 8007872:	e7f7      	b.n	8007864 <__sfp+0x18>
 8007874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007878:	b9d5      	cbnz	r5, 80078b0 <__sfp+0x64>
 800787a:	4b16      	ldr	r3, [pc, #88]	; (80078d4 <__sfp+0x88>)
 800787c:	60e3      	str	r3, [r4, #12]
 800787e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007882:	6665      	str	r5, [r4, #100]	; 0x64
 8007884:	f000 f86c 	bl	8007960 <__retarget_lock_init_recursive>
 8007888:	f7ff ff96 	bl	80077b8 <__sfp_lock_release>
 800788c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007890:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007894:	6025      	str	r5, [r4, #0]
 8007896:	61a5      	str	r5, [r4, #24]
 8007898:	2208      	movs	r2, #8
 800789a:	4629      	mov	r1, r5
 800789c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078a0:	f000 f86f 	bl	8007982 <memset>
 80078a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078ac:	4620      	mov	r0, r4
 80078ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078b0:	3468      	adds	r4, #104	; 0x68
 80078b2:	e7d9      	b.n	8007868 <__sfp+0x1c>
 80078b4:	2104      	movs	r1, #4
 80078b6:	4638      	mov	r0, r7
 80078b8:	f7ff ff62 	bl	8007780 <__sfmoreglue>
 80078bc:	4604      	mov	r4, r0
 80078be:	6030      	str	r0, [r6, #0]
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d1d5      	bne.n	8007870 <__sfp+0x24>
 80078c4:	f7ff ff78 	bl	80077b8 <__sfp_lock_release>
 80078c8:	230c      	movs	r3, #12
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	e7ee      	b.n	80078ac <__sfp+0x60>
 80078ce:	bf00      	nop
 80078d0:	0800aea8 	.word	0x0800aea8
 80078d4:	ffff0001 	.word	0xffff0001

080078d8 <_fwalk_reent>:
 80078d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078dc:	4606      	mov	r6, r0
 80078de:	4688      	mov	r8, r1
 80078e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078e4:	2700      	movs	r7, #0
 80078e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078ea:	f1b9 0901 	subs.w	r9, r9, #1
 80078ee:	d505      	bpl.n	80078fc <_fwalk_reent+0x24>
 80078f0:	6824      	ldr	r4, [r4, #0]
 80078f2:	2c00      	cmp	r4, #0
 80078f4:	d1f7      	bne.n	80078e6 <_fwalk_reent+0xe>
 80078f6:	4638      	mov	r0, r7
 80078f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078fc:	89ab      	ldrh	r3, [r5, #12]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d907      	bls.n	8007912 <_fwalk_reent+0x3a>
 8007902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007906:	3301      	adds	r3, #1
 8007908:	d003      	beq.n	8007912 <_fwalk_reent+0x3a>
 800790a:	4629      	mov	r1, r5
 800790c:	4630      	mov	r0, r6
 800790e:	47c0      	blx	r8
 8007910:	4307      	orrs	r7, r0
 8007912:	3568      	adds	r5, #104	; 0x68
 8007914:	e7e9      	b.n	80078ea <_fwalk_reent+0x12>
	...

08007918 <__libc_init_array>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	4d0d      	ldr	r5, [pc, #52]	; (8007950 <__libc_init_array+0x38>)
 800791c:	4c0d      	ldr	r4, [pc, #52]	; (8007954 <__libc_init_array+0x3c>)
 800791e:	1b64      	subs	r4, r4, r5
 8007920:	10a4      	asrs	r4, r4, #2
 8007922:	2600      	movs	r6, #0
 8007924:	42a6      	cmp	r6, r4
 8007926:	d109      	bne.n	800793c <__libc_init_array+0x24>
 8007928:	4d0b      	ldr	r5, [pc, #44]	; (8007958 <__libc_init_array+0x40>)
 800792a:	4c0c      	ldr	r4, [pc, #48]	; (800795c <__libc_init_array+0x44>)
 800792c:	f002 ffc8 	bl	800a8c0 <_init>
 8007930:	1b64      	subs	r4, r4, r5
 8007932:	10a4      	asrs	r4, r4, #2
 8007934:	2600      	movs	r6, #0
 8007936:	42a6      	cmp	r6, r4
 8007938:	d105      	bne.n	8007946 <__libc_init_array+0x2e>
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007940:	4798      	blx	r3
 8007942:	3601      	adds	r6, #1
 8007944:	e7ee      	b.n	8007924 <__libc_init_array+0xc>
 8007946:	f855 3b04 	ldr.w	r3, [r5], #4
 800794a:	4798      	blx	r3
 800794c:	3601      	adds	r6, #1
 800794e:	e7f2      	b.n	8007936 <__libc_init_array+0x1e>
 8007950:	0800b298 	.word	0x0800b298
 8007954:	0800b298 	.word	0x0800b298
 8007958:	0800b298 	.word	0x0800b298
 800795c:	0800b29c 	.word	0x0800b29c

08007960 <__retarget_lock_init_recursive>:
 8007960:	4770      	bx	lr

08007962 <__retarget_lock_acquire_recursive>:
 8007962:	4770      	bx	lr

08007964 <__retarget_lock_release_recursive>:
 8007964:	4770      	bx	lr

08007966 <memcpy>:
 8007966:	440a      	add	r2, r1
 8007968:	4291      	cmp	r1, r2
 800796a:	f100 33ff 	add.w	r3, r0, #4294967295
 800796e:	d100      	bne.n	8007972 <memcpy+0xc>
 8007970:	4770      	bx	lr
 8007972:	b510      	push	{r4, lr}
 8007974:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007978:	f803 4f01 	strb.w	r4, [r3, #1]!
 800797c:	4291      	cmp	r1, r2
 800797e:	d1f9      	bne.n	8007974 <memcpy+0xe>
 8007980:	bd10      	pop	{r4, pc}

08007982 <memset>:
 8007982:	4402      	add	r2, r0
 8007984:	4603      	mov	r3, r0
 8007986:	4293      	cmp	r3, r2
 8007988:	d100      	bne.n	800798c <memset+0xa>
 800798a:	4770      	bx	lr
 800798c:	f803 1b01 	strb.w	r1, [r3], #1
 8007990:	e7f9      	b.n	8007986 <memset+0x4>
	...

08007994 <_malloc_r>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	1ccd      	adds	r5, r1, #3
 8007998:	f025 0503 	bic.w	r5, r5, #3
 800799c:	3508      	adds	r5, #8
 800799e:	2d0c      	cmp	r5, #12
 80079a0:	bf38      	it	cc
 80079a2:	250c      	movcc	r5, #12
 80079a4:	2d00      	cmp	r5, #0
 80079a6:	4606      	mov	r6, r0
 80079a8:	db01      	blt.n	80079ae <_malloc_r+0x1a>
 80079aa:	42a9      	cmp	r1, r5
 80079ac:	d903      	bls.n	80079b6 <_malloc_r+0x22>
 80079ae:	230c      	movs	r3, #12
 80079b0:	6033      	str	r3, [r6, #0]
 80079b2:	2000      	movs	r0, #0
 80079b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b6:	f001 ff09 	bl	80097cc <__malloc_lock>
 80079ba:	4921      	ldr	r1, [pc, #132]	; (8007a40 <_malloc_r+0xac>)
 80079bc:	680a      	ldr	r2, [r1, #0]
 80079be:	4614      	mov	r4, r2
 80079c0:	b99c      	cbnz	r4, 80079ea <_malloc_r+0x56>
 80079c2:	4f20      	ldr	r7, [pc, #128]	; (8007a44 <_malloc_r+0xb0>)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	b923      	cbnz	r3, 80079d2 <_malloc_r+0x3e>
 80079c8:	4621      	mov	r1, r4
 80079ca:	4630      	mov	r0, r6
 80079cc:	f000 fd34 	bl	8008438 <_sbrk_r>
 80079d0:	6038      	str	r0, [r7, #0]
 80079d2:	4629      	mov	r1, r5
 80079d4:	4630      	mov	r0, r6
 80079d6:	f000 fd2f 	bl	8008438 <_sbrk_r>
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	d123      	bne.n	8007a26 <_malloc_r+0x92>
 80079de:	230c      	movs	r3, #12
 80079e0:	6033      	str	r3, [r6, #0]
 80079e2:	4630      	mov	r0, r6
 80079e4:	f001 fef8 	bl	80097d8 <__malloc_unlock>
 80079e8:	e7e3      	b.n	80079b2 <_malloc_r+0x1e>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	1b5b      	subs	r3, r3, r5
 80079ee:	d417      	bmi.n	8007a20 <_malloc_r+0x8c>
 80079f0:	2b0b      	cmp	r3, #11
 80079f2:	d903      	bls.n	80079fc <_malloc_r+0x68>
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	441c      	add	r4, r3
 80079f8:	6025      	str	r5, [r4, #0]
 80079fa:	e004      	b.n	8007a06 <_malloc_r+0x72>
 80079fc:	6863      	ldr	r3, [r4, #4]
 80079fe:	42a2      	cmp	r2, r4
 8007a00:	bf0c      	ite	eq
 8007a02:	600b      	streq	r3, [r1, #0]
 8007a04:	6053      	strne	r3, [r2, #4]
 8007a06:	4630      	mov	r0, r6
 8007a08:	f001 fee6 	bl	80097d8 <__malloc_unlock>
 8007a0c:	f104 000b 	add.w	r0, r4, #11
 8007a10:	1d23      	adds	r3, r4, #4
 8007a12:	f020 0007 	bic.w	r0, r0, #7
 8007a16:	1ac2      	subs	r2, r0, r3
 8007a18:	d0cc      	beq.n	80079b4 <_malloc_r+0x20>
 8007a1a:	1a1b      	subs	r3, r3, r0
 8007a1c:	50a3      	str	r3, [r4, r2]
 8007a1e:	e7c9      	b.n	80079b4 <_malloc_r+0x20>
 8007a20:	4622      	mov	r2, r4
 8007a22:	6864      	ldr	r4, [r4, #4]
 8007a24:	e7cc      	b.n	80079c0 <_malloc_r+0x2c>
 8007a26:	1cc4      	adds	r4, r0, #3
 8007a28:	f024 0403 	bic.w	r4, r4, #3
 8007a2c:	42a0      	cmp	r0, r4
 8007a2e:	d0e3      	beq.n	80079f8 <_malloc_r+0x64>
 8007a30:	1a21      	subs	r1, r4, r0
 8007a32:	4630      	mov	r0, r6
 8007a34:	f000 fd00 	bl	8008438 <_sbrk_r>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d1dd      	bne.n	80079f8 <_malloc_r+0x64>
 8007a3c:	e7cf      	b.n	80079de <_malloc_r+0x4a>
 8007a3e:	bf00      	nop
 8007a40:	200003a0 	.word	0x200003a0
 8007a44:	200003a4 	.word	0x200003a4

08007a48 <__cvt>:
 8007a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a4c:	ec55 4b10 	vmov	r4, r5, d0
 8007a50:	2d00      	cmp	r5, #0
 8007a52:	460e      	mov	r6, r1
 8007a54:	4619      	mov	r1, r3
 8007a56:	462b      	mov	r3, r5
 8007a58:	bfbb      	ittet	lt
 8007a5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a5e:	461d      	movlt	r5, r3
 8007a60:	2300      	movge	r3, #0
 8007a62:	232d      	movlt	r3, #45	; 0x2d
 8007a64:	700b      	strb	r3, [r1, #0]
 8007a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a6c:	4691      	mov	r9, r2
 8007a6e:	f023 0820 	bic.w	r8, r3, #32
 8007a72:	bfbc      	itt	lt
 8007a74:	4622      	movlt	r2, r4
 8007a76:	4614      	movlt	r4, r2
 8007a78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a7c:	d005      	beq.n	8007a8a <__cvt+0x42>
 8007a7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a82:	d100      	bne.n	8007a86 <__cvt+0x3e>
 8007a84:	3601      	adds	r6, #1
 8007a86:	2102      	movs	r1, #2
 8007a88:	e000      	b.n	8007a8c <__cvt+0x44>
 8007a8a:	2103      	movs	r1, #3
 8007a8c:	ab03      	add	r3, sp, #12
 8007a8e:	9301      	str	r3, [sp, #4]
 8007a90:	ab02      	add	r3, sp, #8
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	ec45 4b10 	vmov	d0, r4, r5
 8007a98:	4653      	mov	r3, sl
 8007a9a:	4632      	mov	r2, r6
 8007a9c:	f000 ff54 	bl	8008948 <_dtoa_r>
 8007aa0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007aa4:	4607      	mov	r7, r0
 8007aa6:	d102      	bne.n	8007aae <__cvt+0x66>
 8007aa8:	f019 0f01 	tst.w	r9, #1
 8007aac:	d022      	beq.n	8007af4 <__cvt+0xac>
 8007aae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ab2:	eb07 0906 	add.w	r9, r7, r6
 8007ab6:	d110      	bne.n	8007ada <__cvt+0x92>
 8007ab8:	783b      	ldrb	r3, [r7, #0]
 8007aba:	2b30      	cmp	r3, #48	; 0x30
 8007abc:	d10a      	bne.n	8007ad4 <__cvt+0x8c>
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	f7f8 ffff 	bl	8000ac8 <__aeabi_dcmpeq>
 8007aca:	b918      	cbnz	r0, 8007ad4 <__cvt+0x8c>
 8007acc:	f1c6 0601 	rsb	r6, r6, #1
 8007ad0:	f8ca 6000 	str.w	r6, [sl]
 8007ad4:	f8da 3000 	ldr.w	r3, [sl]
 8007ad8:	4499      	add	r9, r3
 8007ada:	2200      	movs	r2, #0
 8007adc:	2300      	movs	r3, #0
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	f7f8 fff1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ae6:	b108      	cbz	r0, 8007aec <__cvt+0xa4>
 8007ae8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007aec:	2230      	movs	r2, #48	; 0x30
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	454b      	cmp	r3, r9
 8007af2:	d307      	bcc.n	8007b04 <__cvt+0xbc>
 8007af4:	9b03      	ldr	r3, [sp, #12]
 8007af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007af8:	1bdb      	subs	r3, r3, r7
 8007afa:	4638      	mov	r0, r7
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	b004      	add	sp, #16
 8007b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b04:	1c59      	adds	r1, r3, #1
 8007b06:	9103      	str	r1, [sp, #12]
 8007b08:	701a      	strb	r2, [r3, #0]
 8007b0a:	e7f0      	b.n	8007aee <__cvt+0xa6>

08007b0c <__exponent>:
 8007b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2900      	cmp	r1, #0
 8007b12:	bfb8      	it	lt
 8007b14:	4249      	neglt	r1, r1
 8007b16:	f803 2b02 	strb.w	r2, [r3], #2
 8007b1a:	bfb4      	ite	lt
 8007b1c:	222d      	movlt	r2, #45	; 0x2d
 8007b1e:	222b      	movge	r2, #43	; 0x2b
 8007b20:	2909      	cmp	r1, #9
 8007b22:	7042      	strb	r2, [r0, #1]
 8007b24:	dd2a      	ble.n	8007b7c <__exponent+0x70>
 8007b26:	f10d 0407 	add.w	r4, sp, #7
 8007b2a:	46a4      	mov	ip, r4
 8007b2c:	270a      	movs	r7, #10
 8007b2e:	46a6      	mov	lr, r4
 8007b30:	460a      	mov	r2, r1
 8007b32:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b36:	fb07 1516 	mls	r5, r7, r6, r1
 8007b3a:	3530      	adds	r5, #48	; 0x30
 8007b3c:	2a63      	cmp	r2, #99	; 0x63
 8007b3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007b46:	4631      	mov	r1, r6
 8007b48:	dcf1      	bgt.n	8007b2e <__exponent+0x22>
 8007b4a:	3130      	adds	r1, #48	; 0x30
 8007b4c:	f1ae 0502 	sub.w	r5, lr, #2
 8007b50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007b54:	1c44      	adds	r4, r0, #1
 8007b56:	4629      	mov	r1, r5
 8007b58:	4561      	cmp	r1, ip
 8007b5a:	d30a      	bcc.n	8007b72 <__exponent+0x66>
 8007b5c:	f10d 0209 	add.w	r2, sp, #9
 8007b60:	eba2 020e 	sub.w	r2, r2, lr
 8007b64:	4565      	cmp	r5, ip
 8007b66:	bf88      	it	hi
 8007b68:	2200      	movhi	r2, #0
 8007b6a:	4413      	add	r3, r2
 8007b6c:	1a18      	subs	r0, r3, r0
 8007b6e:	b003      	add	sp, #12
 8007b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007b7a:	e7ed      	b.n	8007b58 <__exponent+0x4c>
 8007b7c:	2330      	movs	r3, #48	; 0x30
 8007b7e:	3130      	adds	r1, #48	; 0x30
 8007b80:	7083      	strb	r3, [r0, #2]
 8007b82:	70c1      	strb	r1, [r0, #3]
 8007b84:	1d03      	adds	r3, r0, #4
 8007b86:	e7f1      	b.n	8007b6c <__exponent+0x60>

08007b88 <_printf_float>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	ed2d 8b02 	vpush	{d8}
 8007b90:	b08d      	sub	sp, #52	; 0x34
 8007b92:	460c      	mov	r4, r1
 8007b94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b98:	4616      	mov	r6, r2
 8007b9a:	461f      	mov	r7, r3
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	f001 fd93 	bl	80096c8 <_localeconv_r>
 8007ba2:	f8d0 a000 	ldr.w	sl, [r0]
 8007ba6:	4650      	mov	r0, sl
 8007ba8:	f7f8 fb12 	bl	80001d0 <strlen>
 8007bac:	2300      	movs	r3, #0
 8007bae:	930a      	str	r3, [sp, #40]	; 0x28
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	9305      	str	r3, [sp, #20]
 8007bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8007bb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007bbc:	3307      	adds	r3, #7
 8007bbe:	f023 0307 	bic.w	r3, r3, #7
 8007bc2:	f103 0208 	add.w	r2, r3, #8
 8007bc6:	f8c8 2000 	str.w	r2, [r8]
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007bd2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007bd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bda:	9307      	str	r3, [sp, #28]
 8007bdc:	f8cd 8018 	str.w	r8, [sp, #24]
 8007be0:	ee08 0a10 	vmov	s16, r0
 8007be4:	4b9f      	ldr	r3, [pc, #636]	; (8007e64 <_printf_float+0x2dc>)
 8007be6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bea:	f04f 32ff 	mov.w	r2, #4294967295
 8007bee:	f7f8 ff9d 	bl	8000b2c <__aeabi_dcmpun>
 8007bf2:	bb88      	cbnz	r0, 8007c58 <_printf_float+0xd0>
 8007bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bf8:	4b9a      	ldr	r3, [pc, #616]	; (8007e64 <_printf_float+0x2dc>)
 8007bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfe:	f7f8 ff77 	bl	8000af0 <__aeabi_dcmple>
 8007c02:	bb48      	cbnz	r0, 8007c58 <_printf_float+0xd0>
 8007c04:	2200      	movs	r2, #0
 8007c06:	2300      	movs	r3, #0
 8007c08:	4640      	mov	r0, r8
 8007c0a:	4649      	mov	r1, r9
 8007c0c:	f7f8 ff66 	bl	8000adc <__aeabi_dcmplt>
 8007c10:	b110      	cbz	r0, 8007c18 <_printf_float+0x90>
 8007c12:	232d      	movs	r3, #45	; 0x2d
 8007c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c18:	4b93      	ldr	r3, [pc, #588]	; (8007e68 <_printf_float+0x2e0>)
 8007c1a:	4894      	ldr	r0, [pc, #592]	; (8007e6c <_printf_float+0x2e4>)
 8007c1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c20:	bf94      	ite	ls
 8007c22:	4698      	movls	r8, r3
 8007c24:	4680      	movhi	r8, r0
 8007c26:	2303      	movs	r3, #3
 8007c28:	6123      	str	r3, [r4, #16]
 8007c2a:	9b05      	ldr	r3, [sp, #20]
 8007c2c:	f023 0204 	bic.w	r2, r3, #4
 8007c30:	6022      	str	r2, [r4, #0]
 8007c32:	f04f 0900 	mov.w	r9, #0
 8007c36:	9700      	str	r7, [sp, #0]
 8007c38:	4633      	mov	r3, r6
 8007c3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 f9d8 	bl	8007ff4 <_printf_common>
 8007c44:	3001      	adds	r0, #1
 8007c46:	f040 8090 	bne.w	8007d6a <_printf_float+0x1e2>
 8007c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4e:	b00d      	add	sp, #52	; 0x34
 8007c50:	ecbd 8b02 	vpop	{d8}
 8007c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c58:	4642      	mov	r2, r8
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	4649      	mov	r1, r9
 8007c60:	f7f8 ff64 	bl	8000b2c <__aeabi_dcmpun>
 8007c64:	b140      	cbz	r0, 8007c78 <_printf_float+0xf0>
 8007c66:	464b      	mov	r3, r9
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bfbc      	itt	lt
 8007c6c:	232d      	movlt	r3, #45	; 0x2d
 8007c6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c72:	487f      	ldr	r0, [pc, #508]	; (8007e70 <_printf_float+0x2e8>)
 8007c74:	4b7f      	ldr	r3, [pc, #508]	; (8007e74 <_printf_float+0x2ec>)
 8007c76:	e7d1      	b.n	8007c1c <_printf_float+0x94>
 8007c78:	6863      	ldr	r3, [r4, #4]
 8007c7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007c7e:	9206      	str	r2, [sp, #24]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	d13f      	bne.n	8007d04 <_printf_float+0x17c>
 8007c84:	2306      	movs	r3, #6
 8007c86:	6063      	str	r3, [r4, #4]
 8007c88:	9b05      	ldr	r3, [sp, #20]
 8007c8a:	6861      	ldr	r1, [r4, #4]
 8007c8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007c90:	2300      	movs	r3, #0
 8007c92:	9303      	str	r3, [sp, #12]
 8007c94:	ab0a      	add	r3, sp, #40	; 0x28
 8007c96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007c9a:	ab09      	add	r3, sp, #36	; 0x24
 8007c9c:	ec49 8b10 	vmov	d0, r8, r9
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	6022      	str	r2, [r4, #0]
 8007ca4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ca8:	4628      	mov	r0, r5
 8007caa:	f7ff fecd 	bl	8007a48 <__cvt>
 8007cae:	9b06      	ldr	r3, [sp, #24]
 8007cb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cb2:	2b47      	cmp	r3, #71	; 0x47
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	d108      	bne.n	8007cca <_printf_float+0x142>
 8007cb8:	1cc8      	adds	r0, r1, #3
 8007cba:	db02      	blt.n	8007cc2 <_printf_float+0x13a>
 8007cbc:	6863      	ldr	r3, [r4, #4]
 8007cbe:	4299      	cmp	r1, r3
 8007cc0:	dd41      	ble.n	8007d46 <_printf_float+0x1be>
 8007cc2:	f1ab 0b02 	sub.w	fp, fp, #2
 8007cc6:	fa5f fb8b 	uxtb.w	fp, fp
 8007cca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007cce:	d820      	bhi.n	8007d12 <_printf_float+0x18a>
 8007cd0:	3901      	subs	r1, #1
 8007cd2:	465a      	mov	r2, fp
 8007cd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007cd8:	9109      	str	r1, [sp, #36]	; 0x24
 8007cda:	f7ff ff17 	bl	8007b0c <__exponent>
 8007cde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ce0:	1813      	adds	r3, r2, r0
 8007ce2:	2a01      	cmp	r2, #1
 8007ce4:	4681      	mov	r9, r0
 8007ce6:	6123      	str	r3, [r4, #16]
 8007ce8:	dc02      	bgt.n	8007cf0 <_printf_float+0x168>
 8007cea:	6822      	ldr	r2, [r4, #0]
 8007cec:	07d2      	lsls	r2, r2, #31
 8007cee:	d501      	bpl.n	8007cf4 <_printf_float+0x16c>
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	6123      	str	r3, [r4, #16]
 8007cf4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d09c      	beq.n	8007c36 <_printf_float+0xae>
 8007cfc:	232d      	movs	r3, #45	; 0x2d
 8007cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d02:	e798      	b.n	8007c36 <_printf_float+0xae>
 8007d04:	9a06      	ldr	r2, [sp, #24]
 8007d06:	2a47      	cmp	r2, #71	; 0x47
 8007d08:	d1be      	bne.n	8007c88 <_printf_float+0x100>
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1bc      	bne.n	8007c88 <_printf_float+0x100>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e7b9      	b.n	8007c86 <_printf_float+0xfe>
 8007d12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d16:	d118      	bne.n	8007d4a <_printf_float+0x1c2>
 8007d18:	2900      	cmp	r1, #0
 8007d1a:	6863      	ldr	r3, [r4, #4]
 8007d1c:	dd0b      	ble.n	8007d36 <_printf_float+0x1ae>
 8007d1e:	6121      	str	r1, [r4, #16]
 8007d20:	b913      	cbnz	r3, 8007d28 <_printf_float+0x1a0>
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	07d0      	lsls	r0, r2, #31
 8007d26:	d502      	bpl.n	8007d2e <_printf_float+0x1a6>
 8007d28:	3301      	adds	r3, #1
 8007d2a:	440b      	add	r3, r1
 8007d2c:	6123      	str	r3, [r4, #16]
 8007d2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d30:	f04f 0900 	mov.w	r9, #0
 8007d34:	e7de      	b.n	8007cf4 <_printf_float+0x16c>
 8007d36:	b913      	cbnz	r3, 8007d3e <_printf_float+0x1b6>
 8007d38:	6822      	ldr	r2, [r4, #0]
 8007d3a:	07d2      	lsls	r2, r2, #31
 8007d3c:	d501      	bpl.n	8007d42 <_printf_float+0x1ba>
 8007d3e:	3302      	adds	r3, #2
 8007d40:	e7f4      	b.n	8007d2c <_printf_float+0x1a4>
 8007d42:	2301      	movs	r3, #1
 8007d44:	e7f2      	b.n	8007d2c <_printf_float+0x1a4>
 8007d46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d4c:	4299      	cmp	r1, r3
 8007d4e:	db05      	blt.n	8007d5c <_printf_float+0x1d4>
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	6121      	str	r1, [r4, #16]
 8007d54:	07d8      	lsls	r0, r3, #31
 8007d56:	d5ea      	bpl.n	8007d2e <_printf_float+0x1a6>
 8007d58:	1c4b      	adds	r3, r1, #1
 8007d5a:	e7e7      	b.n	8007d2c <_printf_float+0x1a4>
 8007d5c:	2900      	cmp	r1, #0
 8007d5e:	bfd4      	ite	le
 8007d60:	f1c1 0202 	rsble	r2, r1, #2
 8007d64:	2201      	movgt	r2, #1
 8007d66:	4413      	add	r3, r2
 8007d68:	e7e0      	b.n	8007d2c <_printf_float+0x1a4>
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	055a      	lsls	r2, r3, #21
 8007d6e:	d407      	bmi.n	8007d80 <_printf_float+0x1f8>
 8007d70:	6923      	ldr	r3, [r4, #16]
 8007d72:	4642      	mov	r2, r8
 8007d74:	4631      	mov	r1, r6
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d12c      	bne.n	8007dd8 <_printf_float+0x250>
 8007d7e:	e764      	b.n	8007c4a <_printf_float+0xc2>
 8007d80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d84:	f240 80e0 	bls.w	8007f48 <_printf_float+0x3c0>
 8007d88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f7f8 fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d034      	beq.n	8007e02 <_printf_float+0x27a>
 8007d98:	4a37      	ldr	r2, [pc, #220]	; (8007e78 <_printf_float+0x2f0>)
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4628      	mov	r0, r5
 8007da0:	47b8      	blx	r7
 8007da2:	3001      	adds	r0, #1
 8007da4:	f43f af51 	beq.w	8007c4a <_printf_float+0xc2>
 8007da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dac:	429a      	cmp	r2, r3
 8007dae:	db02      	blt.n	8007db6 <_printf_float+0x22e>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	07d8      	lsls	r0, r3, #31
 8007db4:	d510      	bpl.n	8007dd8 <_printf_float+0x250>
 8007db6:	ee18 3a10 	vmov	r3, s16
 8007dba:	4652      	mov	r2, sl
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	47b8      	blx	r7
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	f43f af41 	beq.w	8007c4a <_printf_float+0xc2>
 8007dc8:	f04f 0800 	mov.w	r8, #0
 8007dcc:	f104 091a 	add.w	r9, r4, #26
 8007dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	4543      	cmp	r3, r8
 8007dd6:	dc09      	bgt.n	8007dec <_printf_float+0x264>
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	079b      	lsls	r3, r3, #30
 8007ddc:	f100 8105 	bmi.w	8007fea <_printf_float+0x462>
 8007de0:	68e0      	ldr	r0, [r4, #12]
 8007de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de4:	4298      	cmp	r0, r3
 8007de6:	bfb8      	it	lt
 8007de8:	4618      	movlt	r0, r3
 8007dea:	e730      	b.n	8007c4e <_printf_float+0xc6>
 8007dec:	2301      	movs	r3, #1
 8007dee:	464a      	mov	r2, r9
 8007df0:	4631      	mov	r1, r6
 8007df2:	4628      	mov	r0, r5
 8007df4:	47b8      	blx	r7
 8007df6:	3001      	adds	r0, #1
 8007df8:	f43f af27 	beq.w	8007c4a <_printf_float+0xc2>
 8007dfc:	f108 0801 	add.w	r8, r8, #1
 8007e00:	e7e6      	b.n	8007dd0 <_printf_float+0x248>
 8007e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dc39      	bgt.n	8007e7c <_printf_float+0x2f4>
 8007e08:	4a1b      	ldr	r2, [pc, #108]	; (8007e78 <_printf_float+0x2f0>)
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	4628      	mov	r0, r5
 8007e10:	47b8      	blx	r7
 8007e12:	3001      	adds	r0, #1
 8007e14:	f43f af19 	beq.w	8007c4a <_printf_float+0xc2>
 8007e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	d102      	bne.n	8007e26 <_printf_float+0x29e>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	07d9      	lsls	r1, r3, #31
 8007e24:	d5d8      	bpl.n	8007dd8 <_printf_float+0x250>
 8007e26:	ee18 3a10 	vmov	r3, s16
 8007e2a:	4652      	mov	r2, sl
 8007e2c:	4631      	mov	r1, r6
 8007e2e:	4628      	mov	r0, r5
 8007e30:	47b8      	blx	r7
 8007e32:	3001      	adds	r0, #1
 8007e34:	f43f af09 	beq.w	8007c4a <_printf_float+0xc2>
 8007e38:	f04f 0900 	mov.w	r9, #0
 8007e3c:	f104 0a1a 	add.w	sl, r4, #26
 8007e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e42:	425b      	negs	r3, r3
 8007e44:	454b      	cmp	r3, r9
 8007e46:	dc01      	bgt.n	8007e4c <_printf_float+0x2c4>
 8007e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e4a:	e792      	b.n	8007d72 <_printf_float+0x1ea>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	4652      	mov	r2, sl
 8007e50:	4631      	mov	r1, r6
 8007e52:	4628      	mov	r0, r5
 8007e54:	47b8      	blx	r7
 8007e56:	3001      	adds	r0, #1
 8007e58:	f43f aef7 	beq.w	8007c4a <_printf_float+0xc2>
 8007e5c:	f109 0901 	add.w	r9, r9, #1
 8007e60:	e7ee      	b.n	8007e40 <_printf_float+0x2b8>
 8007e62:	bf00      	nop
 8007e64:	7fefffff 	.word	0x7fefffff
 8007e68:	0800aeac 	.word	0x0800aeac
 8007e6c:	0800aeb0 	.word	0x0800aeb0
 8007e70:	0800aeb8 	.word	0x0800aeb8
 8007e74:	0800aeb4 	.word	0x0800aeb4
 8007e78:	0800aebc 	.word	0x0800aebc
 8007e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e80:	429a      	cmp	r2, r3
 8007e82:	bfa8      	it	ge
 8007e84:	461a      	movge	r2, r3
 8007e86:	2a00      	cmp	r2, #0
 8007e88:	4691      	mov	r9, r2
 8007e8a:	dc37      	bgt.n	8007efc <_printf_float+0x374>
 8007e8c:	f04f 0b00 	mov.w	fp, #0
 8007e90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e94:	f104 021a 	add.w	r2, r4, #26
 8007e98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e9a:	9305      	str	r3, [sp, #20]
 8007e9c:	eba3 0309 	sub.w	r3, r3, r9
 8007ea0:	455b      	cmp	r3, fp
 8007ea2:	dc33      	bgt.n	8007f0c <_printf_float+0x384>
 8007ea4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	db3b      	blt.n	8007f24 <_printf_float+0x39c>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	07da      	lsls	r2, r3, #31
 8007eb0:	d438      	bmi.n	8007f24 <_printf_float+0x39c>
 8007eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eb4:	9b05      	ldr	r3, [sp, #20]
 8007eb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	eba2 0901 	sub.w	r9, r2, r1
 8007ebe:	4599      	cmp	r9, r3
 8007ec0:	bfa8      	it	ge
 8007ec2:	4699      	movge	r9, r3
 8007ec4:	f1b9 0f00 	cmp.w	r9, #0
 8007ec8:	dc35      	bgt.n	8007f36 <_printf_float+0x3ae>
 8007eca:	f04f 0800 	mov.w	r8, #0
 8007ece:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ed2:	f104 0a1a 	add.w	sl, r4, #26
 8007ed6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eda:	1a9b      	subs	r3, r3, r2
 8007edc:	eba3 0309 	sub.w	r3, r3, r9
 8007ee0:	4543      	cmp	r3, r8
 8007ee2:	f77f af79 	ble.w	8007dd8 <_printf_float+0x250>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	4652      	mov	r2, sl
 8007eea:	4631      	mov	r1, r6
 8007eec:	4628      	mov	r0, r5
 8007eee:	47b8      	blx	r7
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	f43f aeaa 	beq.w	8007c4a <_printf_float+0xc2>
 8007ef6:	f108 0801 	add.w	r8, r8, #1
 8007efa:	e7ec      	b.n	8007ed6 <_printf_float+0x34e>
 8007efc:	4613      	mov	r3, r2
 8007efe:	4631      	mov	r1, r6
 8007f00:	4642      	mov	r2, r8
 8007f02:	4628      	mov	r0, r5
 8007f04:	47b8      	blx	r7
 8007f06:	3001      	adds	r0, #1
 8007f08:	d1c0      	bne.n	8007e8c <_printf_float+0x304>
 8007f0a:	e69e      	b.n	8007c4a <_printf_float+0xc2>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	4631      	mov	r1, r6
 8007f10:	4628      	mov	r0, r5
 8007f12:	9205      	str	r2, [sp, #20]
 8007f14:	47b8      	blx	r7
 8007f16:	3001      	adds	r0, #1
 8007f18:	f43f ae97 	beq.w	8007c4a <_printf_float+0xc2>
 8007f1c:	9a05      	ldr	r2, [sp, #20]
 8007f1e:	f10b 0b01 	add.w	fp, fp, #1
 8007f22:	e7b9      	b.n	8007e98 <_printf_float+0x310>
 8007f24:	ee18 3a10 	vmov	r3, s16
 8007f28:	4652      	mov	r2, sl
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b8      	blx	r7
 8007f30:	3001      	adds	r0, #1
 8007f32:	d1be      	bne.n	8007eb2 <_printf_float+0x32a>
 8007f34:	e689      	b.n	8007c4a <_printf_float+0xc2>
 8007f36:	9a05      	ldr	r2, [sp, #20]
 8007f38:	464b      	mov	r3, r9
 8007f3a:	4442      	add	r2, r8
 8007f3c:	4631      	mov	r1, r6
 8007f3e:	4628      	mov	r0, r5
 8007f40:	47b8      	blx	r7
 8007f42:	3001      	adds	r0, #1
 8007f44:	d1c1      	bne.n	8007eca <_printf_float+0x342>
 8007f46:	e680      	b.n	8007c4a <_printf_float+0xc2>
 8007f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f4a:	2a01      	cmp	r2, #1
 8007f4c:	dc01      	bgt.n	8007f52 <_printf_float+0x3ca>
 8007f4e:	07db      	lsls	r3, r3, #31
 8007f50:	d538      	bpl.n	8007fc4 <_printf_float+0x43c>
 8007f52:	2301      	movs	r3, #1
 8007f54:	4642      	mov	r2, r8
 8007f56:	4631      	mov	r1, r6
 8007f58:	4628      	mov	r0, r5
 8007f5a:	47b8      	blx	r7
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	f43f ae74 	beq.w	8007c4a <_printf_float+0xc2>
 8007f62:	ee18 3a10 	vmov	r3, s16
 8007f66:	4652      	mov	r2, sl
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f ae6b 	beq.w	8007c4a <_printf_float+0xc2>
 8007f74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f7f8 fda4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f80:	b9d8      	cbnz	r0, 8007fba <_printf_float+0x432>
 8007f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f84:	f108 0201 	add.w	r2, r8, #1
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	47b8      	blx	r7
 8007f90:	3001      	adds	r0, #1
 8007f92:	d10e      	bne.n	8007fb2 <_printf_float+0x42a>
 8007f94:	e659      	b.n	8007c4a <_printf_float+0xc2>
 8007f96:	2301      	movs	r3, #1
 8007f98:	4652      	mov	r2, sl
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	47b8      	blx	r7
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	f43f ae52 	beq.w	8007c4a <_printf_float+0xc2>
 8007fa6:	f108 0801 	add.w	r8, r8, #1
 8007faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fac:	3b01      	subs	r3, #1
 8007fae:	4543      	cmp	r3, r8
 8007fb0:	dcf1      	bgt.n	8007f96 <_printf_float+0x40e>
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007fb8:	e6dc      	b.n	8007d74 <_printf_float+0x1ec>
 8007fba:	f04f 0800 	mov.w	r8, #0
 8007fbe:	f104 0a1a 	add.w	sl, r4, #26
 8007fc2:	e7f2      	b.n	8007faa <_printf_float+0x422>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	4642      	mov	r2, r8
 8007fc8:	e7df      	b.n	8007f8a <_printf_float+0x402>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	464a      	mov	r2, r9
 8007fce:	4631      	mov	r1, r6
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	47b8      	blx	r7
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	f43f ae38 	beq.w	8007c4a <_printf_float+0xc2>
 8007fda:	f108 0801 	add.w	r8, r8, #1
 8007fde:	68e3      	ldr	r3, [r4, #12]
 8007fe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fe2:	1a5b      	subs	r3, r3, r1
 8007fe4:	4543      	cmp	r3, r8
 8007fe6:	dcf0      	bgt.n	8007fca <_printf_float+0x442>
 8007fe8:	e6fa      	b.n	8007de0 <_printf_float+0x258>
 8007fea:	f04f 0800 	mov.w	r8, #0
 8007fee:	f104 0919 	add.w	r9, r4, #25
 8007ff2:	e7f4      	b.n	8007fde <_printf_float+0x456>

08007ff4 <_printf_common>:
 8007ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff8:	4616      	mov	r6, r2
 8007ffa:	4699      	mov	r9, r3
 8007ffc:	688a      	ldr	r2, [r1, #8]
 8007ffe:	690b      	ldr	r3, [r1, #16]
 8008000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008004:	4293      	cmp	r3, r2
 8008006:	bfb8      	it	lt
 8008008:	4613      	movlt	r3, r2
 800800a:	6033      	str	r3, [r6, #0]
 800800c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008010:	4607      	mov	r7, r0
 8008012:	460c      	mov	r4, r1
 8008014:	b10a      	cbz	r2, 800801a <_printf_common+0x26>
 8008016:	3301      	adds	r3, #1
 8008018:	6033      	str	r3, [r6, #0]
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	0699      	lsls	r1, r3, #26
 800801e:	bf42      	ittt	mi
 8008020:	6833      	ldrmi	r3, [r6, #0]
 8008022:	3302      	addmi	r3, #2
 8008024:	6033      	strmi	r3, [r6, #0]
 8008026:	6825      	ldr	r5, [r4, #0]
 8008028:	f015 0506 	ands.w	r5, r5, #6
 800802c:	d106      	bne.n	800803c <_printf_common+0x48>
 800802e:	f104 0a19 	add.w	sl, r4, #25
 8008032:	68e3      	ldr	r3, [r4, #12]
 8008034:	6832      	ldr	r2, [r6, #0]
 8008036:	1a9b      	subs	r3, r3, r2
 8008038:	42ab      	cmp	r3, r5
 800803a:	dc26      	bgt.n	800808a <_printf_common+0x96>
 800803c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008040:	1e13      	subs	r3, r2, #0
 8008042:	6822      	ldr	r2, [r4, #0]
 8008044:	bf18      	it	ne
 8008046:	2301      	movne	r3, #1
 8008048:	0692      	lsls	r2, r2, #26
 800804a:	d42b      	bmi.n	80080a4 <_printf_common+0xb0>
 800804c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008050:	4649      	mov	r1, r9
 8008052:	4638      	mov	r0, r7
 8008054:	47c0      	blx	r8
 8008056:	3001      	adds	r0, #1
 8008058:	d01e      	beq.n	8008098 <_printf_common+0xa4>
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	68e5      	ldr	r5, [r4, #12]
 800805e:	6832      	ldr	r2, [r6, #0]
 8008060:	f003 0306 	and.w	r3, r3, #6
 8008064:	2b04      	cmp	r3, #4
 8008066:	bf08      	it	eq
 8008068:	1aad      	subeq	r5, r5, r2
 800806a:	68a3      	ldr	r3, [r4, #8]
 800806c:	6922      	ldr	r2, [r4, #16]
 800806e:	bf0c      	ite	eq
 8008070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008074:	2500      	movne	r5, #0
 8008076:	4293      	cmp	r3, r2
 8008078:	bfc4      	itt	gt
 800807a:	1a9b      	subgt	r3, r3, r2
 800807c:	18ed      	addgt	r5, r5, r3
 800807e:	2600      	movs	r6, #0
 8008080:	341a      	adds	r4, #26
 8008082:	42b5      	cmp	r5, r6
 8008084:	d11a      	bne.n	80080bc <_printf_common+0xc8>
 8008086:	2000      	movs	r0, #0
 8008088:	e008      	b.n	800809c <_printf_common+0xa8>
 800808a:	2301      	movs	r3, #1
 800808c:	4652      	mov	r2, sl
 800808e:	4649      	mov	r1, r9
 8008090:	4638      	mov	r0, r7
 8008092:	47c0      	blx	r8
 8008094:	3001      	adds	r0, #1
 8008096:	d103      	bne.n	80080a0 <_printf_common+0xac>
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a0:	3501      	adds	r5, #1
 80080a2:	e7c6      	b.n	8008032 <_printf_common+0x3e>
 80080a4:	18e1      	adds	r1, r4, r3
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	2030      	movs	r0, #48	; 0x30
 80080aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080ae:	4422      	add	r2, r4
 80080b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080b8:	3302      	adds	r3, #2
 80080ba:	e7c7      	b.n	800804c <_printf_common+0x58>
 80080bc:	2301      	movs	r3, #1
 80080be:	4622      	mov	r2, r4
 80080c0:	4649      	mov	r1, r9
 80080c2:	4638      	mov	r0, r7
 80080c4:	47c0      	blx	r8
 80080c6:	3001      	adds	r0, #1
 80080c8:	d0e6      	beq.n	8008098 <_printf_common+0xa4>
 80080ca:	3601      	adds	r6, #1
 80080cc:	e7d9      	b.n	8008082 <_printf_common+0x8e>
	...

080080d0 <_printf_i>:
 80080d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080d4:	460c      	mov	r4, r1
 80080d6:	4691      	mov	r9, r2
 80080d8:	7e27      	ldrb	r7, [r4, #24]
 80080da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80080dc:	2f78      	cmp	r7, #120	; 0x78
 80080de:	4680      	mov	r8, r0
 80080e0:	469a      	mov	sl, r3
 80080e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080e6:	d807      	bhi.n	80080f8 <_printf_i+0x28>
 80080e8:	2f62      	cmp	r7, #98	; 0x62
 80080ea:	d80a      	bhi.n	8008102 <_printf_i+0x32>
 80080ec:	2f00      	cmp	r7, #0
 80080ee:	f000 80d8 	beq.w	80082a2 <_printf_i+0x1d2>
 80080f2:	2f58      	cmp	r7, #88	; 0x58
 80080f4:	f000 80a3 	beq.w	800823e <_printf_i+0x16e>
 80080f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80080fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008100:	e03a      	b.n	8008178 <_printf_i+0xa8>
 8008102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008106:	2b15      	cmp	r3, #21
 8008108:	d8f6      	bhi.n	80080f8 <_printf_i+0x28>
 800810a:	a001      	add	r0, pc, #4	; (adr r0, 8008110 <_printf_i+0x40>)
 800810c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008110:	08008169 	.word	0x08008169
 8008114:	0800817d 	.word	0x0800817d
 8008118:	080080f9 	.word	0x080080f9
 800811c:	080080f9 	.word	0x080080f9
 8008120:	080080f9 	.word	0x080080f9
 8008124:	080080f9 	.word	0x080080f9
 8008128:	0800817d 	.word	0x0800817d
 800812c:	080080f9 	.word	0x080080f9
 8008130:	080080f9 	.word	0x080080f9
 8008134:	080080f9 	.word	0x080080f9
 8008138:	080080f9 	.word	0x080080f9
 800813c:	08008289 	.word	0x08008289
 8008140:	080081ad 	.word	0x080081ad
 8008144:	0800826b 	.word	0x0800826b
 8008148:	080080f9 	.word	0x080080f9
 800814c:	080080f9 	.word	0x080080f9
 8008150:	080082ab 	.word	0x080082ab
 8008154:	080080f9 	.word	0x080080f9
 8008158:	080081ad 	.word	0x080081ad
 800815c:	080080f9 	.word	0x080080f9
 8008160:	080080f9 	.word	0x080080f9
 8008164:	08008273 	.word	0x08008273
 8008168:	680b      	ldr	r3, [r1, #0]
 800816a:	1d1a      	adds	r2, r3, #4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	600a      	str	r2, [r1, #0]
 8008170:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008178:	2301      	movs	r3, #1
 800817a:	e0a3      	b.n	80082c4 <_printf_i+0x1f4>
 800817c:	6825      	ldr	r5, [r4, #0]
 800817e:	6808      	ldr	r0, [r1, #0]
 8008180:	062e      	lsls	r6, r5, #24
 8008182:	f100 0304 	add.w	r3, r0, #4
 8008186:	d50a      	bpl.n	800819e <_printf_i+0xce>
 8008188:	6805      	ldr	r5, [r0, #0]
 800818a:	600b      	str	r3, [r1, #0]
 800818c:	2d00      	cmp	r5, #0
 800818e:	da03      	bge.n	8008198 <_printf_i+0xc8>
 8008190:	232d      	movs	r3, #45	; 0x2d
 8008192:	426d      	negs	r5, r5
 8008194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008198:	485e      	ldr	r0, [pc, #376]	; (8008314 <_printf_i+0x244>)
 800819a:	230a      	movs	r3, #10
 800819c:	e019      	b.n	80081d2 <_printf_i+0x102>
 800819e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80081a2:	6805      	ldr	r5, [r0, #0]
 80081a4:	600b      	str	r3, [r1, #0]
 80081a6:	bf18      	it	ne
 80081a8:	b22d      	sxthne	r5, r5
 80081aa:	e7ef      	b.n	800818c <_printf_i+0xbc>
 80081ac:	680b      	ldr	r3, [r1, #0]
 80081ae:	6825      	ldr	r5, [r4, #0]
 80081b0:	1d18      	adds	r0, r3, #4
 80081b2:	6008      	str	r0, [r1, #0]
 80081b4:	0628      	lsls	r0, r5, #24
 80081b6:	d501      	bpl.n	80081bc <_printf_i+0xec>
 80081b8:	681d      	ldr	r5, [r3, #0]
 80081ba:	e002      	b.n	80081c2 <_printf_i+0xf2>
 80081bc:	0669      	lsls	r1, r5, #25
 80081be:	d5fb      	bpl.n	80081b8 <_printf_i+0xe8>
 80081c0:	881d      	ldrh	r5, [r3, #0]
 80081c2:	4854      	ldr	r0, [pc, #336]	; (8008314 <_printf_i+0x244>)
 80081c4:	2f6f      	cmp	r7, #111	; 0x6f
 80081c6:	bf0c      	ite	eq
 80081c8:	2308      	moveq	r3, #8
 80081ca:	230a      	movne	r3, #10
 80081cc:	2100      	movs	r1, #0
 80081ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081d2:	6866      	ldr	r6, [r4, #4]
 80081d4:	60a6      	str	r6, [r4, #8]
 80081d6:	2e00      	cmp	r6, #0
 80081d8:	bfa2      	ittt	ge
 80081da:	6821      	ldrge	r1, [r4, #0]
 80081dc:	f021 0104 	bicge.w	r1, r1, #4
 80081e0:	6021      	strge	r1, [r4, #0]
 80081e2:	b90d      	cbnz	r5, 80081e8 <_printf_i+0x118>
 80081e4:	2e00      	cmp	r6, #0
 80081e6:	d04d      	beq.n	8008284 <_printf_i+0x1b4>
 80081e8:	4616      	mov	r6, r2
 80081ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80081ee:	fb03 5711 	mls	r7, r3, r1, r5
 80081f2:	5dc7      	ldrb	r7, [r0, r7]
 80081f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081f8:	462f      	mov	r7, r5
 80081fa:	42bb      	cmp	r3, r7
 80081fc:	460d      	mov	r5, r1
 80081fe:	d9f4      	bls.n	80081ea <_printf_i+0x11a>
 8008200:	2b08      	cmp	r3, #8
 8008202:	d10b      	bne.n	800821c <_printf_i+0x14c>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	07df      	lsls	r7, r3, #31
 8008208:	d508      	bpl.n	800821c <_printf_i+0x14c>
 800820a:	6923      	ldr	r3, [r4, #16]
 800820c:	6861      	ldr	r1, [r4, #4]
 800820e:	4299      	cmp	r1, r3
 8008210:	bfde      	ittt	le
 8008212:	2330      	movle	r3, #48	; 0x30
 8008214:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008218:	f106 36ff 	addle.w	r6, r6, #4294967295
 800821c:	1b92      	subs	r2, r2, r6
 800821e:	6122      	str	r2, [r4, #16]
 8008220:	f8cd a000 	str.w	sl, [sp]
 8008224:	464b      	mov	r3, r9
 8008226:	aa03      	add	r2, sp, #12
 8008228:	4621      	mov	r1, r4
 800822a:	4640      	mov	r0, r8
 800822c:	f7ff fee2 	bl	8007ff4 <_printf_common>
 8008230:	3001      	adds	r0, #1
 8008232:	d14c      	bne.n	80082ce <_printf_i+0x1fe>
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	b004      	add	sp, #16
 800823a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823e:	4835      	ldr	r0, [pc, #212]	; (8008314 <_printf_i+0x244>)
 8008240:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	680e      	ldr	r6, [r1, #0]
 8008248:	061f      	lsls	r7, r3, #24
 800824a:	f856 5b04 	ldr.w	r5, [r6], #4
 800824e:	600e      	str	r6, [r1, #0]
 8008250:	d514      	bpl.n	800827c <_printf_i+0x1ac>
 8008252:	07d9      	lsls	r1, r3, #31
 8008254:	bf44      	itt	mi
 8008256:	f043 0320 	orrmi.w	r3, r3, #32
 800825a:	6023      	strmi	r3, [r4, #0]
 800825c:	b91d      	cbnz	r5, 8008266 <_printf_i+0x196>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	f023 0320 	bic.w	r3, r3, #32
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	2310      	movs	r3, #16
 8008268:	e7b0      	b.n	80081cc <_printf_i+0xfc>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	f043 0320 	orr.w	r3, r3, #32
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	2378      	movs	r3, #120	; 0x78
 8008274:	4828      	ldr	r0, [pc, #160]	; (8008318 <_printf_i+0x248>)
 8008276:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800827a:	e7e3      	b.n	8008244 <_printf_i+0x174>
 800827c:	065e      	lsls	r6, r3, #25
 800827e:	bf48      	it	mi
 8008280:	b2ad      	uxthmi	r5, r5
 8008282:	e7e6      	b.n	8008252 <_printf_i+0x182>
 8008284:	4616      	mov	r6, r2
 8008286:	e7bb      	b.n	8008200 <_printf_i+0x130>
 8008288:	680b      	ldr	r3, [r1, #0]
 800828a:	6826      	ldr	r6, [r4, #0]
 800828c:	6960      	ldr	r0, [r4, #20]
 800828e:	1d1d      	adds	r5, r3, #4
 8008290:	600d      	str	r5, [r1, #0]
 8008292:	0635      	lsls	r5, r6, #24
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	d501      	bpl.n	800829c <_printf_i+0x1cc>
 8008298:	6018      	str	r0, [r3, #0]
 800829a:	e002      	b.n	80082a2 <_printf_i+0x1d2>
 800829c:	0671      	lsls	r1, r6, #25
 800829e:	d5fb      	bpl.n	8008298 <_printf_i+0x1c8>
 80082a0:	8018      	strh	r0, [r3, #0]
 80082a2:	2300      	movs	r3, #0
 80082a4:	6123      	str	r3, [r4, #16]
 80082a6:	4616      	mov	r6, r2
 80082a8:	e7ba      	b.n	8008220 <_printf_i+0x150>
 80082aa:	680b      	ldr	r3, [r1, #0]
 80082ac:	1d1a      	adds	r2, r3, #4
 80082ae:	600a      	str	r2, [r1, #0]
 80082b0:	681e      	ldr	r6, [r3, #0]
 80082b2:	6862      	ldr	r2, [r4, #4]
 80082b4:	2100      	movs	r1, #0
 80082b6:	4630      	mov	r0, r6
 80082b8:	f7f7 ff92 	bl	80001e0 <memchr>
 80082bc:	b108      	cbz	r0, 80082c2 <_printf_i+0x1f2>
 80082be:	1b80      	subs	r0, r0, r6
 80082c0:	6060      	str	r0, [r4, #4]
 80082c2:	6863      	ldr	r3, [r4, #4]
 80082c4:	6123      	str	r3, [r4, #16]
 80082c6:	2300      	movs	r3, #0
 80082c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082cc:	e7a8      	b.n	8008220 <_printf_i+0x150>
 80082ce:	6923      	ldr	r3, [r4, #16]
 80082d0:	4632      	mov	r2, r6
 80082d2:	4649      	mov	r1, r9
 80082d4:	4640      	mov	r0, r8
 80082d6:	47d0      	blx	sl
 80082d8:	3001      	adds	r0, #1
 80082da:	d0ab      	beq.n	8008234 <_printf_i+0x164>
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	079b      	lsls	r3, r3, #30
 80082e0:	d413      	bmi.n	800830a <_printf_i+0x23a>
 80082e2:	68e0      	ldr	r0, [r4, #12]
 80082e4:	9b03      	ldr	r3, [sp, #12]
 80082e6:	4298      	cmp	r0, r3
 80082e8:	bfb8      	it	lt
 80082ea:	4618      	movlt	r0, r3
 80082ec:	e7a4      	b.n	8008238 <_printf_i+0x168>
 80082ee:	2301      	movs	r3, #1
 80082f0:	4632      	mov	r2, r6
 80082f2:	4649      	mov	r1, r9
 80082f4:	4640      	mov	r0, r8
 80082f6:	47d0      	blx	sl
 80082f8:	3001      	adds	r0, #1
 80082fa:	d09b      	beq.n	8008234 <_printf_i+0x164>
 80082fc:	3501      	adds	r5, #1
 80082fe:	68e3      	ldr	r3, [r4, #12]
 8008300:	9903      	ldr	r1, [sp, #12]
 8008302:	1a5b      	subs	r3, r3, r1
 8008304:	42ab      	cmp	r3, r5
 8008306:	dcf2      	bgt.n	80082ee <_printf_i+0x21e>
 8008308:	e7eb      	b.n	80082e2 <_printf_i+0x212>
 800830a:	2500      	movs	r5, #0
 800830c:	f104 0619 	add.w	r6, r4, #25
 8008310:	e7f5      	b.n	80082fe <_printf_i+0x22e>
 8008312:	bf00      	nop
 8008314:	0800aebe 	.word	0x0800aebe
 8008318:	0800aecf 	.word	0x0800aecf

0800831c <iprintf>:
 800831c:	b40f      	push	{r0, r1, r2, r3}
 800831e:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <iprintf+0x2c>)
 8008320:	b513      	push	{r0, r1, r4, lr}
 8008322:	681c      	ldr	r4, [r3, #0]
 8008324:	b124      	cbz	r4, 8008330 <iprintf+0x14>
 8008326:	69a3      	ldr	r3, [r4, #24]
 8008328:	b913      	cbnz	r3, 8008330 <iprintf+0x14>
 800832a:	4620      	mov	r0, r4
 800832c:	f7ff fa56 	bl	80077dc <__sinit>
 8008330:	ab05      	add	r3, sp, #20
 8008332:	9a04      	ldr	r2, [sp, #16]
 8008334:	68a1      	ldr	r1, [r4, #8]
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	4620      	mov	r0, r4
 800833a:	f001 ffb7 	bl	800a2ac <_vfiprintf_r>
 800833e:	b002      	add	sp, #8
 8008340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008344:	b004      	add	sp, #16
 8008346:	4770      	bx	lr
 8008348:	200000e0 	.word	0x200000e0

0800834c <_puts_r>:
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	460e      	mov	r6, r1
 8008350:	4605      	mov	r5, r0
 8008352:	b118      	cbz	r0, 800835c <_puts_r+0x10>
 8008354:	6983      	ldr	r3, [r0, #24]
 8008356:	b90b      	cbnz	r3, 800835c <_puts_r+0x10>
 8008358:	f7ff fa40 	bl	80077dc <__sinit>
 800835c:	69ab      	ldr	r3, [r5, #24]
 800835e:	68ac      	ldr	r4, [r5, #8]
 8008360:	b913      	cbnz	r3, 8008368 <_puts_r+0x1c>
 8008362:	4628      	mov	r0, r5
 8008364:	f7ff fa3a 	bl	80077dc <__sinit>
 8008368:	4b2c      	ldr	r3, [pc, #176]	; (800841c <_puts_r+0xd0>)
 800836a:	429c      	cmp	r4, r3
 800836c:	d120      	bne.n	80083b0 <_puts_r+0x64>
 800836e:	686c      	ldr	r4, [r5, #4]
 8008370:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008372:	07db      	lsls	r3, r3, #31
 8008374:	d405      	bmi.n	8008382 <_puts_r+0x36>
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	0598      	lsls	r0, r3, #22
 800837a:	d402      	bmi.n	8008382 <_puts_r+0x36>
 800837c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800837e:	f7ff faf0 	bl	8007962 <__retarget_lock_acquire_recursive>
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	0719      	lsls	r1, r3, #28
 8008386:	d51d      	bpl.n	80083c4 <_puts_r+0x78>
 8008388:	6923      	ldr	r3, [r4, #16]
 800838a:	b1db      	cbz	r3, 80083c4 <_puts_r+0x78>
 800838c:	3e01      	subs	r6, #1
 800838e:	68a3      	ldr	r3, [r4, #8]
 8008390:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008394:	3b01      	subs	r3, #1
 8008396:	60a3      	str	r3, [r4, #8]
 8008398:	bb39      	cbnz	r1, 80083ea <_puts_r+0x9e>
 800839a:	2b00      	cmp	r3, #0
 800839c:	da38      	bge.n	8008410 <_puts_r+0xc4>
 800839e:	4622      	mov	r2, r4
 80083a0:	210a      	movs	r1, #10
 80083a2:	4628      	mov	r0, r5
 80083a4:	f000 f942 	bl	800862c <__swbuf_r>
 80083a8:	3001      	adds	r0, #1
 80083aa:	d011      	beq.n	80083d0 <_puts_r+0x84>
 80083ac:	250a      	movs	r5, #10
 80083ae:	e011      	b.n	80083d4 <_puts_r+0x88>
 80083b0:	4b1b      	ldr	r3, [pc, #108]	; (8008420 <_puts_r+0xd4>)
 80083b2:	429c      	cmp	r4, r3
 80083b4:	d101      	bne.n	80083ba <_puts_r+0x6e>
 80083b6:	68ac      	ldr	r4, [r5, #8]
 80083b8:	e7da      	b.n	8008370 <_puts_r+0x24>
 80083ba:	4b1a      	ldr	r3, [pc, #104]	; (8008424 <_puts_r+0xd8>)
 80083bc:	429c      	cmp	r4, r3
 80083be:	bf08      	it	eq
 80083c0:	68ec      	ldreq	r4, [r5, #12]
 80083c2:	e7d5      	b.n	8008370 <_puts_r+0x24>
 80083c4:	4621      	mov	r1, r4
 80083c6:	4628      	mov	r0, r5
 80083c8:	f000 f994 	bl	80086f4 <__swsetup_r>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d0dd      	beq.n	800838c <_puts_r+0x40>
 80083d0:	f04f 35ff 	mov.w	r5, #4294967295
 80083d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083d6:	07da      	lsls	r2, r3, #31
 80083d8:	d405      	bmi.n	80083e6 <_puts_r+0x9a>
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	059b      	lsls	r3, r3, #22
 80083de:	d402      	bmi.n	80083e6 <_puts_r+0x9a>
 80083e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083e2:	f7ff fabf 	bl	8007964 <__retarget_lock_release_recursive>
 80083e6:	4628      	mov	r0, r5
 80083e8:	bd70      	pop	{r4, r5, r6, pc}
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	da04      	bge.n	80083f8 <_puts_r+0xac>
 80083ee:	69a2      	ldr	r2, [r4, #24]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	dc06      	bgt.n	8008402 <_puts_r+0xb6>
 80083f4:	290a      	cmp	r1, #10
 80083f6:	d004      	beq.n	8008402 <_puts_r+0xb6>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	1c5a      	adds	r2, r3, #1
 80083fc:	6022      	str	r2, [r4, #0]
 80083fe:	7019      	strb	r1, [r3, #0]
 8008400:	e7c5      	b.n	800838e <_puts_r+0x42>
 8008402:	4622      	mov	r2, r4
 8008404:	4628      	mov	r0, r5
 8008406:	f000 f911 	bl	800862c <__swbuf_r>
 800840a:	3001      	adds	r0, #1
 800840c:	d1bf      	bne.n	800838e <_puts_r+0x42>
 800840e:	e7df      	b.n	80083d0 <_puts_r+0x84>
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	250a      	movs	r5, #10
 8008414:	1c5a      	adds	r2, r3, #1
 8008416:	6022      	str	r2, [r4, #0]
 8008418:	701d      	strb	r5, [r3, #0]
 800841a:	e7db      	b.n	80083d4 <_puts_r+0x88>
 800841c:	0800ae68 	.word	0x0800ae68
 8008420:	0800ae88 	.word	0x0800ae88
 8008424:	0800ae48 	.word	0x0800ae48

08008428 <puts>:
 8008428:	4b02      	ldr	r3, [pc, #8]	; (8008434 <puts+0xc>)
 800842a:	4601      	mov	r1, r0
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	f7ff bf8d 	b.w	800834c <_puts_r>
 8008432:	bf00      	nop
 8008434:	200000e0 	.word	0x200000e0

08008438 <_sbrk_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d06      	ldr	r5, [pc, #24]	; (8008454 <_sbrk_r+0x1c>)
 800843c:	2300      	movs	r3, #0
 800843e:	4604      	mov	r4, r0
 8008440:	4608      	mov	r0, r1
 8008442:	602b      	str	r3, [r5, #0]
 8008444:	f7fa fdc6 	bl	8002fd4 <_sbrk>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d102      	bne.n	8008452 <_sbrk_r+0x1a>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	b103      	cbz	r3, 8008452 <_sbrk_r+0x1a>
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	20000c78 	.word	0x20000c78

08008458 <siprintf>:
 8008458:	b40e      	push	{r1, r2, r3}
 800845a:	b500      	push	{lr}
 800845c:	b09c      	sub	sp, #112	; 0x70
 800845e:	ab1d      	add	r3, sp, #116	; 0x74
 8008460:	9002      	str	r0, [sp, #8]
 8008462:	9006      	str	r0, [sp, #24]
 8008464:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008468:	4809      	ldr	r0, [pc, #36]	; (8008490 <siprintf+0x38>)
 800846a:	9107      	str	r1, [sp, #28]
 800846c:	9104      	str	r1, [sp, #16]
 800846e:	4909      	ldr	r1, [pc, #36]	; (8008494 <siprintf+0x3c>)
 8008470:	f853 2b04 	ldr.w	r2, [r3], #4
 8008474:	9105      	str	r1, [sp, #20]
 8008476:	6800      	ldr	r0, [r0, #0]
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	a902      	add	r1, sp, #8
 800847c:	f001 fdec 	bl	800a058 <_svfiprintf_r>
 8008480:	9b02      	ldr	r3, [sp, #8]
 8008482:	2200      	movs	r2, #0
 8008484:	701a      	strb	r2, [r3, #0]
 8008486:	b01c      	add	sp, #112	; 0x70
 8008488:	f85d eb04 	ldr.w	lr, [sp], #4
 800848c:	b003      	add	sp, #12
 800848e:	4770      	bx	lr
 8008490:	200000e0 	.word	0x200000e0
 8008494:	ffff0208 	.word	0xffff0208

08008498 <__sread>:
 8008498:	b510      	push	{r4, lr}
 800849a:	460c      	mov	r4, r1
 800849c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a0:	f002 f834 	bl	800a50c <_read_r>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	bfab      	itete	ge
 80084a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084aa:	89a3      	ldrhlt	r3, [r4, #12]
 80084ac:	181b      	addge	r3, r3, r0
 80084ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084b2:	bfac      	ite	ge
 80084b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80084b6:	81a3      	strhlt	r3, [r4, #12]
 80084b8:	bd10      	pop	{r4, pc}

080084ba <__swrite>:
 80084ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084be:	461f      	mov	r7, r3
 80084c0:	898b      	ldrh	r3, [r1, #12]
 80084c2:	05db      	lsls	r3, r3, #23
 80084c4:	4605      	mov	r5, r0
 80084c6:	460c      	mov	r4, r1
 80084c8:	4616      	mov	r6, r2
 80084ca:	d505      	bpl.n	80084d8 <__swrite+0x1e>
 80084cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d0:	2302      	movs	r3, #2
 80084d2:	2200      	movs	r2, #0
 80084d4:	f001 f8fc 	bl	80096d0 <_lseek_r>
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084e2:	81a3      	strh	r3, [r4, #12]
 80084e4:	4632      	mov	r2, r6
 80084e6:	463b      	mov	r3, r7
 80084e8:	4628      	mov	r0, r5
 80084ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084ee:	f000 b8ef 	b.w	80086d0 <_write_r>

080084f2 <__sseek>:
 80084f2:	b510      	push	{r4, lr}
 80084f4:	460c      	mov	r4, r1
 80084f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fa:	f001 f8e9 	bl	80096d0 <_lseek_r>
 80084fe:	1c43      	adds	r3, r0, #1
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	bf15      	itete	ne
 8008504:	6560      	strne	r0, [r4, #84]	; 0x54
 8008506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800850a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800850e:	81a3      	strheq	r3, [r4, #12]
 8008510:	bf18      	it	ne
 8008512:	81a3      	strhne	r3, [r4, #12]
 8008514:	bd10      	pop	{r4, pc}

08008516 <__sclose>:
 8008516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800851a:	f000 b977 	b.w	800880c <_close_r>

0800851e <strncpy>:
 800851e:	b510      	push	{r4, lr}
 8008520:	3901      	subs	r1, #1
 8008522:	4603      	mov	r3, r0
 8008524:	b132      	cbz	r2, 8008534 <strncpy+0x16>
 8008526:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800852a:	f803 4b01 	strb.w	r4, [r3], #1
 800852e:	3a01      	subs	r2, #1
 8008530:	2c00      	cmp	r4, #0
 8008532:	d1f7      	bne.n	8008524 <strncpy+0x6>
 8008534:	441a      	add	r2, r3
 8008536:	2100      	movs	r1, #0
 8008538:	4293      	cmp	r3, r2
 800853a:	d100      	bne.n	800853e <strncpy+0x20>
 800853c:	bd10      	pop	{r4, pc}
 800853e:	f803 1b01 	strb.w	r1, [r3], #1
 8008542:	e7f9      	b.n	8008538 <strncpy+0x1a>

08008544 <strstr>:
 8008544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008546:	780c      	ldrb	r4, [r1, #0]
 8008548:	b164      	cbz	r4, 8008564 <strstr+0x20>
 800854a:	4603      	mov	r3, r0
 800854c:	781a      	ldrb	r2, [r3, #0]
 800854e:	4618      	mov	r0, r3
 8008550:	1c5e      	adds	r6, r3, #1
 8008552:	b90a      	cbnz	r2, 8008558 <strstr+0x14>
 8008554:	4610      	mov	r0, r2
 8008556:	e005      	b.n	8008564 <strstr+0x20>
 8008558:	4294      	cmp	r4, r2
 800855a:	d108      	bne.n	800856e <strstr+0x2a>
 800855c:	460d      	mov	r5, r1
 800855e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008562:	b902      	cbnz	r2, 8008566 <strstr+0x22>
 8008564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008566:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800856a:	4297      	cmp	r7, r2
 800856c:	d0f7      	beq.n	800855e <strstr+0x1a>
 800856e:	4633      	mov	r3, r6
 8008570:	e7ec      	b.n	800854c <strstr+0x8>
	...

08008574 <strtok>:
 8008574:	4b16      	ldr	r3, [pc, #88]	; (80085d0 <strtok+0x5c>)
 8008576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008578:	681e      	ldr	r6, [r3, #0]
 800857a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800857c:	4605      	mov	r5, r0
 800857e:	b9fc      	cbnz	r4, 80085c0 <strtok+0x4c>
 8008580:	2050      	movs	r0, #80	; 0x50
 8008582:	9101      	str	r1, [sp, #4]
 8008584:	f001 f91a 	bl	80097bc <malloc>
 8008588:	9901      	ldr	r1, [sp, #4]
 800858a:	65b0      	str	r0, [r6, #88]	; 0x58
 800858c:	4602      	mov	r2, r0
 800858e:	b920      	cbnz	r0, 800859a <strtok+0x26>
 8008590:	4b10      	ldr	r3, [pc, #64]	; (80085d4 <strtok+0x60>)
 8008592:	4811      	ldr	r0, [pc, #68]	; (80085d8 <strtok+0x64>)
 8008594:	2157      	movs	r1, #87	; 0x57
 8008596:	f000 f91b 	bl	80087d0 <__assert_func>
 800859a:	e9c0 4400 	strd	r4, r4, [r0]
 800859e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80085a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80085a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80085aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80085ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80085b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80085b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80085ba:	6184      	str	r4, [r0, #24]
 80085bc:	7704      	strb	r4, [r0, #28]
 80085be:	6244      	str	r4, [r0, #36]	; 0x24
 80085c0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80085c2:	2301      	movs	r3, #1
 80085c4:	4628      	mov	r0, r5
 80085c6:	b002      	add	sp, #8
 80085c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80085cc:	f000 b806 	b.w	80085dc <__strtok_r>
 80085d0:	200000e0 	.word	0x200000e0
 80085d4:	0800aee0 	.word	0x0800aee0
 80085d8:	0800aef7 	.word	0x0800aef7

080085dc <__strtok_r>:
 80085dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085de:	b908      	cbnz	r0, 80085e4 <__strtok_r+0x8>
 80085e0:	6810      	ldr	r0, [r2, #0]
 80085e2:	b188      	cbz	r0, 8008608 <__strtok_r+0x2c>
 80085e4:	4604      	mov	r4, r0
 80085e6:	4620      	mov	r0, r4
 80085e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80085ec:	460f      	mov	r7, r1
 80085ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 80085f2:	b91e      	cbnz	r6, 80085fc <__strtok_r+0x20>
 80085f4:	b965      	cbnz	r5, 8008610 <__strtok_r+0x34>
 80085f6:	6015      	str	r5, [r2, #0]
 80085f8:	4628      	mov	r0, r5
 80085fa:	e005      	b.n	8008608 <__strtok_r+0x2c>
 80085fc:	42b5      	cmp	r5, r6
 80085fe:	d1f6      	bne.n	80085ee <__strtok_r+0x12>
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1f0      	bne.n	80085e6 <__strtok_r+0xa>
 8008604:	6014      	str	r4, [r2, #0]
 8008606:	7003      	strb	r3, [r0, #0]
 8008608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860a:	461c      	mov	r4, r3
 800860c:	e00c      	b.n	8008628 <__strtok_r+0x4c>
 800860e:	b915      	cbnz	r5, 8008616 <__strtok_r+0x3a>
 8008610:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008614:	460e      	mov	r6, r1
 8008616:	f816 5b01 	ldrb.w	r5, [r6], #1
 800861a:	42ab      	cmp	r3, r5
 800861c:	d1f7      	bne.n	800860e <__strtok_r+0x32>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0f3      	beq.n	800860a <__strtok_r+0x2e>
 8008622:	2300      	movs	r3, #0
 8008624:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008628:	6014      	str	r4, [r2, #0]
 800862a:	e7ed      	b.n	8008608 <__strtok_r+0x2c>

0800862c <__swbuf_r>:
 800862c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862e:	460e      	mov	r6, r1
 8008630:	4614      	mov	r4, r2
 8008632:	4605      	mov	r5, r0
 8008634:	b118      	cbz	r0, 800863e <__swbuf_r+0x12>
 8008636:	6983      	ldr	r3, [r0, #24]
 8008638:	b90b      	cbnz	r3, 800863e <__swbuf_r+0x12>
 800863a:	f7ff f8cf 	bl	80077dc <__sinit>
 800863e:	4b21      	ldr	r3, [pc, #132]	; (80086c4 <__swbuf_r+0x98>)
 8008640:	429c      	cmp	r4, r3
 8008642:	d12b      	bne.n	800869c <__swbuf_r+0x70>
 8008644:	686c      	ldr	r4, [r5, #4]
 8008646:	69a3      	ldr	r3, [r4, #24]
 8008648:	60a3      	str	r3, [r4, #8]
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	071a      	lsls	r2, r3, #28
 800864e:	d52f      	bpl.n	80086b0 <__swbuf_r+0x84>
 8008650:	6923      	ldr	r3, [r4, #16]
 8008652:	b36b      	cbz	r3, 80086b0 <__swbuf_r+0x84>
 8008654:	6923      	ldr	r3, [r4, #16]
 8008656:	6820      	ldr	r0, [r4, #0]
 8008658:	1ac0      	subs	r0, r0, r3
 800865a:	6963      	ldr	r3, [r4, #20]
 800865c:	b2f6      	uxtb	r6, r6
 800865e:	4283      	cmp	r3, r0
 8008660:	4637      	mov	r7, r6
 8008662:	dc04      	bgt.n	800866e <__swbuf_r+0x42>
 8008664:	4621      	mov	r1, r4
 8008666:	4628      	mov	r0, r5
 8008668:	f000 ffe0 	bl	800962c <_fflush_r>
 800866c:	bb30      	cbnz	r0, 80086bc <__swbuf_r+0x90>
 800866e:	68a3      	ldr	r3, [r4, #8]
 8008670:	3b01      	subs	r3, #1
 8008672:	60a3      	str	r3, [r4, #8]
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	6022      	str	r2, [r4, #0]
 800867a:	701e      	strb	r6, [r3, #0]
 800867c:	6963      	ldr	r3, [r4, #20]
 800867e:	3001      	adds	r0, #1
 8008680:	4283      	cmp	r3, r0
 8008682:	d004      	beq.n	800868e <__swbuf_r+0x62>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	07db      	lsls	r3, r3, #31
 8008688:	d506      	bpl.n	8008698 <__swbuf_r+0x6c>
 800868a:	2e0a      	cmp	r6, #10
 800868c:	d104      	bne.n	8008698 <__swbuf_r+0x6c>
 800868e:	4621      	mov	r1, r4
 8008690:	4628      	mov	r0, r5
 8008692:	f000 ffcb 	bl	800962c <_fflush_r>
 8008696:	b988      	cbnz	r0, 80086bc <__swbuf_r+0x90>
 8008698:	4638      	mov	r0, r7
 800869a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800869c:	4b0a      	ldr	r3, [pc, #40]	; (80086c8 <__swbuf_r+0x9c>)
 800869e:	429c      	cmp	r4, r3
 80086a0:	d101      	bne.n	80086a6 <__swbuf_r+0x7a>
 80086a2:	68ac      	ldr	r4, [r5, #8]
 80086a4:	e7cf      	b.n	8008646 <__swbuf_r+0x1a>
 80086a6:	4b09      	ldr	r3, [pc, #36]	; (80086cc <__swbuf_r+0xa0>)
 80086a8:	429c      	cmp	r4, r3
 80086aa:	bf08      	it	eq
 80086ac:	68ec      	ldreq	r4, [r5, #12]
 80086ae:	e7ca      	b.n	8008646 <__swbuf_r+0x1a>
 80086b0:	4621      	mov	r1, r4
 80086b2:	4628      	mov	r0, r5
 80086b4:	f000 f81e 	bl	80086f4 <__swsetup_r>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d0cb      	beq.n	8008654 <__swbuf_r+0x28>
 80086bc:	f04f 37ff 	mov.w	r7, #4294967295
 80086c0:	e7ea      	b.n	8008698 <__swbuf_r+0x6c>
 80086c2:	bf00      	nop
 80086c4:	0800ae68 	.word	0x0800ae68
 80086c8:	0800ae88 	.word	0x0800ae88
 80086cc:	0800ae48 	.word	0x0800ae48

080086d0 <_write_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d07      	ldr	r5, [pc, #28]	; (80086f0 <_write_r+0x20>)
 80086d4:	4604      	mov	r4, r0
 80086d6:	4608      	mov	r0, r1
 80086d8:	4611      	mov	r1, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	602a      	str	r2, [r5, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	f7fe ff78 	bl	80075d4 <_write>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_write_r+0x1e>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_write_r+0x1e>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	20000c78 	.word	0x20000c78

080086f4 <__swsetup_r>:
 80086f4:	4b32      	ldr	r3, [pc, #200]	; (80087c0 <__swsetup_r+0xcc>)
 80086f6:	b570      	push	{r4, r5, r6, lr}
 80086f8:	681d      	ldr	r5, [r3, #0]
 80086fa:	4606      	mov	r6, r0
 80086fc:	460c      	mov	r4, r1
 80086fe:	b125      	cbz	r5, 800870a <__swsetup_r+0x16>
 8008700:	69ab      	ldr	r3, [r5, #24]
 8008702:	b913      	cbnz	r3, 800870a <__swsetup_r+0x16>
 8008704:	4628      	mov	r0, r5
 8008706:	f7ff f869 	bl	80077dc <__sinit>
 800870a:	4b2e      	ldr	r3, [pc, #184]	; (80087c4 <__swsetup_r+0xd0>)
 800870c:	429c      	cmp	r4, r3
 800870e:	d10f      	bne.n	8008730 <__swsetup_r+0x3c>
 8008710:	686c      	ldr	r4, [r5, #4]
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008718:	0719      	lsls	r1, r3, #28
 800871a:	d42c      	bmi.n	8008776 <__swsetup_r+0x82>
 800871c:	06dd      	lsls	r5, r3, #27
 800871e:	d411      	bmi.n	8008744 <__swsetup_r+0x50>
 8008720:	2309      	movs	r3, #9
 8008722:	6033      	str	r3, [r6, #0]
 8008724:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008728:	81a3      	strh	r3, [r4, #12]
 800872a:	f04f 30ff 	mov.w	r0, #4294967295
 800872e:	e03e      	b.n	80087ae <__swsetup_r+0xba>
 8008730:	4b25      	ldr	r3, [pc, #148]	; (80087c8 <__swsetup_r+0xd4>)
 8008732:	429c      	cmp	r4, r3
 8008734:	d101      	bne.n	800873a <__swsetup_r+0x46>
 8008736:	68ac      	ldr	r4, [r5, #8]
 8008738:	e7eb      	b.n	8008712 <__swsetup_r+0x1e>
 800873a:	4b24      	ldr	r3, [pc, #144]	; (80087cc <__swsetup_r+0xd8>)
 800873c:	429c      	cmp	r4, r3
 800873e:	bf08      	it	eq
 8008740:	68ec      	ldreq	r4, [r5, #12]
 8008742:	e7e6      	b.n	8008712 <__swsetup_r+0x1e>
 8008744:	0758      	lsls	r0, r3, #29
 8008746:	d512      	bpl.n	800876e <__swsetup_r+0x7a>
 8008748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800874a:	b141      	cbz	r1, 800875e <__swsetup_r+0x6a>
 800874c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008750:	4299      	cmp	r1, r3
 8008752:	d002      	beq.n	800875a <__swsetup_r+0x66>
 8008754:	4630      	mov	r0, r6
 8008756:	f001 fbd3 	bl	8009f00 <_free_r>
 800875a:	2300      	movs	r3, #0
 800875c:	6363      	str	r3, [r4, #52]	; 0x34
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008764:	81a3      	strh	r3, [r4, #12]
 8008766:	2300      	movs	r3, #0
 8008768:	6063      	str	r3, [r4, #4]
 800876a:	6923      	ldr	r3, [r4, #16]
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	89a3      	ldrh	r3, [r4, #12]
 8008770:	f043 0308 	orr.w	r3, r3, #8
 8008774:	81a3      	strh	r3, [r4, #12]
 8008776:	6923      	ldr	r3, [r4, #16]
 8008778:	b94b      	cbnz	r3, 800878e <__swsetup_r+0x9a>
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008784:	d003      	beq.n	800878e <__swsetup_r+0x9a>
 8008786:	4621      	mov	r1, r4
 8008788:	4630      	mov	r0, r6
 800878a:	f000 ffd7 	bl	800973c <__smakebuf_r>
 800878e:	89a0      	ldrh	r0, [r4, #12]
 8008790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008794:	f010 0301 	ands.w	r3, r0, #1
 8008798:	d00a      	beq.n	80087b0 <__swsetup_r+0xbc>
 800879a:	2300      	movs	r3, #0
 800879c:	60a3      	str	r3, [r4, #8]
 800879e:	6963      	ldr	r3, [r4, #20]
 80087a0:	425b      	negs	r3, r3
 80087a2:	61a3      	str	r3, [r4, #24]
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	b943      	cbnz	r3, 80087ba <__swsetup_r+0xc6>
 80087a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087ac:	d1ba      	bne.n	8008724 <__swsetup_r+0x30>
 80087ae:	bd70      	pop	{r4, r5, r6, pc}
 80087b0:	0781      	lsls	r1, r0, #30
 80087b2:	bf58      	it	pl
 80087b4:	6963      	ldrpl	r3, [r4, #20]
 80087b6:	60a3      	str	r3, [r4, #8]
 80087b8:	e7f4      	b.n	80087a4 <__swsetup_r+0xb0>
 80087ba:	2000      	movs	r0, #0
 80087bc:	e7f7      	b.n	80087ae <__swsetup_r+0xba>
 80087be:	bf00      	nop
 80087c0:	200000e0 	.word	0x200000e0
 80087c4:	0800ae68 	.word	0x0800ae68
 80087c8:	0800ae88 	.word	0x0800ae88
 80087cc:	0800ae48 	.word	0x0800ae48

080087d0 <__assert_func>:
 80087d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087d2:	4614      	mov	r4, r2
 80087d4:	461a      	mov	r2, r3
 80087d6:	4b09      	ldr	r3, [pc, #36]	; (80087fc <__assert_func+0x2c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4605      	mov	r5, r0
 80087dc:	68d8      	ldr	r0, [r3, #12]
 80087de:	b14c      	cbz	r4, 80087f4 <__assert_func+0x24>
 80087e0:	4b07      	ldr	r3, [pc, #28]	; (8008800 <__assert_func+0x30>)
 80087e2:	9100      	str	r1, [sp, #0]
 80087e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087e8:	4906      	ldr	r1, [pc, #24]	; (8008804 <__assert_func+0x34>)
 80087ea:	462b      	mov	r3, r5
 80087ec:	f000 ff5a 	bl	80096a4 <fiprintf>
 80087f0:	f001 fe9e 	bl	800a530 <abort>
 80087f4:	4b04      	ldr	r3, [pc, #16]	; (8008808 <__assert_func+0x38>)
 80087f6:	461c      	mov	r4, r3
 80087f8:	e7f3      	b.n	80087e2 <__assert_func+0x12>
 80087fa:	bf00      	nop
 80087fc:	200000e0 	.word	0x200000e0
 8008800:	0800af58 	.word	0x0800af58
 8008804:	0800af65 	.word	0x0800af65
 8008808:	0800af93 	.word	0x0800af93

0800880c <_close_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4d06      	ldr	r5, [pc, #24]	; (8008828 <_close_r+0x1c>)
 8008810:	2300      	movs	r3, #0
 8008812:	4604      	mov	r4, r0
 8008814:	4608      	mov	r0, r1
 8008816:	602b      	str	r3, [r5, #0]
 8008818:	f7fe ff0e 	bl	8007638 <_close>
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	d102      	bne.n	8008826 <_close_r+0x1a>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	b103      	cbz	r3, 8008826 <_close_r+0x1a>
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	20000c78 	.word	0x20000c78

0800882c <quorem>:
 800882c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	6903      	ldr	r3, [r0, #16]
 8008832:	690c      	ldr	r4, [r1, #16]
 8008834:	42a3      	cmp	r3, r4
 8008836:	4607      	mov	r7, r0
 8008838:	f2c0 8081 	blt.w	800893e <quorem+0x112>
 800883c:	3c01      	subs	r4, #1
 800883e:	f101 0814 	add.w	r8, r1, #20
 8008842:	f100 0514 	add.w	r5, r0, #20
 8008846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800884a:	9301      	str	r3, [sp, #4]
 800884c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008850:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008854:	3301      	adds	r3, #1
 8008856:	429a      	cmp	r2, r3
 8008858:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800885c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008860:	fbb2 f6f3 	udiv	r6, r2, r3
 8008864:	d331      	bcc.n	80088ca <quorem+0x9e>
 8008866:	f04f 0e00 	mov.w	lr, #0
 800886a:	4640      	mov	r0, r8
 800886c:	46ac      	mov	ip, r5
 800886e:	46f2      	mov	sl, lr
 8008870:	f850 2b04 	ldr.w	r2, [r0], #4
 8008874:	b293      	uxth	r3, r2
 8008876:	fb06 e303 	mla	r3, r6, r3, lr
 800887a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800887e:	b29b      	uxth	r3, r3
 8008880:	ebaa 0303 	sub.w	r3, sl, r3
 8008884:	0c12      	lsrs	r2, r2, #16
 8008886:	f8dc a000 	ldr.w	sl, [ip]
 800888a:	fb06 e202 	mla	r2, r6, r2, lr
 800888e:	fa13 f38a 	uxtah	r3, r3, sl
 8008892:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008896:	fa1f fa82 	uxth.w	sl, r2
 800889a:	f8dc 2000 	ldr.w	r2, [ip]
 800889e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80088a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088ac:	4581      	cmp	r9, r0
 80088ae:	f84c 3b04 	str.w	r3, [ip], #4
 80088b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088b6:	d2db      	bcs.n	8008870 <quorem+0x44>
 80088b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80088bc:	b92b      	cbnz	r3, 80088ca <quorem+0x9e>
 80088be:	9b01      	ldr	r3, [sp, #4]
 80088c0:	3b04      	subs	r3, #4
 80088c2:	429d      	cmp	r5, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	d32e      	bcc.n	8008926 <quorem+0xfa>
 80088c8:	613c      	str	r4, [r7, #16]
 80088ca:	4638      	mov	r0, r7
 80088cc:	f001 fa08 	bl	8009ce0 <__mcmp>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	db24      	blt.n	800891e <quorem+0xf2>
 80088d4:	3601      	adds	r6, #1
 80088d6:	4628      	mov	r0, r5
 80088d8:	f04f 0c00 	mov.w	ip, #0
 80088dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80088e0:	f8d0 e000 	ldr.w	lr, [r0]
 80088e4:	b293      	uxth	r3, r2
 80088e6:	ebac 0303 	sub.w	r3, ip, r3
 80088ea:	0c12      	lsrs	r2, r2, #16
 80088ec:	fa13 f38e 	uxtah	r3, r3, lr
 80088f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088fe:	45c1      	cmp	r9, r8
 8008900:	f840 3b04 	str.w	r3, [r0], #4
 8008904:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008908:	d2e8      	bcs.n	80088dc <quorem+0xb0>
 800890a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800890e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008912:	b922      	cbnz	r2, 800891e <quorem+0xf2>
 8008914:	3b04      	subs	r3, #4
 8008916:	429d      	cmp	r5, r3
 8008918:	461a      	mov	r2, r3
 800891a:	d30a      	bcc.n	8008932 <quorem+0x106>
 800891c:	613c      	str	r4, [r7, #16]
 800891e:	4630      	mov	r0, r6
 8008920:	b003      	add	sp, #12
 8008922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008926:	6812      	ldr	r2, [r2, #0]
 8008928:	3b04      	subs	r3, #4
 800892a:	2a00      	cmp	r2, #0
 800892c:	d1cc      	bne.n	80088c8 <quorem+0x9c>
 800892e:	3c01      	subs	r4, #1
 8008930:	e7c7      	b.n	80088c2 <quorem+0x96>
 8008932:	6812      	ldr	r2, [r2, #0]
 8008934:	3b04      	subs	r3, #4
 8008936:	2a00      	cmp	r2, #0
 8008938:	d1f0      	bne.n	800891c <quorem+0xf0>
 800893a:	3c01      	subs	r4, #1
 800893c:	e7eb      	b.n	8008916 <quorem+0xea>
 800893e:	2000      	movs	r0, #0
 8008940:	e7ee      	b.n	8008920 <quorem+0xf4>
 8008942:	0000      	movs	r0, r0
 8008944:	0000      	movs	r0, r0
	...

08008948 <_dtoa_r>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	ed2d 8b02 	vpush	{d8}
 8008950:	ec57 6b10 	vmov	r6, r7, d0
 8008954:	b095      	sub	sp, #84	; 0x54
 8008956:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008958:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800895c:	9105      	str	r1, [sp, #20]
 800895e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008962:	4604      	mov	r4, r0
 8008964:	9209      	str	r2, [sp, #36]	; 0x24
 8008966:	930f      	str	r3, [sp, #60]	; 0x3c
 8008968:	b975      	cbnz	r5, 8008988 <_dtoa_r+0x40>
 800896a:	2010      	movs	r0, #16
 800896c:	f000 ff26 	bl	80097bc <malloc>
 8008970:	4602      	mov	r2, r0
 8008972:	6260      	str	r0, [r4, #36]	; 0x24
 8008974:	b920      	cbnz	r0, 8008980 <_dtoa_r+0x38>
 8008976:	4bb2      	ldr	r3, [pc, #712]	; (8008c40 <_dtoa_r+0x2f8>)
 8008978:	21ea      	movs	r1, #234	; 0xea
 800897a:	48b2      	ldr	r0, [pc, #712]	; (8008c44 <_dtoa_r+0x2fc>)
 800897c:	f7ff ff28 	bl	80087d0 <__assert_func>
 8008980:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008984:	6005      	str	r5, [r0, #0]
 8008986:	60c5      	str	r5, [r0, #12]
 8008988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800898a:	6819      	ldr	r1, [r3, #0]
 800898c:	b151      	cbz	r1, 80089a4 <_dtoa_r+0x5c>
 800898e:	685a      	ldr	r2, [r3, #4]
 8008990:	604a      	str	r2, [r1, #4]
 8008992:	2301      	movs	r3, #1
 8008994:	4093      	lsls	r3, r2
 8008996:	608b      	str	r3, [r1, #8]
 8008998:	4620      	mov	r0, r4
 800899a:	f000 ff63 	bl	8009864 <_Bfree>
 800899e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089a0:	2200      	movs	r2, #0
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	1e3b      	subs	r3, r7, #0
 80089a6:	bfb9      	ittee	lt
 80089a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089ac:	9303      	strlt	r3, [sp, #12]
 80089ae:	2300      	movge	r3, #0
 80089b0:	f8c8 3000 	strge.w	r3, [r8]
 80089b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80089b8:	4ba3      	ldr	r3, [pc, #652]	; (8008c48 <_dtoa_r+0x300>)
 80089ba:	bfbc      	itt	lt
 80089bc:	2201      	movlt	r2, #1
 80089be:	f8c8 2000 	strlt.w	r2, [r8]
 80089c2:	ea33 0309 	bics.w	r3, r3, r9
 80089c6:	d11b      	bne.n	8008a00 <_dtoa_r+0xb8>
 80089c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089d4:	4333      	orrs	r3, r6
 80089d6:	f000 857a 	beq.w	80094ce <_dtoa_r+0xb86>
 80089da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089dc:	b963      	cbnz	r3, 80089f8 <_dtoa_r+0xb0>
 80089de:	4b9b      	ldr	r3, [pc, #620]	; (8008c4c <_dtoa_r+0x304>)
 80089e0:	e024      	b.n	8008a2c <_dtoa_r+0xe4>
 80089e2:	4b9b      	ldr	r3, [pc, #620]	; (8008c50 <_dtoa_r+0x308>)
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	3308      	adds	r3, #8
 80089e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089ea:	6013      	str	r3, [r2, #0]
 80089ec:	9800      	ldr	r0, [sp, #0]
 80089ee:	b015      	add	sp, #84	; 0x54
 80089f0:	ecbd 8b02 	vpop	{d8}
 80089f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f8:	4b94      	ldr	r3, [pc, #592]	; (8008c4c <_dtoa_r+0x304>)
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	3303      	adds	r3, #3
 80089fe:	e7f3      	b.n	80089e8 <_dtoa_r+0xa0>
 8008a00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a04:	2200      	movs	r2, #0
 8008a06:	ec51 0b17 	vmov	r0, r1, d7
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008a10:	f7f8 f85a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a14:	4680      	mov	r8, r0
 8008a16:	b158      	cbz	r0, 8008a30 <_dtoa_r+0xe8>
 8008a18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	6013      	str	r3, [r2, #0]
 8008a1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 8551 	beq.w	80094c8 <_dtoa_r+0xb80>
 8008a26:	488b      	ldr	r0, [pc, #556]	; (8008c54 <_dtoa_r+0x30c>)
 8008a28:	6018      	str	r0, [r3, #0]
 8008a2a:	1e43      	subs	r3, r0, #1
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	e7dd      	b.n	80089ec <_dtoa_r+0xa4>
 8008a30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008a34:	aa12      	add	r2, sp, #72	; 0x48
 8008a36:	a913      	add	r1, sp, #76	; 0x4c
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f001 f9f5 	bl	8009e28 <__d2b>
 8008a3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a42:	4683      	mov	fp, r0
 8008a44:	2d00      	cmp	r5, #0
 8008a46:	d07c      	beq.n	8008b42 <_dtoa_r+0x1fa>
 8008a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008a4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008a56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a62:	4b7d      	ldr	r3, [pc, #500]	; (8008c58 <_dtoa_r+0x310>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	4630      	mov	r0, r6
 8008a68:	4639      	mov	r1, r7
 8008a6a:	f7f7 fc0d 	bl	8000288 <__aeabi_dsub>
 8008a6e:	a36e      	add	r3, pc, #440	; (adr r3, 8008c28 <_dtoa_r+0x2e0>)
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	f7f7 fdc0 	bl	80005f8 <__aeabi_dmul>
 8008a78:	a36d      	add	r3, pc, #436	; (adr r3, 8008c30 <_dtoa_r+0x2e8>)
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	f7f7 fc05 	bl	800028c <__adddf3>
 8008a82:	4606      	mov	r6, r0
 8008a84:	4628      	mov	r0, r5
 8008a86:	460f      	mov	r7, r1
 8008a88:	f7f7 fd4c 	bl	8000524 <__aeabi_i2d>
 8008a8c:	a36a      	add	r3, pc, #424	; (adr r3, 8008c38 <_dtoa_r+0x2f0>)
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	f7f7 fdb1 	bl	80005f8 <__aeabi_dmul>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	f7f7 fbf5 	bl	800028c <__adddf3>
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	460f      	mov	r7, r1
 8008aa6:	f7f8 f857 	bl	8000b58 <__aeabi_d2iz>
 8008aaa:	2200      	movs	r2, #0
 8008aac:	4682      	mov	sl, r0
 8008aae:	2300      	movs	r3, #0
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	4639      	mov	r1, r7
 8008ab4:	f7f8 f812 	bl	8000adc <__aeabi_dcmplt>
 8008ab8:	b148      	cbz	r0, 8008ace <_dtoa_r+0x186>
 8008aba:	4650      	mov	r0, sl
 8008abc:	f7f7 fd32 	bl	8000524 <__aeabi_i2d>
 8008ac0:	4632      	mov	r2, r6
 8008ac2:	463b      	mov	r3, r7
 8008ac4:	f7f8 f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ac8:	b908      	cbnz	r0, 8008ace <_dtoa_r+0x186>
 8008aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ace:	f1ba 0f16 	cmp.w	sl, #22
 8008ad2:	d854      	bhi.n	8008b7e <_dtoa_r+0x236>
 8008ad4:	4b61      	ldr	r3, [pc, #388]	; (8008c5c <_dtoa_r+0x314>)
 8008ad6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ae2:	f7f7 fffb 	bl	8000adc <__aeabi_dcmplt>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d04b      	beq.n	8008b82 <_dtoa_r+0x23a>
 8008aea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008aee:	2300      	movs	r3, #0
 8008af0:	930e      	str	r3, [sp, #56]	; 0x38
 8008af2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008af4:	1b5d      	subs	r5, r3, r5
 8008af6:	1e6b      	subs	r3, r5, #1
 8008af8:	9304      	str	r3, [sp, #16]
 8008afa:	bf43      	ittte	mi
 8008afc:	2300      	movmi	r3, #0
 8008afe:	f1c5 0801 	rsbmi	r8, r5, #1
 8008b02:	9304      	strmi	r3, [sp, #16]
 8008b04:	f04f 0800 	movpl.w	r8, #0
 8008b08:	f1ba 0f00 	cmp.w	sl, #0
 8008b0c:	db3b      	blt.n	8008b86 <_dtoa_r+0x23e>
 8008b0e:	9b04      	ldr	r3, [sp, #16]
 8008b10:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008b14:	4453      	add	r3, sl
 8008b16:	9304      	str	r3, [sp, #16]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	9306      	str	r3, [sp, #24]
 8008b1c:	9b05      	ldr	r3, [sp, #20]
 8008b1e:	2b09      	cmp	r3, #9
 8008b20:	d869      	bhi.n	8008bf6 <_dtoa_r+0x2ae>
 8008b22:	2b05      	cmp	r3, #5
 8008b24:	bfc4      	itt	gt
 8008b26:	3b04      	subgt	r3, #4
 8008b28:	9305      	strgt	r3, [sp, #20]
 8008b2a:	9b05      	ldr	r3, [sp, #20]
 8008b2c:	f1a3 0302 	sub.w	r3, r3, #2
 8008b30:	bfcc      	ite	gt
 8008b32:	2500      	movgt	r5, #0
 8008b34:	2501      	movle	r5, #1
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d869      	bhi.n	8008c0e <_dtoa_r+0x2c6>
 8008b3a:	e8df f003 	tbb	[pc, r3]
 8008b3e:	4e2c      	.short	0x4e2c
 8008b40:	5a4c      	.short	0x5a4c
 8008b42:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008b46:	441d      	add	r5, r3
 8008b48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b4c:	2b20      	cmp	r3, #32
 8008b4e:	bfc1      	itttt	gt
 8008b50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b54:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b58:	fa09 f303 	lslgt.w	r3, r9, r3
 8008b5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b60:	bfda      	itte	le
 8008b62:	f1c3 0320 	rsble	r3, r3, #32
 8008b66:	fa06 f003 	lslle.w	r0, r6, r3
 8008b6a:	4318      	orrgt	r0, r3
 8008b6c:	f7f7 fcca 	bl	8000504 <__aeabi_ui2d>
 8008b70:	2301      	movs	r3, #1
 8008b72:	4606      	mov	r6, r0
 8008b74:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008b78:	3d01      	subs	r5, #1
 8008b7a:	9310      	str	r3, [sp, #64]	; 0x40
 8008b7c:	e771      	b.n	8008a62 <_dtoa_r+0x11a>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e7b6      	b.n	8008af0 <_dtoa_r+0x1a8>
 8008b82:	900e      	str	r0, [sp, #56]	; 0x38
 8008b84:	e7b5      	b.n	8008af2 <_dtoa_r+0x1aa>
 8008b86:	f1ca 0300 	rsb	r3, sl, #0
 8008b8a:	9306      	str	r3, [sp, #24]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	eba8 080a 	sub.w	r8, r8, sl
 8008b92:	930d      	str	r3, [sp, #52]	; 0x34
 8008b94:	e7c2      	b.n	8008b1c <_dtoa_r+0x1d4>
 8008b96:	2300      	movs	r3, #0
 8008b98:	9308      	str	r3, [sp, #32]
 8008b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	dc39      	bgt.n	8008c14 <_dtoa_r+0x2cc>
 8008ba0:	f04f 0901 	mov.w	r9, #1
 8008ba4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ba8:	464b      	mov	r3, r9
 8008baa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008bae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	6042      	str	r2, [r0, #4]
 8008bb4:	2204      	movs	r2, #4
 8008bb6:	f102 0614 	add.w	r6, r2, #20
 8008bba:	429e      	cmp	r6, r3
 8008bbc:	6841      	ldr	r1, [r0, #4]
 8008bbe:	d92f      	bls.n	8008c20 <_dtoa_r+0x2d8>
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f000 fe0f 	bl	80097e4 <_Balloc>
 8008bc6:	9000      	str	r0, [sp, #0]
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d14b      	bne.n	8008c64 <_dtoa_r+0x31c>
 8008bcc:	4b24      	ldr	r3, [pc, #144]	; (8008c60 <_dtoa_r+0x318>)
 8008bce:	4602      	mov	r2, r0
 8008bd0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008bd4:	e6d1      	b.n	800897a <_dtoa_r+0x32>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e7de      	b.n	8008b98 <_dtoa_r+0x250>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	9308      	str	r3, [sp, #32]
 8008bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be0:	eb0a 0903 	add.w	r9, sl, r3
 8008be4:	f109 0301 	add.w	r3, r9, #1
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	9301      	str	r3, [sp, #4]
 8008bec:	bfb8      	it	lt
 8008bee:	2301      	movlt	r3, #1
 8008bf0:	e7dd      	b.n	8008bae <_dtoa_r+0x266>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e7f2      	b.n	8008bdc <_dtoa_r+0x294>
 8008bf6:	2501      	movs	r5, #1
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	9305      	str	r3, [sp, #20]
 8008bfc:	9508      	str	r5, [sp, #32]
 8008bfe:	f04f 39ff 	mov.w	r9, #4294967295
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c08:	2312      	movs	r3, #18
 8008c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c0c:	e7cf      	b.n	8008bae <_dtoa_r+0x266>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	9308      	str	r3, [sp, #32]
 8008c12:	e7f4      	b.n	8008bfe <_dtoa_r+0x2b6>
 8008c14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008c18:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c1c:	464b      	mov	r3, r9
 8008c1e:	e7c6      	b.n	8008bae <_dtoa_r+0x266>
 8008c20:	3101      	adds	r1, #1
 8008c22:	6041      	str	r1, [r0, #4]
 8008c24:	0052      	lsls	r2, r2, #1
 8008c26:	e7c6      	b.n	8008bb6 <_dtoa_r+0x26e>
 8008c28:	636f4361 	.word	0x636f4361
 8008c2c:	3fd287a7 	.word	0x3fd287a7
 8008c30:	8b60c8b3 	.word	0x8b60c8b3
 8008c34:	3fc68a28 	.word	0x3fc68a28
 8008c38:	509f79fb 	.word	0x509f79fb
 8008c3c:	3fd34413 	.word	0x3fd34413
 8008c40:	0800aee0 	.word	0x0800aee0
 8008c44:	0800afa1 	.word	0x0800afa1
 8008c48:	7ff00000 	.word	0x7ff00000
 8008c4c:	0800af9d 	.word	0x0800af9d
 8008c50:	0800af94 	.word	0x0800af94
 8008c54:	0800aebd 	.word	0x0800aebd
 8008c58:	3ff80000 	.word	0x3ff80000
 8008c5c:	0800b0a0 	.word	0x0800b0a0
 8008c60:	0800b000 	.word	0x0800b000
 8008c64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c66:	9a00      	ldr	r2, [sp, #0]
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	9b01      	ldr	r3, [sp, #4]
 8008c6c:	2b0e      	cmp	r3, #14
 8008c6e:	f200 80ad 	bhi.w	8008dcc <_dtoa_r+0x484>
 8008c72:	2d00      	cmp	r5, #0
 8008c74:	f000 80aa 	beq.w	8008dcc <_dtoa_r+0x484>
 8008c78:	f1ba 0f00 	cmp.w	sl, #0
 8008c7c:	dd36      	ble.n	8008cec <_dtoa_r+0x3a4>
 8008c7e:	4ac3      	ldr	r2, [pc, #780]	; (8008f8c <_dtoa_r+0x644>)
 8008c80:	f00a 030f 	and.w	r3, sl, #15
 8008c84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c88:	ed93 7b00 	vldr	d7, [r3]
 8008c8c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008c90:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008c94:	eeb0 8a47 	vmov.f32	s16, s14
 8008c98:	eef0 8a67 	vmov.f32	s17, s15
 8008c9c:	d016      	beq.n	8008ccc <_dtoa_r+0x384>
 8008c9e:	4bbc      	ldr	r3, [pc, #752]	; (8008f90 <_dtoa_r+0x648>)
 8008ca0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ca4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ca8:	f7f7 fdd0 	bl	800084c <__aeabi_ddiv>
 8008cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cb0:	f007 070f 	and.w	r7, r7, #15
 8008cb4:	2503      	movs	r5, #3
 8008cb6:	4eb6      	ldr	r6, [pc, #728]	; (8008f90 <_dtoa_r+0x648>)
 8008cb8:	b957      	cbnz	r7, 8008cd0 <_dtoa_r+0x388>
 8008cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cbe:	ec53 2b18 	vmov	r2, r3, d8
 8008cc2:	f7f7 fdc3 	bl	800084c <__aeabi_ddiv>
 8008cc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cca:	e029      	b.n	8008d20 <_dtoa_r+0x3d8>
 8008ccc:	2502      	movs	r5, #2
 8008cce:	e7f2      	b.n	8008cb6 <_dtoa_r+0x36e>
 8008cd0:	07f9      	lsls	r1, r7, #31
 8008cd2:	d508      	bpl.n	8008ce6 <_dtoa_r+0x39e>
 8008cd4:	ec51 0b18 	vmov	r0, r1, d8
 8008cd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cdc:	f7f7 fc8c 	bl	80005f8 <__aeabi_dmul>
 8008ce0:	ec41 0b18 	vmov	d8, r0, r1
 8008ce4:	3501      	adds	r5, #1
 8008ce6:	107f      	asrs	r7, r7, #1
 8008ce8:	3608      	adds	r6, #8
 8008cea:	e7e5      	b.n	8008cb8 <_dtoa_r+0x370>
 8008cec:	f000 80a6 	beq.w	8008e3c <_dtoa_r+0x4f4>
 8008cf0:	f1ca 0600 	rsb	r6, sl, #0
 8008cf4:	4ba5      	ldr	r3, [pc, #660]	; (8008f8c <_dtoa_r+0x644>)
 8008cf6:	4fa6      	ldr	r7, [pc, #664]	; (8008f90 <_dtoa_r+0x648>)
 8008cf8:	f006 020f 	and.w	r2, r6, #15
 8008cfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d08:	f7f7 fc76 	bl	80005f8 <__aeabi_dmul>
 8008d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d10:	1136      	asrs	r6, r6, #4
 8008d12:	2300      	movs	r3, #0
 8008d14:	2502      	movs	r5, #2
 8008d16:	2e00      	cmp	r6, #0
 8008d18:	f040 8085 	bne.w	8008e26 <_dtoa_r+0x4de>
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1d2      	bne.n	8008cc6 <_dtoa_r+0x37e>
 8008d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f000 808c 	beq.w	8008e40 <_dtoa_r+0x4f8>
 8008d28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d2c:	4b99      	ldr	r3, [pc, #612]	; (8008f94 <_dtoa_r+0x64c>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	4630      	mov	r0, r6
 8008d32:	4639      	mov	r1, r7
 8008d34:	f7f7 fed2 	bl	8000adc <__aeabi_dcmplt>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	f000 8081 	beq.w	8008e40 <_dtoa_r+0x4f8>
 8008d3e:	9b01      	ldr	r3, [sp, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d07d      	beq.n	8008e40 <_dtoa_r+0x4f8>
 8008d44:	f1b9 0f00 	cmp.w	r9, #0
 8008d48:	dd3c      	ble.n	8008dc4 <_dtoa_r+0x47c>
 8008d4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008d4e:	9307      	str	r3, [sp, #28]
 8008d50:	2200      	movs	r2, #0
 8008d52:	4b91      	ldr	r3, [pc, #580]	; (8008f98 <_dtoa_r+0x650>)
 8008d54:	4630      	mov	r0, r6
 8008d56:	4639      	mov	r1, r7
 8008d58:	f7f7 fc4e 	bl	80005f8 <__aeabi_dmul>
 8008d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d60:	3501      	adds	r5, #1
 8008d62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008d66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f7f7 fbda 	bl	8000524 <__aeabi_i2d>
 8008d70:	4632      	mov	r2, r6
 8008d72:	463b      	mov	r3, r7
 8008d74:	f7f7 fc40 	bl	80005f8 <__aeabi_dmul>
 8008d78:	4b88      	ldr	r3, [pc, #544]	; (8008f9c <_dtoa_r+0x654>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f7f7 fa86 	bl	800028c <__adddf3>
 8008d80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d88:	9303      	str	r3, [sp, #12]
 8008d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d15c      	bne.n	8008e4a <_dtoa_r+0x502>
 8008d90:	4b83      	ldr	r3, [pc, #524]	; (8008fa0 <_dtoa_r+0x658>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	4630      	mov	r0, r6
 8008d96:	4639      	mov	r1, r7
 8008d98:	f7f7 fa76 	bl	8000288 <__aeabi_dsub>
 8008d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008da0:	4606      	mov	r6, r0
 8008da2:	460f      	mov	r7, r1
 8008da4:	f7f7 feb8 	bl	8000b18 <__aeabi_dcmpgt>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	f040 8296 	bne.w	80092da <_dtoa_r+0x992>
 8008dae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008db2:	4630      	mov	r0, r6
 8008db4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008db8:	4639      	mov	r1, r7
 8008dba:	f7f7 fe8f 	bl	8000adc <__aeabi_dcmplt>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f040 8288 	bne.w	80092d4 <_dtoa_r+0x98c>
 8008dc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008dc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f2c0 8158 	blt.w	8009084 <_dtoa_r+0x73c>
 8008dd4:	f1ba 0f0e 	cmp.w	sl, #14
 8008dd8:	f300 8154 	bgt.w	8009084 <_dtoa_r+0x73c>
 8008ddc:	4b6b      	ldr	r3, [pc, #428]	; (8008f8c <_dtoa_r+0x644>)
 8008dde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008de2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f280 80e3 	bge.w	8008fb4 <_dtoa_r+0x66c>
 8008dee:	9b01      	ldr	r3, [sp, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f300 80df 	bgt.w	8008fb4 <_dtoa_r+0x66c>
 8008df6:	f040 826d 	bne.w	80092d4 <_dtoa_r+0x98c>
 8008dfa:	4b69      	ldr	r3, [pc, #420]	; (8008fa0 <_dtoa_r+0x658>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	4640      	mov	r0, r8
 8008e00:	4649      	mov	r1, r9
 8008e02:	f7f7 fbf9 	bl	80005f8 <__aeabi_dmul>
 8008e06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e0a:	f7f7 fe7b 	bl	8000b04 <__aeabi_dcmpge>
 8008e0e:	9e01      	ldr	r6, [sp, #4]
 8008e10:	4637      	mov	r7, r6
 8008e12:	2800      	cmp	r0, #0
 8008e14:	f040 8243 	bne.w	800929e <_dtoa_r+0x956>
 8008e18:	9d00      	ldr	r5, [sp, #0]
 8008e1a:	2331      	movs	r3, #49	; 0x31
 8008e1c:	f805 3b01 	strb.w	r3, [r5], #1
 8008e20:	f10a 0a01 	add.w	sl, sl, #1
 8008e24:	e23f      	b.n	80092a6 <_dtoa_r+0x95e>
 8008e26:	07f2      	lsls	r2, r6, #31
 8008e28:	d505      	bpl.n	8008e36 <_dtoa_r+0x4ee>
 8008e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e2e:	f7f7 fbe3 	bl	80005f8 <__aeabi_dmul>
 8008e32:	3501      	adds	r5, #1
 8008e34:	2301      	movs	r3, #1
 8008e36:	1076      	asrs	r6, r6, #1
 8008e38:	3708      	adds	r7, #8
 8008e3a:	e76c      	b.n	8008d16 <_dtoa_r+0x3ce>
 8008e3c:	2502      	movs	r5, #2
 8008e3e:	e76f      	b.n	8008d20 <_dtoa_r+0x3d8>
 8008e40:	9b01      	ldr	r3, [sp, #4]
 8008e42:	f8cd a01c 	str.w	sl, [sp, #28]
 8008e46:	930c      	str	r3, [sp, #48]	; 0x30
 8008e48:	e78d      	b.n	8008d66 <_dtoa_r+0x41e>
 8008e4a:	9900      	ldr	r1, [sp, #0]
 8008e4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008e4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e50:	4b4e      	ldr	r3, [pc, #312]	; (8008f8c <_dtoa_r+0x644>)
 8008e52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e56:	4401      	add	r1, r0
 8008e58:	9102      	str	r1, [sp, #8]
 8008e5a:	9908      	ldr	r1, [sp, #32]
 8008e5c:	eeb0 8a47 	vmov.f32	s16, s14
 8008e60:	eef0 8a67 	vmov.f32	s17, s15
 8008e64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e6c:	2900      	cmp	r1, #0
 8008e6e:	d045      	beq.n	8008efc <_dtoa_r+0x5b4>
 8008e70:	494c      	ldr	r1, [pc, #304]	; (8008fa4 <_dtoa_r+0x65c>)
 8008e72:	2000      	movs	r0, #0
 8008e74:	f7f7 fcea 	bl	800084c <__aeabi_ddiv>
 8008e78:	ec53 2b18 	vmov	r2, r3, d8
 8008e7c:	f7f7 fa04 	bl	8000288 <__aeabi_dsub>
 8008e80:	9d00      	ldr	r5, [sp, #0]
 8008e82:	ec41 0b18 	vmov	d8, r0, r1
 8008e86:	4639      	mov	r1, r7
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f7f7 fe65 	bl	8000b58 <__aeabi_d2iz>
 8008e8e:	900c      	str	r0, [sp, #48]	; 0x30
 8008e90:	f7f7 fb48 	bl	8000524 <__aeabi_i2d>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4630      	mov	r0, r6
 8008e9a:	4639      	mov	r1, r7
 8008e9c:	f7f7 f9f4 	bl	8000288 <__aeabi_dsub>
 8008ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ea2:	3330      	adds	r3, #48	; 0x30
 8008ea4:	f805 3b01 	strb.w	r3, [r5], #1
 8008ea8:	ec53 2b18 	vmov	r2, r3, d8
 8008eac:	4606      	mov	r6, r0
 8008eae:	460f      	mov	r7, r1
 8008eb0:	f7f7 fe14 	bl	8000adc <__aeabi_dcmplt>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d165      	bne.n	8008f84 <_dtoa_r+0x63c>
 8008eb8:	4632      	mov	r2, r6
 8008eba:	463b      	mov	r3, r7
 8008ebc:	4935      	ldr	r1, [pc, #212]	; (8008f94 <_dtoa_r+0x64c>)
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	f7f7 f9e2 	bl	8000288 <__aeabi_dsub>
 8008ec4:	ec53 2b18 	vmov	r2, r3, d8
 8008ec8:	f7f7 fe08 	bl	8000adc <__aeabi_dcmplt>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	f040 80b9 	bne.w	8009044 <_dtoa_r+0x6fc>
 8008ed2:	9b02      	ldr	r3, [sp, #8]
 8008ed4:	429d      	cmp	r5, r3
 8008ed6:	f43f af75 	beq.w	8008dc4 <_dtoa_r+0x47c>
 8008eda:	4b2f      	ldr	r3, [pc, #188]	; (8008f98 <_dtoa_r+0x650>)
 8008edc:	ec51 0b18 	vmov	r0, r1, d8
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f7f7 fb89 	bl	80005f8 <__aeabi_dmul>
 8008ee6:	4b2c      	ldr	r3, [pc, #176]	; (8008f98 <_dtoa_r+0x650>)
 8008ee8:	ec41 0b18 	vmov	d8, r0, r1
 8008eec:	2200      	movs	r2, #0
 8008eee:	4630      	mov	r0, r6
 8008ef0:	4639      	mov	r1, r7
 8008ef2:	f7f7 fb81 	bl	80005f8 <__aeabi_dmul>
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	460f      	mov	r7, r1
 8008efa:	e7c4      	b.n	8008e86 <_dtoa_r+0x53e>
 8008efc:	ec51 0b17 	vmov	r0, r1, d7
 8008f00:	f7f7 fb7a 	bl	80005f8 <__aeabi_dmul>
 8008f04:	9b02      	ldr	r3, [sp, #8]
 8008f06:	9d00      	ldr	r5, [sp, #0]
 8008f08:	930c      	str	r3, [sp, #48]	; 0x30
 8008f0a:	ec41 0b18 	vmov	d8, r0, r1
 8008f0e:	4639      	mov	r1, r7
 8008f10:	4630      	mov	r0, r6
 8008f12:	f7f7 fe21 	bl	8000b58 <__aeabi_d2iz>
 8008f16:	9011      	str	r0, [sp, #68]	; 0x44
 8008f18:	f7f7 fb04 	bl	8000524 <__aeabi_i2d>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4630      	mov	r0, r6
 8008f22:	4639      	mov	r1, r7
 8008f24:	f7f7 f9b0 	bl	8000288 <__aeabi_dsub>
 8008f28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f2a:	3330      	adds	r3, #48	; 0x30
 8008f2c:	f805 3b01 	strb.w	r3, [r5], #1
 8008f30:	9b02      	ldr	r3, [sp, #8]
 8008f32:	429d      	cmp	r5, r3
 8008f34:	4606      	mov	r6, r0
 8008f36:	460f      	mov	r7, r1
 8008f38:	f04f 0200 	mov.w	r2, #0
 8008f3c:	d134      	bne.n	8008fa8 <_dtoa_r+0x660>
 8008f3e:	4b19      	ldr	r3, [pc, #100]	; (8008fa4 <_dtoa_r+0x65c>)
 8008f40:	ec51 0b18 	vmov	r0, r1, d8
 8008f44:	f7f7 f9a2 	bl	800028c <__adddf3>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	4639      	mov	r1, r7
 8008f50:	f7f7 fde2 	bl	8000b18 <__aeabi_dcmpgt>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d175      	bne.n	8009044 <_dtoa_r+0x6fc>
 8008f58:	ec53 2b18 	vmov	r2, r3, d8
 8008f5c:	4911      	ldr	r1, [pc, #68]	; (8008fa4 <_dtoa_r+0x65c>)
 8008f5e:	2000      	movs	r0, #0
 8008f60:	f7f7 f992 	bl	8000288 <__aeabi_dsub>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4630      	mov	r0, r6
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	f7f7 fdb6 	bl	8000adc <__aeabi_dcmplt>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	f43f af27 	beq.w	8008dc4 <_dtoa_r+0x47c>
 8008f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f78:	1e6b      	subs	r3, r5, #1
 8008f7a:	930c      	str	r3, [sp, #48]	; 0x30
 8008f7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f80:	2b30      	cmp	r3, #48	; 0x30
 8008f82:	d0f8      	beq.n	8008f76 <_dtoa_r+0x62e>
 8008f84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008f88:	e04a      	b.n	8009020 <_dtoa_r+0x6d8>
 8008f8a:	bf00      	nop
 8008f8c:	0800b0a0 	.word	0x0800b0a0
 8008f90:	0800b078 	.word	0x0800b078
 8008f94:	3ff00000 	.word	0x3ff00000
 8008f98:	40240000 	.word	0x40240000
 8008f9c:	401c0000 	.word	0x401c0000
 8008fa0:	40140000 	.word	0x40140000
 8008fa4:	3fe00000 	.word	0x3fe00000
 8008fa8:	4baf      	ldr	r3, [pc, #700]	; (8009268 <_dtoa_r+0x920>)
 8008faa:	f7f7 fb25 	bl	80005f8 <__aeabi_dmul>
 8008fae:	4606      	mov	r6, r0
 8008fb0:	460f      	mov	r7, r1
 8008fb2:	e7ac      	b.n	8008f0e <_dtoa_r+0x5c6>
 8008fb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008fb8:	9d00      	ldr	r5, [sp, #0]
 8008fba:	4642      	mov	r2, r8
 8008fbc:	464b      	mov	r3, r9
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	f7f7 fc43 	bl	800084c <__aeabi_ddiv>
 8008fc6:	f7f7 fdc7 	bl	8000b58 <__aeabi_d2iz>
 8008fca:	9002      	str	r0, [sp, #8]
 8008fcc:	f7f7 faaa 	bl	8000524 <__aeabi_i2d>
 8008fd0:	4642      	mov	r2, r8
 8008fd2:	464b      	mov	r3, r9
 8008fd4:	f7f7 fb10 	bl	80005f8 <__aeabi_dmul>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4630      	mov	r0, r6
 8008fde:	4639      	mov	r1, r7
 8008fe0:	f7f7 f952 	bl	8000288 <__aeabi_dsub>
 8008fe4:	9e02      	ldr	r6, [sp, #8]
 8008fe6:	9f01      	ldr	r7, [sp, #4]
 8008fe8:	3630      	adds	r6, #48	; 0x30
 8008fea:	f805 6b01 	strb.w	r6, [r5], #1
 8008fee:	9e00      	ldr	r6, [sp, #0]
 8008ff0:	1bae      	subs	r6, r5, r6
 8008ff2:	42b7      	cmp	r7, r6
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	d137      	bne.n	800906a <_dtoa_r+0x722>
 8008ffa:	f7f7 f947 	bl	800028c <__adddf3>
 8008ffe:	4642      	mov	r2, r8
 8009000:	464b      	mov	r3, r9
 8009002:	4606      	mov	r6, r0
 8009004:	460f      	mov	r7, r1
 8009006:	f7f7 fd87 	bl	8000b18 <__aeabi_dcmpgt>
 800900a:	b9c8      	cbnz	r0, 8009040 <_dtoa_r+0x6f8>
 800900c:	4642      	mov	r2, r8
 800900e:	464b      	mov	r3, r9
 8009010:	4630      	mov	r0, r6
 8009012:	4639      	mov	r1, r7
 8009014:	f7f7 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 8009018:	b110      	cbz	r0, 8009020 <_dtoa_r+0x6d8>
 800901a:	9b02      	ldr	r3, [sp, #8]
 800901c:	07d9      	lsls	r1, r3, #31
 800901e:	d40f      	bmi.n	8009040 <_dtoa_r+0x6f8>
 8009020:	4620      	mov	r0, r4
 8009022:	4659      	mov	r1, fp
 8009024:	f000 fc1e 	bl	8009864 <_Bfree>
 8009028:	2300      	movs	r3, #0
 800902a:	702b      	strb	r3, [r5, #0]
 800902c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800902e:	f10a 0001 	add.w	r0, sl, #1
 8009032:	6018      	str	r0, [r3, #0]
 8009034:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009036:	2b00      	cmp	r3, #0
 8009038:	f43f acd8 	beq.w	80089ec <_dtoa_r+0xa4>
 800903c:	601d      	str	r5, [r3, #0]
 800903e:	e4d5      	b.n	80089ec <_dtoa_r+0xa4>
 8009040:	f8cd a01c 	str.w	sl, [sp, #28]
 8009044:	462b      	mov	r3, r5
 8009046:	461d      	mov	r5, r3
 8009048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800904c:	2a39      	cmp	r2, #57	; 0x39
 800904e:	d108      	bne.n	8009062 <_dtoa_r+0x71a>
 8009050:	9a00      	ldr	r2, [sp, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	d1f7      	bne.n	8009046 <_dtoa_r+0x6fe>
 8009056:	9a07      	ldr	r2, [sp, #28]
 8009058:	9900      	ldr	r1, [sp, #0]
 800905a:	3201      	adds	r2, #1
 800905c:	9207      	str	r2, [sp, #28]
 800905e:	2230      	movs	r2, #48	; 0x30
 8009060:	700a      	strb	r2, [r1, #0]
 8009062:	781a      	ldrb	r2, [r3, #0]
 8009064:	3201      	adds	r2, #1
 8009066:	701a      	strb	r2, [r3, #0]
 8009068:	e78c      	b.n	8008f84 <_dtoa_r+0x63c>
 800906a:	4b7f      	ldr	r3, [pc, #508]	; (8009268 <_dtoa_r+0x920>)
 800906c:	2200      	movs	r2, #0
 800906e:	f7f7 fac3 	bl	80005f8 <__aeabi_dmul>
 8009072:	2200      	movs	r2, #0
 8009074:	2300      	movs	r3, #0
 8009076:	4606      	mov	r6, r0
 8009078:	460f      	mov	r7, r1
 800907a:	f7f7 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800907e:	2800      	cmp	r0, #0
 8009080:	d09b      	beq.n	8008fba <_dtoa_r+0x672>
 8009082:	e7cd      	b.n	8009020 <_dtoa_r+0x6d8>
 8009084:	9a08      	ldr	r2, [sp, #32]
 8009086:	2a00      	cmp	r2, #0
 8009088:	f000 80c4 	beq.w	8009214 <_dtoa_r+0x8cc>
 800908c:	9a05      	ldr	r2, [sp, #20]
 800908e:	2a01      	cmp	r2, #1
 8009090:	f300 80a8 	bgt.w	80091e4 <_dtoa_r+0x89c>
 8009094:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009096:	2a00      	cmp	r2, #0
 8009098:	f000 80a0 	beq.w	80091dc <_dtoa_r+0x894>
 800909c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090a0:	9e06      	ldr	r6, [sp, #24]
 80090a2:	4645      	mov	r5, r8
 80090a4:	9a04      	ldr	r2, [sp, #16]
 80090a6:	2101      	movs	r1, #1
 80090a8:	441a      	add	r2, r3
 80090aa:	4620      	mov	r0, r4
 80090ac:	4498      	add	r8, r3
 80090ae:	9204      	str	r2, [sp, #16]
 80090b0:	f000 fc94 	bl	80099dc <__i2b>
 80090b4:	4607      	mov	r7, r0
 80090b6:	2d00      	cmp	r5, #0
 80090b8:	dd0b      	ble.n	80090d2 <_dtoa_r+0x78a>
 80090ba:	9b04      	ldr	r3, [sp, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dd08      	ble.n	80090d2 <_dtoa_r+0x78a>
 80090c0:	42ab      	cmp	r3, r5
 80090c2:	9a04      	ldr	r2, [sp, #16]
 80090c4:	bfa8      	it	ge
 80090c6:	462b      	movge	r3, r5
 80090c8:	eba8 0803 	sub.w	r8, r8, r3
 80090cc:	1aed      	subs	r5, r5, r3
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	9304      	str	r3, [sp, #16]
 80090d2:	9b06      	ldr	r3, [sp, #24]
 80090d4:	b1fb      	cbz	r3, 8009116 <_dtoa_r+0x7ce>
 80090d6:	9b08      	ldr	r3, [sp, #32]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 809f 	beq.w	800921c <_dtoa_r+0x8d4>
 80090de:	2e00      	cmp	r6, #0
 80090e0:	dd11      	ble.n	8009106 <_dtoa_r+0x7be>
 80090e2:	4639      	mov	r1, r7
 80090e4:	4632      	mov	r2, r6
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 fd34 	bl	8009b54 <__pow5mult>
 80090ec:	465a      	mov	r2, fp
 80090ee:	4601      	mov	r1, r0
 80090f0:	4607      	mov	r7, r0
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 fc88 	bl	8009a08 <__multiply>
 80090f8:	4659      	mov	r1, fp
 80090fa:	9007      	str	r0, [sp, #28]
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 fbb1 	bl	8009864 <_Bfree>
 8009102:	9b07      	ldr	r3, [sp, #28]
 8009104:	469b      	mov	fp, r3
 8009106:	9b06      	ldr	r3, [sp, #24]
 8009108:	1b9a      	subs	r2, r3, r6
 800910a:	d004      	beq.n	8009116 <_dtoa_r+0x7ce>
 800910c:	4659      	mov	r1, fp
 800910e:	4620      	mov	r0, r4
 8009110:	f000 fd20 	bl	8009b54 <__pow5mult>
 8009114:	4683      	mov	fp, r0
 8009116:	2101      	movs	r1, #1
 8009118:	4620      	mov	r0, r4
 800911a:	f000 fc5f 	bl	80099dc <__i2b>
 800911e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009120:	2b00      	cmp	r3, #0
 8009122:	4606      	mov	r6, r0
 8009124:	dd7c      	ble.n	8009220 <_dtoa_r+0x8d8>
 8009126:	461a      	mov	r2, r3
 8009128:	4601      	mov	r1, r0
 800912a:	4620      	mov	r0, r4
 800912c:	f000 fd12 	bl	8009b54 <__pow5mult>
 8009130:	9b05      	ldr	r3, [sp, #20]
 8009132:	2b01      	cmp	r3, #1
 8009134:	4606      	mov	r6, r0
 8009136:	dd76      	ble.n	8009226 <_dtoa_r+0x8de>
 8009138:	2300      	movs	r3, #0
 800913a:	9306      	str	r3, [sp, #24]
 800913c:	6933      	ldr	r3, [r6, #16]
 800913e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009142:	6918      	ldr	r0, [r3, #16]
 8009144:	f000 fbfa 	bl	800993c <__hi0bits>
 8009148:	f1c0 0020 	rsb	r0, r0, #32
 800914c:	9b04      	ldr	r3, [sp, #16]
 800914e:	4418      	add	r0, r3
 8009150:	f010 001f 	ands.w	r0, r0, #31
 8009154:	f000 8086 	beq.w	8009264 <_dtoa_r+0x91c>
 8009158:	f1c0 0320 	rsb	r3, r0, #32
 800915c:	2b04      	cmp	r3, #4
 800915e:	dd7f      	ble.n	8009260 <_dtoa_r+0x918>
 8009160:	f1c0 001c 	rsb	r0, r0, #28
 8009164:	9b04      	ldr	r3, [sp, #16]
 8009166:	4403      	add	r3, r0
 8009168:	4480      	add	r8, r0
 800916a:	4405      	add	r5, r0
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	f1b8 0f00 	cmp.w	r8, #0
 8009172:	dd05      	ble.n	8009180 <_dtoa_r+0x838>
 8009174:	4659      	mov	r1, fp
 8009176:	4642      	mov	r2, r8
 8009178:	4620      	mov	r0, r4
 800917a:	f000 fd45 	bl	8009c08 <__lshift>
 800917e:	4683      	mov	fp, r0
 8009180:	9b04      	ldr	r3, [sp, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	dd05      	ble.n	8009192 <_dtoa_r+0x84a>
 8009186:	4631      	mov	r1, r6
 8009188:	461a      	mov	r2, r3
 800918a:	4620      	mov	r0, r4
 800918c:	f000 fd3c 	bl	8009c08 <__lshift>
 8009190:	4606      	mov	r6, r0
 8009192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009194:	2b00      	cmp	r3, #0
 8009196:	d069      	beq.n	800926c <_dtoa_r+0x924>
 8009198:	4631      	mov	r1, r6
 800919a:	4658      	mov	r0, fp
 800919c:	f000 fda0 	bl	8009ce0 <__mcmp>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	da63      	bge.n	800926c <_dtoa_r+0x924>
 80091a4:	2300      	movs	r3, #0
 80091a6:	4659      	mov	r1, fp
 80091a8:	220a      	movs	r2, #10
 80091aa:	4620      	mov	r0, r4
 80091ac:	f000 fb7c 	bl	80098a8 <__multadd>
 80091b0:	9b08      	ldr	r3, [sp, #32]
 80091b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091b6:	4683      	mov	fp, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 818f 	beq.w	80094dc <_dtoa_r+0xb94>
 80091be:	4639      	mov	r1, r7
 80091c0:	2300      	movs	r3, #0
 80091c2:	220a      	movs	r2, #10
 80091c4:	4620      	mov	r0, r4
 80091c6:	f000 fb6f 	bl	80098a8 <__multadd>
 80091ca:	f1b9 0f00 	cmp.w	r9, #0
 80091ce:	4607      	mov	r7, r0
 80091d0:	f300 808e 	bgt.w	80092f0 <_dtoa_r+0x9a8>
 80091d4:	9b05      	ldr	r3, [sp, #20]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	dc50      	bgt.n	800927c <_dtoa_r+0x934>
 80091da:	e089      	b.n	80092f0 <_dtoa_r+0x9a8>
 80091dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091e2:	e75d      	b.n	80090a0 <_dtoa_r+0x758>
 80091e4:	9b01      	ldr	r3, [sp, #4]
 80091e6:	1e5e      	subs	r6, r3, #1
 80091e8:	9b06      	ldr	r3, [sp, #24]
 80091ea:	42b3      	cmp	r3, r6
 80091ec:	bfbf      	itttt	lt
 80091ee:	9b06      	ldrlt	r3, [sp, #24]
 80091f0:	9606      	strlt	r6, [sp, #24]
 80091f2:	1af2      	sublt	r2, r6, r3
 80091f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80091f6:	bfb6      	itet	lt
 80091f8:	189b      	addlt	r3, r3, r2
 80091fa:	1b9e      	subge	r6, r3, r6
 80091fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80091fe:	9b01      	ldr	r3, [sp, #4]
 8009200:	bfb8      	it	lt
 8009202:	2600      	movlt	r6, #0
 8009204:	2b00      	cmp	r3, #0
 8009206:	bfb5      	itete	lt
 8009208:	eba8 0503 	sublt.w	r5, r8, r3
 800920c:	9b01      	ldrge	r3, [sp, #4]
 800920e:	2300      	movlt	r3, #0
 8009210:	4645      	movge	r5, r8
 8009212:	e747      	b.n	80090a4 <_dtoa_r+0x75c>
 8009214:	9e06      	ldr	r6, [sp, #24]
 8009216:	9f08      	ldr	r7, [sp, #32]
 8009218:	4645      	mov	r5, r8
 800921a:	e74c      	b.n	80090b6 <_dtoa_r+0x76e>
 800921c:	9a06      	ldr	r2, [sp, #24]
 800921e:	e775      	b.n	800910c <_dtoa_r+0x7c4>
 8009220:	9b05      	ldr	r3, [sp, #20]
 8009222:	2b01      	cmp	r3, #1
 8009224:	dc18      	bgt.n	8009258 <_dtoa_r+0x910>
 8009226:	9b02      	ldr	r3, [sp, #8]
 8009228:	b9b3      	cbnz	r3, 8009258 <_dtoa_r+0x910>
 800922a:	9b03      	ldr	r3, [sp, #12]
 800922c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009230:	b9a3      	cbnz	r3, 800925c <_dtoa_r+0x914>
 8009232:	9b03      	ldr	r3, [sp, #12]
 8009234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009238:	0d1b      	lsrs	r3, r3, #20
 800923a:	051b      	lsls	r3, r3, #20
 800923c:	b12b      	cbz	r3, 800924a <_dtoa_r+0x902>
 800923e:	9b04      	ldr	r3, [sp, #16]
 8009240:	3301      	adds	r3, #1
 8009242:	9304      	str	r3, [sp, #16]
 8009244:	f108 0801 	add.w	r8, r8, #1
 8009248:	2301      	movs	r3, #1
 800924a:	9306      	str	r3, [sp, #24]
 800924c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800924e:	2b00      	cmp	r3, #0
 8009250:	f47f af74 	bne.w	800913c <_dtoa_r+0x7f4>
 8009254:	2001      	movs	r0, #1
 8009256:	e779      	b.n	800914c <_dtoa_r+0x804>
 8009258:	2300      	movs	r3, #0
 800925a:	e7f6      	b.n	800924a <_dtoa_r+0x902>
 800925c:	9b02      	ldr	r3, [sp, #8]
 800925e:	e7f4      	b.n	800924a <_dtoa_r+0x902>
 8009260:	d085      	beq.n	800916e <_dtoa_r+0x826>
 8009262:	4618      	mov	r0, r3
 8009264:	301c      	adds	r0, #28
 8009266:	e77d      	b.n	8009164 <_dtoa_r+0x81c>
 8009268:	40240000 	.word	0x40240000
 800926c:	9b01      	ldr	r3, [sp, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	dc38      	bgt.n	80092e4 <_dtoa_r+0x99c>
 8009272:	9b05      	ldr	r3, [sp, #20]
 8009274:	2b02      	cmp	r3, #2
 8009276:	dd35      	ble.n	80092e4 <_dtoa_r+0x99c>
 8009278:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800927c:	f1b9 0f00 	cmp.w	r9, #0
 8009280:	d10d      	bne.n	800929e <_dtoa_r+0x956>
 8009282:	4631      	mov	r1, r6
 8009284:	464b      	mov	r3, r9
 8009286:	2205      	movs	r2, #5
 8009288:	4620      	mov	r0, r4
 800928a:	f000 fb0d 	bl	80098a8 <__multadd>
 800928e:	4601      	mov	r1, r0
 8009290:	4606      	mov	r6, r0
 8009292:	4658      	mov	r0, fp
 8009294:	f000 fd24 	bl	8009ce0 <__mcmp>
 8009298:	2800      	cmp	r0, #0
 800929a:	f73f adbd 	bgt.w	8008e18 <_dtoa_r+0x4d0>
 800929e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a0:	9d00      	ldr	r5, [sp, #0]
 80092a2:	ea6f 0a03 	mvn.w	sl, r3
 80092a6:	f04f 0800 	mov.w	r8, #0
 80092aa:	4631      	mov	r1, r6
 80092ac:	4620      	mov	r0, r4
 80092ae:	f000 fad9 	bl	8009864 <_Bfree>
 80092b2:	2f00      	cmp	r7, #0
 80092b4:	f43f aeb4 	beq.w	8009020 <_dtoa_r+0x6d8>
 80092b8:	f1b8 0f00 	cmp.w	r8, #0
 80092bc:	d005      	beq.n	80092ca <_dtoa_r+0x982>
 80092be:	45b8      	cmp	r8, r7
 80092c0:	d003      	beq.n	80092ca <_dtoa_r+0x982>
 80092c2:	4641      	mov	r1, r8
 80092c4:	4620      	mov	r0, r4
 80092c6:	f000 facd 	bl	8009864 <_Bfree>
 80092ca:	4639      	mov	r1, r7
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fac9 	bl	8009864 <_Bfree>
 80092d2:	e6a5      	b.n	8009020 <_dtoa_r+0x6d8>
 80092d4:	2600      	movs	r6, #0
 80092d6:	4637      	mov	r7, r6
 80092d8:	e7e1      	b.n	800929e <_dtoa_r+0x956>
 80092da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80092dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80092e0:	4637      	mov	r7, r6
 80092e2:	e599      	b.n	8008e18 <_dtoa_r+0x4d0>
 80092e4:	9b08      	ldr	r3, [sp, #32]
 80092e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 80fd 	beq.w	80094ea <_dtoa_r+0xba2>
 80092f0:	2d00      	cmp	r5, #0
 80092f2:	dd05      	ble.n	8009300 <_dtoa_r+0x9b8>
 80092f4:	4639      	mov	r1, r7
 80092f6:	462a      	mov	r2, r5
 80092f8:	4620      	mov	r0, r4
 80092fa:	f000 fc85 	bl	8009c08 <__lshift>
 80092fe:	4607      	mov	r7, r0
 8009300:	9b06      	ldr	r3, [sp, #24]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d05c      	beq.n	80093c0 <_dtoa_r+0xa78>
 8009306:	6879      	ldr	r1, [r7, #4]
 8009308:	4620      	mov	r0, r4
 800930a:	f000 fa6b 	bl	80097e4 <_Balloc>
 800930e:	4605      	mov	r5, r0
 8009310:	b928      	cbnz	r0, 800931e <_dtoa_r+0x9d6>
 8009312:	4b80      	ldr	r3, [pc, #512]	; (8009514 <_dtoa_r+0xbcc>)
 8009314:	4602      	mov	r2, r0
 8009316:	f240 21ea 	movw	r1, #746	; 0x2ea
 800931a:	f7ff bb2e 	b.w	800897a <_dtoa_r+0x32>
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	3202      	adds	r2, #2
 8009322:	0092      	lsls	r2, r2, #2
 8009324:	f107 010c 	add.w	r1, r7, #12
 8009328:	300c      	adds	r0, #12
 800932a:	f7fe fb1c 	bl	8007966 <memcpy>
 800932e:	2201      	movs	r2, #1
 8009330:	4629      	mov	r1, r5
 8009332:	4620      	mov	r0, r4
 8009334:	f000 fc68 	bl	8009c08 <__lshift>
 8009338:	9b00      	ldr	r3, [sp, #0]
 800933a:	3301      	adds	r3, #1
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	9b00      	ldr	r3, [sp, #0]
 8009340:	444b      	add	r3, r9
 8009342:	9307      	str	r3, [sp, #28]
 8009344:	9b02      	ldr	r3, [sp, #8]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	46b8      	mov	r8, r7
 800934c:	9306      	str	r3, [sp, #24]
 800934e:	4607      	mov	r7, r0
 8009350:	9b01      	ldr	r3, [sp, #4]
 8009352:	4631      	mov	r1, r6
 8009354:	3b01      	subs	r3, #1
 8009356:	4658      	mov	r0, fp
 8009358:	9302      	str	r3, [sp, #8]
 800935a:	f7ff fa67 	bl	800882c <quorem>
 800935e:	4603      	mov	r3, r0
 8009360:	3330      	adds	r3, #48	; 0x30
 8009362:	9004      	str	r0, [sp, #16]
 8009364:	4641      	mov	r1, r8
 8009366:	4658      	mov	r0, fp
 8009368:	9308      	str	r3, [sp, #32]
 800936a:	f000 fcb9 	bl	8009ce0 <__mcmp>
 800936e:	463a      	mov	r2, r7
 8009370:	4681      	mov	r9, r0
 8009372:	4631      	mov	r1, r6
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fccf 	bl	8009d18 <__mdiff>
 800937a:	68c2      	ldr	r2, [r0, #12]
 800937c:	9b08      	ldr	r3, [sp, #32]
 800937e:	4605      	mov	r5, r0
 8009380:	bb02      	cbnz	r2, 80093c4 <_dtoa_r+0xa7c>
 8009382:	4601      	mov	r1, r0
 8009384:	4658      	mov	r0, fp
 8009386:	f000 fcab 	bl	8009ce0 <__mcmp>
 800938a:	9b08      	ldr	r3, [sp, #32]
 800938c:	4602      	mov	r2, r0
 800938e:	4629      	mov	r1, r5
 8009390:	4620      	mov	r0, r4
 8009392:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009396:	f000 fa65 	bl	8009864 <_Bfree>
 800939a:	9b05      	ldr	r3, [sp, #20]
 800939c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800939e:	9d01      	ldr	r5, [sp, #4]
 80093a0:	ea43 0102 	orr.w	r1, r3, r2
 80093a4:	9b06      	ldr	r3, [sp, #24]
 80093a6:	430b      	orrs	r3, r1
 80093a8:	9b08      	ldr	r3, [sp, #32]
 80093aa:	d10d      	bne.n	80093c8 <_dtoa_r+0xa80>
 80093ac:	2b39      	cmp	r3, #57	; 0x39
 80093ae:	d029      	beq.n	8009404 <_dtoa_r+0xabc>
 80093b0:	f1b9 0f00 	cmp.w	r9, #0
 80093b4:	dd01      	ble.n	80093ba <_dtoa_r+0xa72>
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	3331      	adds	r3, #49	; 0x31
 80093ba:	9a02      	ldr	r2, [sp, #8]
 80093bc:	7013      	strb	r3, [r2, #0]
 80093be:	e774      	b.n	80092aa <_dtoa_r+0x962>
 80093c0:	4638      	mov	r0, r7
 80093c2:	e7b9      	b.n	8009338 <_dtoa_r+0x9f0>
 80093c4:	2201      	movs	r2, #1
 80093c6:	e7e2      	b.n	800938e <_dtoa_r+0xa46>
 80093c8:	f1b9 0f00 	cmp.w	r9, #0
 80093cc:	db06      	blt.n	80093dc <_dtoa_r+0xa94>
 80093ce:	9905      	ldr	r1, [sp, #20]
 80093d0:	ea41 0909 	orr.w	r9, r1, r9
 80093d4:	9906      	ldr	r1, [sp, #24]
 80093d6:	ea59 0101 	orrs.w	r1, r9, r1
 80093da:	d120      	bne.n	800941e <_dtoa_r+0xad6>
 80093dc:	2a00      	cmp	r2, #0
 80093de:	ddec      	ble.n	80093ba <_dtoa_r+0xa72>
 80093e0:	4659      	mov	r1, fp
 80093e2:	2201      	movs	r2, #1
 80093e4:	4620      	mov	r0, r4
 80093e6:	9301      	str	r3, [sp, #4]
 80093e8:	f000 fc0e 	bl	8009c08 <__lshift>
 80093ec:	4631      	mov	r1, r6
 80093ee:	4683      	mov	fp, r0
 80093f0:	f000 fc76 	bl	8009ce0 <__mcmp>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	9b01      	ldr	r3, [sp, #4]
 80093f8:	dc02      	bgt.n	8009400 <_dtoa_r+0xab8>
 80093fa:	d1de      	bne.n	80093ba <_dtoa_r+0xa72>
 80093fc:	07da      	lsls	r2, r3, #31
 80093fe:	d5dc      	bpl.n	80093ba <_dtoa_r+0xa72>
 8009400:	2b39      	cmp	r3, #57	; 0x39
 8009402:	d1d8      	bne.n	80093b6 <_dtoa_r+0xa6e>
 8009404:	9a02      	ldr	r2, [sp, #8]
 8009406:	2339      	movs	r3, #57	; 0x39
 8009408:	7013      	strb	r3, [r2, #0]
 800940a:	462b      	mov	r3, r5
 800940c:	461d      	mov	r5, r3
 800940e:	3b01      	subs	r3, #1
 8009410:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009414:	2a39      	cmp	r2, #57	; 0x39
 8009416:	d050      	beq.n	80094ba <_dtoa_r+0xb72>
 8009418:	3201      	adds	r2, #1
 800941a:	701a      	strb	r2, [r3, #0]
 800941c:	e745      	b.n	80092aa <_dtoa_r+0x962>
 800941e:	2a00      	cmp	r2, #0
 8009420:	dd03      	ble.n	800942a <_dtoa_r+0xae2>
 8009422:	2b39      	cmp	r3, #57	; 0x39
 8009424:	d0ee      	beq.n	8009404 <_dtoa_r+0xabc>
 8009426:	3301      	adds	r3, #1
 8009428:	e7c7      	b.n	80093ba <_dtoa_r+0xa72>
 800942a:	9a01      	ldr	r2, [sp, #4]
 800942c:	9907      	ldr	r1, [sp, #28]
 800942e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009432:	428a      	cmp	r2, r1
 8009434:	d02a      	beq.n	800948c <_dtoa_r+0xb44>
 8009436:	4659      	mov	r1, fp
 8009438:	2300      	movs	r3, #0
 800943a:	220a      	movs	r2, #10
 800943c:	4620      	mov	r0, r4
 800943e:	f000 fa33 	bl	80098a8 <__multadd>
 8009442:	45b8      	cmp	r8, r7
 8009444:	4683      	mov	fp, r0
 8009446:	f04f 0300 	mov.w	r3, #0
 800944a:	f04f 020a 	mov.w	r2, #10
 800944e:	4641      	mov	r1, r8
 8009450:	4620      	mov	r0, r4
 8009452:	d107      	bne.n	8009464 <_dtoa_r+0xb1c>
 8009454:	f000 fa28 	bl	80098a8 <__multadd>
 8009458:	4680      	mov	r8, r0
 800945a:	4607      	mov	r7, r0
 800945c:	9b01      	ldr	r3, [sp, #4]
 800945e:	3301      	adds	r3, #1
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	e775      	b.n	8009350 <_dtoa_r+0xa08>
 8009464:	f000 fa20 	bl	80098a8 <__multadd>
 8009468:	4639      	mov	r1, r7
 800946a:	4680      	mov	r8, r0
 800946c:	2300      	movs	r3, #0
 800946e:	220a      	movs	r2, #10
 8009470:	4620      	mov	r0, r4
 8009472:	f000 fa19 	bl	80098a8 <__multadd>
 8009476:	4607      	mov	r7, r0
 8009478:	e7f0      	b.n	800945c <_dtoa_r+0xb14>
 800947a:	f1b9 0f00 	cmp.w	r9, #0
 800947e:	9a00      	ldr	r2, [sp, #0]
 8009480:	bfcc      	ite	gt
 8009482:	464d      	movgt	r5, r9
 8009484:	2501      	movle	r5, #1
 8009486:	4415      	add	r5, r2
 8009488:	f04f 0800 	mov.w	r8, #0
 800948c:	4659      	mov	r1, fp
 800948e:	2201      	movs	r2, #1
 8009490:	4620      	mov	r0, r4
 8009492:	9301      	str	r3, [sp, #4]
 8009494:	f000 fbb8 	bl	8009c08 <__lshift>
 8009498:	4631      	mov	r1, r6
 800949a:	4683      	mov	fp, r0
 800949c:	f000 fc20 	bl	8009ce0 <__mcmp>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	dcb2      	bgt.n	800940a <_dtoa_r+0xac2>
 80094a4:	d102      	bne.n	80094ac <_dtoa_r+0xb64>
 80094a6:	9b01      	ldr	r3, [sp, #4]
 80094a8:	07db      	lsls	r3, r3, #31
 80094aa:	d4ae      	bmi.n	800940a <_dtoa_r+0xac2>
 80094ac:	462b      	mov	r3, r5
 80094ae:	461d      	mov	r5, r3
 80094b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094b4:	2a30      	cmp	r2, #48	; 0x30
 80094b6:	d0fa      	beq.n	80094ae <_dtoa_r+0xb66>
 80094b8:	e6f7      	b.n	80092aa <_dtoa_r+0x962>
 80094ba:	9a00      	ldr	r2, [sp, #0]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d1a5      	bne.n	800940c <_dtoa_r+0xac4>
 80094c0:	f10a 0a01 	add.w	sl, sl, #1
 80094c4:	2331      	movs	r3, #49	; 0x31
 80094c6:	e779      	b.n	80093bc <_dtoa_r+0xa74>
 80094c8:	4b13      	ldr	r3, [pc, #76]	; (8009518 <_dtoa_r+0xbd0>)
 80094ca:	f7ff baaf 	b.w	8008a2c <_dtoa_r+0xe4>
 80094ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f47f aa86 	bne.w	80089e2 <_dtoa_r+0x9a>
 80094d6:	4b11      	ldr	r3, [pc, #68]	; (800951c <_dtoa_r+0xbd4>)
 80094d8:	f7ff baa8 	b.w	8008a2c <_dtoa_r+0xe4>
 80094dc:	f1b9 0f00 	cmp.w	r9, #0
 80094e0:	dc03      	bgt.n	80094ea <_dtoa_r+0xba2>
 80094e2:	9b05      	ldr	r3, [sp, #20]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	f73f aec9 	bgt.w	800927c <_dtoa_r+0x934>
 80094ea:	9d00      	ldr	r5, [sp, #0]
 80094ec:	4631      	mov	r1, r6
 80094ee:	4658      	mov	r0, fp
 80094f0:	f7ff f99c 	bl	800882c <quorem>
 80094f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80094f8:	f805 3b01 	strb.w	r3, [r5], #1
 80094fc:	9a00      	ldr	r2, [sp, #0]
 80094fe:	1aaa      	subs	r2, r5, r2
 8009500:	4591      	cmp	r9, r2
 8009502:	ddba      	ble.n	800947a <_dtoa_r+0xb32>
 8009504:	4659      	mov	r1, fp
 8009506:	2300      	movs	r3, #0
 8009508:	220a      	movs	r2, #10
 800950a:	4620      	mov	r0, r4
 800950c:	f000 f9cc 	bl	80098a8 <__multadd>
 8009510:	4683      	mov	fp, r0
 8009512:	e7eb      	b.n	80094ec <_dtoa_r+0xba4>
 8009514:	0800b000 	.word	0x0800b000
 8009518:	0800aebc 	.word	0x0800aebc
 800951c:	0800af94 	.word	0x0800af94

08009520 <__sflush_r>:
 8009520:	898a      	ldrh	r2, [r1, #12]
 8009522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009526:	4605      	mov	r5, r0
 8009528:	0710      	lsls	r0, r2, #28
 800952a:	460c      	mov	r4, r1
 800952c:	d458      	bmi.n	80095e0 <__sflush_r+0xc0>
 800952e:	684b      	ldr	r3, [r1, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	dc05      	bgt.n	8009540 <__sflush_r+0x20>
 8009534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009536:	2b00      	cmp	r3, #0
 8009538:	dc02      	bgt.n	8009540 <__sflush_r+0x20>
 800953a:	2000      	movs	r0, #0
 800953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009542:	2e00      	cmp	r6, #0
 8009544:	d0f9      	beq.n	800953a <__sflush_r+0x1a>
 8009546:	2300      	movs	r3, #0
 8009548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800954c:	682f      	ldr	r7, [r5, #0]
 800954e:	602b      	str	r3, [r5, #0]
 8009550:	d032      	beq.n	80095b8 <__sflush_r+0x98>
 8009552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	075a      	lsls	r2, r3, #29
 8009558:	d505      	bpl.n	8009566 <__sflush_r+0x46>
 800955a:	6863      	ldr	r3, [r4, #4]
 800955c:	1ac0      	subs	r0, r0, r3
 800955e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009560:	b10b      	cbz	r3, 8009566 <__sflush_r+0x46>
 8009562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009564:	1ac0      	subs	r0, r0, r3
 8009566:	2300      	movs	r3, #0
 8009568:	4602      	mov	r2, r0
 800956a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800956c:	6a21      	ldr	r1, [r4, #32]
 800956e:	4628      	mov	r0, r5
 8009570:	47b0      	blx	r6
 8009572:	1c43      	adds	r3, r0, #1
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	d106      	bne.n	8009586 <__sflush_r+0x66>
 8009578:	6829      	ldr	r1, [r5, #0]
 800957a:	291d      	cmp	r1, #29
 800957c:	d82c      	bhi.n	80095d8 <__sflush_r+0xb8>
 800957e:	4a2a      	ldr	r2, [pc, #168]	; (8009628 <__sflush_r+0x108>)
 8009580:	40ca      	lsrs	r2, r1
 8009582:	07d6      	lsls	r6, r2, #31
 8009584:	d528      	bpl.n	80095d8 <__sflush_r+0xb8>
 8009586:	2200      	movs	r2, #0
 8009588:	6062      	str	r2, [r4, #4]
 800958a:	04d9      	lsls	r1, r3, #19
 800958c:	6922      	ldr	r2, [r4, #16]
 800958e:	6022      	str	r2, [r4, #0]
 8009590:	d504      	bpl.n	800959c <__sflush_r+0x7c>
 8009592:	1c42      	adds	r2, r0, #1
 8009594:	d101      	bne.n	800959a <__sflush_r+0x7a>
 8009596:	682b      	ldr	r3, [r5, #0]
 8009598:	b903      	cbnz	r3, 800959c <__sflush_r+0x7c>
 800959a:	6560      	str	r0, [r4, #84]	; 0x54
 800959c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800959e:	602f      	str	r7, [r5, #0]
 80095a0:	2900      	cmp	r1, #0
 80095a2:	d0ca      	beq.n	800953a <__sflush_r+0x1a>
 80095a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095a8:	4299      	cmp	r1, r3
 80095aa:	d002      	beq.n	80095b2 <__sflush_r+0x92>
 80095ac:	4628      	mov	r0, r5
 80095ae:	f000 fca7 	bl	8009f00 <_free_r>
 80095b2:	2000      	movs	r0, #0
 80095b4:	6360      	str	r0, [r4, #52]	; 0x34
 80095b6:	e7c1      	b.n	800953c <__sflush_r+0x1c>
 80095b8:	6a21      	ldr	r1, [r4, #32]
 80095ba:	2301      	movs	r3, #1
 80095bc:	4628      	mov	r0, r5
 80095be:	47b0      	blx	r6
 80095c0:	1c41      	adds	r1, r0, #1
 80095c2:	d1c7      	bne.n	8009554 <__sflush_r+0x34>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d0c4      	beq.n	8009554 <__sflush_r+0x34>
 80095ca:	2b1d      	cmp	r3, #29
 80095cc:	d001      	beq.n	80095d2 <__sflush_r+0xb2>
 80095ce:	2b16      	cmp	r3, #22
 80095d0:	d101      	bne.n	80095d6 <__sflush_r+0xb6>
 80095d2:	602f      	str	r7, [r5, #0]
 80095d4:	e7b1      	b.n	800953a <__sflush_r+0x1a>
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	e7ad      	b.n	800953c <__sflush_r+0x1c>
 80095e0:	690f      	ldr	r7, [r1, #16]
 80095e2:	2f00      	cmp	r7, #0
 80095e4:	d0a9      	beq.n	800953a <__sflush_r+0x1a>
 80095e6:	0793      	lsls	r3, r2, #30
 80095e8:	680e      	ldr	r6, [r1, #0]
 80095ea:	bf08      	it	eq
 80095ec:	694b      	ldreq	r3, [r1, #20]
 80095ee:	600f      	str	r7, [r1, #0]
 80095f0:	bf18      	it	ne
 80095f2:	2300      	movne	r3, #0
 80095f4:	eba6 0807 	sub.w	r8, r6, r7
 80095f8:	608b      	str	r3, [r1, #8]
 80095fa:	f1b8 0f00 	cmp.w	r8, #0
 80095fe:	dd9c      	ble.n	800953a <__sflush_r+0x1a>
 8009600:	6a21      	ldr	r1, [r4, #32]
 8009602:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009604:	4643      	mov	r3, r8
 8009606:	463a      	mov	r2, r7
 8009608:	4628      	mov	r0, r5
 800960a:	47b0      	blx	r6
 800960c:	2800      	cmp	r0, #0
 800960e:	dc06      	bgt.n	800961e <__sflush_r+0xfe>
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009616:	81a3      	strh	r3, [r4, #12]
 8009618:	f04f 30ff 	mov.w	r0, #4294967295
 800961c:	e78e      	b.n	800953c <__sflush_r+0x1c>
 800961e:	4407      	add	r7, r0
 8009620:	eba8 0800 	sub.w	r8, r8, r0
 8009624:	e7e9      	b.n	80095fa <__sflush_r+0xda>
 8009626:	bf00      	nop
 8009628:	20400001 	.word	0x20400001

0800962c <_fflush_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	690b      	ldr	r3, [r1, #16]
 8009630:	4605      	mov	r5, r0
 8009632:	460c      	mov	r4, r1
 8009634:	b913      	cbnz	r3, 800963c <_fflush_r+0x10>
 8009636:	2500      	movs	r5, #0
 8009638:	4628      	mov	r0, r5
 800963a:	bd38      	pop	{r3, r4, r5, pc}
 800963c:	b118      	cbz	r0, 8009646 <_fflush_r+0x1a>
 800963e:	6983      	ldr	r3, [r0, #24]
 8009640:	b90b      	cbnz	r3, 8009646 <_fflush_r+0x1a>
 8009642:	f7fe f8cb 	bl	80077dc <__sinit>
 8009646:	4b14      	ldr	r3, [pc, #80]	; (8009698 <_fflush_r+0x6c>)
 8009648:	429c      	cmp	r4, r3
 800964a:	d11b      	bne.n	8009684 <_fflush_r+0x58>
 800964c:	686c      	ldr	r4, [r5, #4]
 800964e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d0ef      	beq.n	8009636 <_fflush_r+0xa>
 8009656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009658:	07d0      	lsls	r0, r2, #31
 800965a:	d404      	bmi.n	8009666 <_fflush_r+0x3a>
 800965c:	0599      	lsls	r1, r3, #22
 800965e:	d402      	bmi.n	8009666 <_fflush_r+0x3a>
 8009660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009662:	f7fe f97e 	bl	8007962 <__retarget_lock_acquire_recursive>
 8009666:	4628      	mov	r0, r5
 8009668:	4621      	mov	r1, r4
 800966a:	f7ff ff59 	bl	8009520 <__sflush_r>
 800966e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009670:	07da      	lsls	r2, r3, #31
 8009672:	4605      	mov	r5, r0
 8009674:	d4e0      	bmi.n	8009638 <_fflush_r+0xc>
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	059b      	lsls	r3, r3, #22
 800967a:	d4dd      	bmi.n	8009638 <_fflush_r+0xc>
 800967c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800967e:	f7fe f971 	bl	8007964 <__retarget_lock_release_recursive>
 8009682:	e7d9      	b.n	8009638 <_fflush_r+0xc>
 8009684:	4b05      	ldr	r3, [pc, #20]	; (800969c <_fflush_r+0x70>)
 8009686:	429c      	cmp	r4, r3
 8009688:	d101      	bne.n	800968e <_fflush_r+0x62>
 800968a:	68ac      	ldr	r4, [r5, #8]
 800968c:	e7df      	b.n	800964e <_fflush_r+0x22>
 800968e:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <_fflush_r+0x74>)
 8009690:	429c      	cmp	r4, r3
 8009692:	bf08      	it	eq
 8009694:	68ec      	ldreq	r4, [r5, #12]
 8009696:	e7da      	b.n	800964e <_fflush_r+0x22>
 8009698:	0800ae68 	.word	0x0800ae68
 800969c:	0800ae88 	.word	0x0800ae88
 80096a0:	0800ae48 	.word	0x0800ae48

080096a4 <fiprintf>:
 80096a4:	b40e      	push	{r1, r2, r3}
 80096a6:	b503      	push	{r0, r1, lr}
 80096a8:	4601      	mov	r1, r0
 80096aa:	ab03      	add	r3, sp, #12
 80096ac:	4805      	ldr	r0, [pc, #20]	; (80096c4 <fiprintf+0x20>)
 80096ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b2:	6800      	ldr	r0, [r0, #0]
 80096b4:	9301      	str	r3, [sp, #4]
 80096b6:	f000 fdf9 	bl	800a2ac <_vfiprintf_r>
 80096ba:	b002      	add	sp, #8
 80096bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80096c0:	b003      	add	sp, #12
 80096c2:	4770      	bx	lr
 80096c4:	200000e0 	.word	0x200000e0

080096c8 <_localeconv_r>:
 80096c8:	4800      	ldr	r0, [pc, #0]	; (80096cc <_localeconv_r+0x4>)
 80096ca:	4770      	bx	lr
 80096cc:	20000234 	.word	0x20000234

080096d0 <_lseek_r>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	4d07      	ldr	r5, [pc, #28]	; (80096f0 <_lseek_r+0x20>)
 80096d4:	4604      	mov	r4, r0
 80096d6:	4608      	mov	r0, r1
 80096d8:	4611      	mov	r1, r2
 80096da:	2200      	movs	r2, #0
 80096dc:	602a      	str	r2, [r5, #0]
 80096de:	461a      	mov	r2, r3
 80096e0:	f7fd ff66 	bl	80075b0 <_lseek>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_lseek_r+0x1e>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_lseek_r+0x1e>
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	20000c78 	.word	0x20000c78

080096f4 <__swhatbuf_r>:
 80096f4:	b570      	push	{r4, r5, r6, lr}
 80096f6:	460e      	mov	r6, r1
 80096f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096fc:	2900      	cmp	r1, #0
 80096fe:	b096      	sub	sp, #88	; 0x58
 8009700:	4614      	mov	r4, r2
 8009702:	461d      	mov	r5, r3
 8009704:	da07      	bge.n	8009716 <__swhatbuf_r+0x22>
 8009706:	2300      	movs	r3, #0
 8009708:	602b      	str	r3, [r5, #0]
 800970a:	89b3      	ldrh	r3, [r6, #12]
 800970c:	061a      	lsls	r2, r3, #24
 800970e:	d410      	bmi.n	8009732 <__swhatbuf_r+0x3e>
 8009710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009714:	e00e      	b.n	8009734 <__swhatbuf_r+0x40>
 8009716:	466a      	mov	r2, sp
 8009718:	f000 ff12 	bl	800a540 <_fstat_r>
 800971c:	2800      	cmp	r0, #0
 800971e:	dbf2      	blt.n	8009706 <__swhatbuf_r+0x12>
 8009720:	9a01      	ldr	r2, [sp, #4]
 8009722:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009726:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800972a:	425a      	negs	r2, r3
 800972c:	415a      	adcs	r2, r3
 800972e:	602a      	str	r2, [r5, #0]
 8009730:	e7ee      	b.n	8009710 <__swhatbuf_r+0x1c>
 8009732:	2340      	movs	r3, #64	; 0x40
 8009734:	2000      	movs	r0, #0
 8009736:	6023      	str	r3, [r4, #0]
 8009738:	b016      	add	sp, #88	; 0x58
 800973a:	bd70      	pop	{r4, r5, r6, pc}

0800973c <__smakebuf_r>:
 800973c:	898b      	ldrh	r3, [r1, #12]
 800973e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009740:	079d      	lsls	r5, r3, #30
 8009742:	4606      	mov	r6, r0
 8009744:	460c      	mov	r4, r1
 8009746:	d507      	bpl.n	8009758 <__smakebuf_r+0x1c>
 8009748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800974c:	6023      	str	r3, [r4, #0]
 800974e:	6123      	str	r3, [r4, #16]
 8009750:	2301      	movs	r3, #1
 8009752:	6163      	str	r3, [r4, #20]
 8009754:	b002      	add	sp, #8
 8009756:	bd70      	pop	{r4, r5, r6, pc}
 8009758:	ab01      	add	r3, sp, #4
 800975a:	466a      	mov	r2, sp
 800975c:	f7ff ffca 	bl	80096f4 <__swhatbuf_r>
 8009760:	9900      	ldr	r1, [sp, #0]
 8009762:	4605      	mov	r5, r0
 8009764:	4630      	mov	r0, r6
 8009766:	f7fe f915 	bl	8007994 <_malloc_r>
 800976a:	b948      	cbnz	r0, 8009780 <__smakebuf_r+0x44>
 800976c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009770:	059a      	lsls	r2, r3, #22
 8009772:	d4ef      	bmi.n	8009754 <__smakebuf_r+0x18>
 8009774:	f023 0303 	bic.w	r3, r3, #3
 8009778:	f043 0302 	orr.w	r3, r3, #2
 800977c:	81a3      	strh	r3, [r4, #12]
 800977e:	e7e3      	b.n	8009748 <__smakebuf_r+0xc>
 8009780:	4b0d      	ldr	r3, [pc, #52]	; (80097b8 <__smakebuf_r+0x7c>)
 8009782:	62b3      	str	r3, [r6, #40]	; 0x28
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	6020      	str	r0, [r4, #0]
 8009788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800978c:	81a3      	strh	r3, [r4, #12]
 800978e:	9b00      	ldr	r3, [sp, #0]
 8009790:	6163      	str	r3, [r4, #20]
 8009792:	9b01      	ldr	r3, [sp, #4]
 8009794:	6120      	str	r0, [r4, #16]
 8009796:	b15b      	cbz	r3, 80097b0 <__smakebuf_r+0x74>
 8009798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800979c:	4630      	mov	r0, r6
 800979e:	f000 fee1 	bl	800a564 <_isatty_r>
 80097a2:	b128      	cbz	r0, 80097b0 <__smakebuf_r+0x74>
 80097a4:	89a3      	ldrh	r3, [r4, #12]
 80097a6:	f023 0303 	bic.w	r3, r3, #3
 80097aa:	f043 0301 	orr.w	r3, r3, #1
 80097ae:	81a3      	strh	r3, [r4, #12]
 80097b0:	89a0      	ldrh	r0, [r4, #12]
 80097b2:	4305      	orrs	r5, r0
 80097b4:	81a5      	strh	r5, [r4, #12]
 80097b6:	e7cd      	b.n	8009754 <__smakebuf_r+0x18>
 80097b8:	08007775 	.word	0x08007775

080097bc <malloc>:
 80097bc:	4b02      	ldr	r3, [pc, #8]	; (80097c8 <malloc+0xc>)
 80097be:	4601      	mov	r1, r0
 80097c0:	6818      	ldr	r0, [r3, #0]
 80097c2:	f7fe b8e7 	b.w	8007994 <_malloc_r>
 80097c6:	bf00      	nop
 80097c8:	200000e0 	.word	0x200000e0

080097cc <__malloc_lock>:
 80097cc:	4801      	ldr	r0, [pc, #4]	; (80097d4 <__malloc_lock+0x8>)
 80097ce:	f7fe b8c8 	b.w	8007962 <__retarget_lock_acquire_recursive>
 80097d2:	bf00      	nop
 80097d4:	20000c70 	.word	0x20000c70

080097d8 <__malloc_unlock>:
 80097d8:	4801      	ldr	r0, [pc, #4]	; (80097e0 <__malloc_unlock+0x8>)
 80097da:	f7fe b8c3 	b.w	8007964 <__retarget_lock_release_recursive>
 80097de:	bf00      	nop
 80097e0:	20000c70 	.word	0x20000c70

080097e4 <_Balloc>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097e8:	4604      	mov	r4, r0
 80097ea:	460d      	mov	r5, r1
 80097ec:	b976      	cbnz	r6, 800980c <_Balloc+0x28>
 80097ee:	2010      	movs	r0, #16
 80097f0:	f7ff ffe4 	bl	80097bc <malloc>
 80097f4:	4602      	mov	r2, r0
 80097f6:	6260      	str	r0, [r4, #36]	; 0x24
 80097f8:	b920      	cbnz	r0, 8009804 <_Balloc+0x20>
 80097fa:	4b18      	ldr	r3, [pc, #96]	; (800985c <_Balloc+0x78>)
 80097fc:	4818      	ldr	r0, [pc, #96]	; (8009860 <_Balloc+0x7c>)
 80097fe:	2166      	movs	r1, #102	; 0x66
 8009800:	f7fe ffe6 	bl	80087d0 <__assert_func>
 8009804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009808:	6006      	str	r6, [r0, #0]
 800980a:	60c6      	str	r6, [r0, #12]
 800980c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800980e:	68f3      	ldr	r3, [r6, #12]
 8009810:	b183      	cbz	r3, 8009834 <_Balloc+0x50>
 8009812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800981a:	b9b8      	cbnz	r0, 800984c <_Balloc+0x68>
 800981c:	2101      	movs	r1, #1
 800981e:	fa01 f605 	lsl.w	r6, r1, r5
 8009822:	1d72      	adds	r2, r6, #5
 8009824:	0092      	lsls	r2, r2, #2
 8009826:	4620      	mov	r0, r4
 8009828:	f000 fb5a 	bl	8009ee0 <_calloc_r>
 800982c:	b160      	cbz	r0, 8009848 <_Balloc+0x64>
 800982e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009832:	e00e      	b.n	8009852 <_Balloc+0x6e>
 8009834:	2221      	movs	r2, #33	; 0x21
 8009836:	2104      	movs	r1, #4
 8009838:	4620      	mov	r0, r4
 800983a:	f000 fb51 	bl	8009ee0 <_calloc_r>
 800983e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009840:	60f0      	str	r0, [r6, #12]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1e4      	bne.n	8009812 <_Balloc+0x2e>
 8009848:	2000      	movs	r0, #0
 800984a:	bd70      	pop	{r4, r5, r6, pc}
 800984c:	6802      	ldr	r2, [r0, #0]
 800984e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009852:	2300      	movs	r3, #0
 8009854:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009858:	e7f7      	b.n	800984a <_Balloc+0x66>
 800985a:	bf00      	nop
 800985c:	0800aee0 	.word	0x0800aee0
 8009860:	0800b011 	.word	0x0800b011

08009864 <_Bfree>:
 8009864:	b570      	push	{r4, r5, r6, lr}
 8009866:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009868:	4605      	mov	r5, r0
 800986a:	460c      	mov	r4, r1
 800986c:	b976      	cbnz	r6, 800988c <_Bfree+0x28>
 800986e:	2010      	movs	r0, #16
 8009870:	f7ff ffa4 	bl	80097bc <malloc>
 8009874:	4602      	mov	r2, r0
 8009876:	6268      	str	r0, [r5, #36]	; 0x24
 8009878:	b920      	cbnz	r0, 8009884 <_Bfree+0x20>
 800987a:	4b09      	ldr	r3, [pc, #36]	; (80098a0 <_Bfree+0x3c>)
 800987c:	4809      	ldr	r0, [pc, #36]	; (80098a4 <_Bfree+0x40>)
 800987e:	218a      	movs	r1, #138	; 0x8a
 8009880:	f7fe ffa6 	bl	80087d0 <__assert_func>
 8009884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009888:	6006      	str	r6, [r0, #0]
 800988a:	60c6      	str	r6, [r0, #12]
 800988c:	b13c      	cbz	r4, 800989e <_Bfree+0x3a>
 800988e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009890:	6862      	ldr	r2, [r4, #4]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009898:	6021      	str	r1, [r4, #0]
 800989a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800989e:	bd70      	pop	{r4, r5, r6, pc}
 80098a0:	0800aee0 	.word	0x0800aee0
 80098a4:	0800b011 	.word	0x0800b011

080098a8 <__multadd>:
 80098a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ac:	690e      	ldr	r6, [r1, #16]
 80098ae:	4607      	mov	r7, r0
 80098b0:	4698      	mov	r8, r3
 80098b2:	460c      	mov	r4, r1
 80098b4:	f101 0014 	add.w	r0, r1, #20
 80098b8:	2300      	movs	r3, #0
 80098ba:	6805      	ldr	r5, [r0, #0]
 80098bc:	b2a9      	uxth	r1, r5
 80098be:	fb02 8101 	mla	r1, r2, r1, r8
 80098c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80098c6:	0c2d      	lsrs	r5, r5, #16
 80098c8:	fb02 c505 	mla	r5, r2, r5, ip
 80098cc:	b289      	uxth	r1, r1
 80098ce:	3301      	adds	r3, #1
 80098d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80098d4:	429e      	cmp	r6, r3
 80098d6:	f840 1b04 	str.w	r1, [r0], #4
 80098da:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80098de:	dcec      	bgt.n	80098ba <__multadd+0x12>
 80098e0:	f1b8 0f00 	cmp.w	r8, #0
 80098e4:	d022      	beq.n	800992c <__multadd+0x84>
 80098e6:	68a3      	ldr	r3, [r4, #8]
 80098e8:	42b3      	cmp	r3, r6
 80098ea:	dc19      	bgt.n	8009920 <__multadd+0x78>
 80098ec:	6861      	ldr	r1, [r4, #4]
 80098ee:	4638      	mov	r0, r7
 80098f0:	3101      	adds	r1, #1
 80098f2:	f7ff ff77 	bl	80097e4 <_Balloc>
 80098f6:	4605      	mov	r5, r0
 80098f8:	b928      	cbnz	r0, 8009906 <__multadd+0x5e>
 80098fa:	4602      	mov	r2, r0
 80098fc:	4b0d      	ldr	r3, [pc, #52]	; (8009934 <__multadd+0x8c>)
 80098fe:	480e      	ldr	r0, [pc, #56]	; (8009938 <__multadd+0x90>)
 8009900:	21b5      	movs	r1, #181	; 0xb5
 8009902:	f7fe ff65 	bl	80087d0 <__assert_func>
 8009906:	6922      	ldr	r2, [r4, #16]
 8009908:	3202      	adds	r2, #2
 800990a:	f104 010c 	add.w	r1, r4, #12
 800990e:	0092      	lsls	r2, r2, #2
 8009910:	300c      	adds	r0, #12
 8009912:	f7fe f828 	bl	8007966 <memcpy>
 8009916:	4621      	mov	r1, r4
 8009918:	4638      	mov	r0, r7
 800991a:	f7ff ffa3 	bl	8009864 <_Bfree>
 800991e:	462c      	mov	r4, r5
 8009920:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009924:	3601      	adds	r6, #1
 8009926:	f8c3 8014 	str.w	r8, [r3, #20]
 800992a:	6126      	str	r6, [r4, #16]
 800992c:	4620      	mov	r0, r4
 800992e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009932:	bf00      	nop
 8009934:	0800b000 	.word	0x0800b000
 8009938:	0800b011 	.word	0x0800b011

0800993c <__hi0bits>:
 800993c:	0c03      	lsrs	r3, r0, #16
 800993e:	041b      	lsls	r3, r3, #16
 8009940:	b9d3      	cbnz	r3, 8009978 <__hi0bits+0x3c>
 8009942:	0400      	lsls	r0, r0, #16
 8009944:	2310      	movs	r3, #16
 8009946:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800994a:	bf04      	itt	eq
 800994c:	0200      	lsleq	r0, r0, #8
 800994e:	3308      	addeq	r3, #8
 8009950:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009954:	bf04      	itt	eq
 8009956:	0100      	lsleq	r0, r0, #4
 8009958:	3304      	addeq	r3, #4
 800995a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800995e:	bf04      	itt	eq
 8009960:	0080      	lsleq	r0, r0, #2
 8009962:	3302      	addeq	r3, #2
 8009964:	2800      	cmp	r0, #0
 8009966:	db05      	blt.n	8009974 <__hi0bits+0x38>
 8009968:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800996c:	f103 0301 	add.w	r3, r3, #1
 8009970:	bf08      	it	eq
 8009972:	2320      	moveq	r3, #32
 8009974:	4618      	mov	r0, r3
 8009976:	4770      	bx	lr
 8009978:	2300      	movs	r3, #0
 800997a:	e7e4      	b.n	8009946 <__hi0bits+0xa>

0800997c <__lo0bits>:
 800997c:	6803      	ldr	r3, [r0, #0]
 800997e:	f013 0207 	ands.w	r2, r3, #7
 8009982:	4601      	mov	r1, r0
 8009984:	d00b      	beq.n	800999e <__lo0bits+0x22>
 8009986:	07da      	lsls	r2, r3, #31
 8009988:	d424      	bmi.n	80099d4 <__lo0bits+0x58>
 800998a:	0798      	lsls	r0, r3, #30
 800998c:	bf49      	itett	mi
 800998e:	085b      	lsrmi	r3, r3, #1
 8009990:	089b      	lsrpl	r3, r3, #2
 8009992:	2001      	movmi	r0, #1
 8009994:	600b      	strmi	r3, [r1, #0]
 8009996:	bf5c      	itt	pl
 8009998:	600b      	strpl	r3, [r1, #0]
 800999a:	2002      	movpl	r0, #2
 800999c:	4770      	bx	lr
 800999e:	b298      	uxth	r0, r3
 80099a0:	b9b0      	cbnz	r0, 80099d0 <__lo0bits+0x54>
 80099a2:	0c1b      	lsrs	r3, r3, #16
 80099a4:	2010      	movs	r0, #16
 80099a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80099aa:	bf04      	itt	eq
 80099ac:	0a1b      	lsreq	r3, r3, #8
 80099ae:	3008      	addeq	r0, #8
 80099b0:	071a      	lsls	r2, r3, #28
 80099b2:	bf04      	itt	eq
 80099b4:	091b      	lsreq	r3, r3, #4
 80099b6:	3004      	addeq	r0, #4
 80099b8:	079a      	lsls	r2, r3, #30
 80099ba:	bf04      	itt	eq
 80099bc:	089b      	lsreq	r3, r3, #2
 80099be:	3002      	addeq	r0, #2
 80099c0:	07da      	lsls	r2, r3, #31
 80099c2:	d403      	bmi.n	80099cc <__lo0bits+0x50>
 80099c4:	085b      	lsrs	r3, r3, #1
 80099c6:	f100 0001 	add.w	r0, r0, #1
 80099ca:	d005      	beq.n	80099d8 <__lo0bits+0x5c>
 80099cc:	600b      	str	r3, [r1, #0]
 80099ce:	4770      	bx	lr
 80099d0:	4610      	mov	r0, r2
 80099d2:	e7e8      	b.n	80099a6 <__lo0bits+0x2a>
 80099d4:	2000      	movs	r0, #0
 80099d6:	4770      	bx	lr
 80099d8:	2020      	movs	r0, #32
 80099da:	4770      	bx	lr

080099dc <__i2b>:
 80099dc:	b510      	push	{r4, lr}
 80099de:	460c      	mov	r4, r1
 80099e0:	2101      	movs	r1, #1
 80099e2:	f7ff feff 	bl	80097e4 <_Balloc>
 80099e6:	4602      	mov	r2, r0
 80099e8:	b928      	cbnz	r0, 80099f6 <__i2b+0x1a>
 80099ea:	4b05      	ldr	r3, [pc, #20]	; (8009a00 <__i2b+0x24>)
 80099ec:	4805      	ldr	r0, [pc, #20]	; (8009a04 <__i2b+0x28>)
 80099ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80099f2:	f7fe feed 	bl	80087d0 <__assert_func>
 80099f6:	2301      	movs	r3, #1
 80099f8:	6144      	str	r4, [r0, #20]
 80099fa:	6103      	str	r3, [r0, #16]
 80099fc:	bd10      	pop	{r4, pc}
 80099fe:	bf00      	nop
 8009a00:	0800b000 	.word	0x0800b000
 8009a04:	0800b011 	.word	0x0800b011

08009a08 <__multiply>:
 8009a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0c:	4614      	mov	r4, r2
 8009a0e:	690a      	ldr	r2, [r1, #16]
 8009a10:	6923      	ldr	r3, [r4, #16]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	bfb8      	it	lt
 8009a16:	460b      	movlt	r3, r1
 8009a18:	460d      	mov	r5, r1
 8009a1a:	bfbc      	itt	lt
 8009a1c:	4625      	movlt	r5, r4
 8009a1e:	461c      	movlt	r4, r3
 8009a20:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a28:	68ab      	ldr	r3, [r5, #8]
 8009a2a:	6869      	ldr	r1, [r5, #4]
 8009a2c:	eb0a 0709 	add.w	r7, sl, r9
 8009a30:	42bb      	cmp	r3, r7
 8009a32:	b085      	sub	sp, #20
 8009a34:	bfb8      	it	lt
 8009a36:	3101      	addlt	r1, #1
 8009a38:	f7ff fed4 	bl	80097e4 <_Balloc>
 8009a3c:	b930      	cbnz	r0, 8009a4c <__multiply+0x44>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	4b42      	ldr	r3, [pc, #264]	; (8009b4c <__multiply+0x144>)
 8009a42:	4843      	ldr	r0, [pc, #268]	; (8009b50 <__multiply+0x148>)
 8009a44:	f240 115d 	movw	r1, #349	; 0x15d
 8009a48:	f7fe fec2 	bl	80087d0 <__assert_func>
 8009a4c:	f100 0614 	add.w	r6, r0, #20
 8009a50:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009a54:	4633      	mov	r3, r6
 8009a56:	2200      	movs	r2, #0
 8009a58:	4543      	cmp	r3, r8
 8009a5a:	d31e      	bcc.n	8009a9a <__multiply+0x92>
 8009a5c:	f105 0c14 	add.w	ip, r5, #20
 8009a60:	f104 0314 	add.w	r3, r4, #20
 8009a64:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009a68:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a6c:	9202      	str	r2, [sp, #8]
 8009a6e:	ebac 0205 	sub.w	r2, ip, r5
 8009a72:	3a15      	subs	r2, #21
 8009a74:	f022 0203 	bic.w	r2, r2, #3
 8009a78:	3204      	adds	r2, #4
 8009a7a:	f105 0115 	add.w	r1, r5, #21
 8009a7e:	458c      	cmp	ip, r1
 8009a80:	bf38      	it	cc
 8009a82:	2204      	movcc	r2, #4
 8009a84:	9201      	str	r2, [sp, #4]
 8009a86:	9a02      	ldr	r2, [sp, #8]
 8009a88:	9303      	str	r3, [sp, #12]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d808      	bhi.n	8009aa0 <__multiply+0x98>
 8009a8e:	2f00      	cmp	r7, #0
 8009a90:	dc55      	bgt.n	8009b3e <__multiply+0x136>
 8009a92:	6107      	str	r7, [r0, #16]
 8009a94:	b005      	add	sp, #20
 8009a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9a:	f843 2b04 	str.w	r2, [r3], #4
 8009a9e:	e7db      	b.n	8009a58 <__multiply+0x50>
 8009aa0:	f8b3 a000 	ldrh.w	sl, [r3]
 8009aa4:	f1ba 0f00 	cmp.w	sl, #0
 8009aa8:	d020      	beq.n	8009aec <__multiply+0xe4>
 8009aaa:	f105 0e14 	add.w	lr, r5, #20
 8009aae:	46b1      	mov	r9, r6
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009ab6:	f8d9 b000 	ldr.w	fp, [r9]
 8009aba:	b2a1      	uxth	r1, r4
 8009abc:	fa1f fb8b 	uxth.w	fp, fp
 8009ac0:	fb0a b101 	mla	r1, sl, r1, fp
 8009ac4:	4411      	add	r1, r2
 8009ac6:	f8d9 2000 	ldr.w	r2, [r9]
 8009aca:	0c24      	lsrs	r4, r4, #16
 8009acc:	0c12      	lsrs	r2, r2, #16
 8009ace:	fb0a 2404 	mla	r4, sl, r4, r2
 8009ad2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009ad6:	b289      	uxth	r1, r1
 8009ad8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009adc:	45f4      	cmp	ip, lr
 8009ade:	f849 1b04 	str.w	r1, [r9], #4
 8009ae2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009ae6:	d8e4      	bhi.n	8009ab2 <__multiply+0xaa>
 8009ae8:	9901      	ldr	r1, [sp, #4]
 8009aea:	5072      	str	r2, [r6, r1]
 8009aec:	9a03      	ldr	r2, [sp, #12]
 8009aee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009af2:	3304      	adds	r3, #4
 8009af4:	f1b9 0f00 	cmp.w	r9, #0
 8009af8:	d01f      	beq.n	8009b3a <__multiply+0x132>
 8009afa:	6834      	ldr	r4, [r6, #0]
 8009afc:	f105 0114 	add.w	r1, r5, #20
 8009b00:	46b6      	mov	lr, r6
 8009b02:	f04f 0a00 	mov.w	sl, #0
 8009b06:	880a      	ldrh	r2, [r1, #0]
 8009b08:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009b0c:	fb09 b202 	mla	r2, r9, r2, fp
 8009b10:	4492      	add	sl, r2
 8009b12:	b2a4      	uxth	r4, r4
 8009b14:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009b18:	f84e 4b04 	str.w	r4, [lr], #4
 8009b1c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b20:	f8be 2000 	ldrh.w	r2, [lr]
 8009b24:	0c24      	lsrs	r4, r4, #16
 8009b26:	fb09 2404 	mla	r4, r9, r4, r2
 8009b2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009b2e:	458c      	cmp	ip, r1
 8009b30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b34:	d8e7      	bhi.n	8009b06 <__multiply+0xfe>
 8009b36:	9a01      	ldr	r2, [sp, #4]
 8009b38:	50b4      	str	r4, [r6, r2]
 8009b3a:	3604      	adds	r6, #4
 8009b3c:	e7a3      	b.n	8009a86 <__multiply+0x7e>
 8009b3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1a5      	bne.n	8009a92 <__multiply+0x8a>
 8009b46:	3f01      	subs	r7, #1
 8009b48:	e7a1      	b.n	8009a8e <__multiply+0x86>
 8009b4a:	bf00      	nop
 8009b4c:	0800b000 	.word	0x0800b000
 8009b50:	0800b011 	.word	0x0800b011

08009b54 <__pow5mult>:
 8009b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b58:	4615      	mov	r5, r2
 8009b5a:	f012 0203 	ands.w	r2, r2, #3
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460f      	mov	r7, r1
 8009b62:	d007      	beq.n	8009b74 <__pow5mult+0x20>
 8009b64:	4c25      	ldr	r4, [pc, #148]	; (8009bfc <__pow5mult+0xa8>)
 8009b66:	3a01      	subs	r2, #1
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b6e:	f7ff fe9b 	bl	80098a8 <__multadd>
 8009b72:	4607      	mov	r7, r0
 8009b74:	10ad      	asrs	r5, r5, #2
 8009b76:	d03d      	beq.n	8009bf4 <__pow5mult+0xa0>
 8009b78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b7a:	b97c      	cbnz	r4, 8009b9c <__pow5mult+0x48>
 8009b7c:	2010      	movs	r0, #16
 8009b7e:	f7ff fe1d 	bl	80097bc <malloc>
 8009b82:	4602      	mov	r2, r0
 8009b84:	6270      	str	r0, [r6, #36]	; 0x24
 8009b86:	b928      	cbnz	r0, 8009b94 <__pow5mult+0x40>
 8009b88:	4b1d      	ldr	r3, [pc, #116]	; (8009c00 <__pow5mult+0xac>)
 8009b8a:	481e      	ldr	r0, [pc, #120]	; (8009c04 <__pow5mult+0xb0>)
 8009b8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b90:	f7fe fe1e 	bl	80087d0 <__assert_func>
 8009b94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b98:	6004      	str	r4, [r0, #0]
 8009b9a:	60c4      	str	r4, [r0, #12]
 8009b9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ba4:	b94c      	cbnz	r4, 8009bba <__pow5mult+0x66>
 8009ba6:	f240 2171 	movw	r1, #625	; 0x271
 8009baa:	4630      	mov	r0, r6
 8009bac:	f7ff ff16 	bl	80099dc <__i2b>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	6003      	str	r3, [r0, #0]
 8009bba:	f04f 0900 	mov.w	r9, #0
 8009bbe:	07eb      	lsls	r3, r5, #31
 8009bc0:	d50a      	bpl.n	8009bd8 <__pow5mult+0x84>
 8009bc2:	4639      	mov	r1, r7
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f7ff ff1e 	bl	8009a08 <__multiply>
 8009bcc:	4639      	mov	r1, r7
 8009bce:	4680      	mov	r8, r0
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f7ff fe47 	bl	8009864 <_Bfree>
 8009bd6:	4647      	mov	r7, r8
 8009bd8:	106d      	asrs	r5, r5, #1
 8009bda:	d00b      	beq.n	8009bf4 <__pow5mult+0xa0>
 8009bdc:	6820      	ldr	r0, [r4, #0]
 8009bde:	b938      	cbnz	r0, 8009bf0 <__pow5mult+0x9c>
 8009be0:	4622      	mov	r2, r4
 8009be2:	4621      	mov	r1, r4
 8009be4:	4630      	mov	r0, r6
 8009be6:	f7ff ff0f 	bl	8009a08 <__multiply>
 8009bea:	6020      	str	r0, [r4, #0]
 8009bec:	f8c0 9000 	str.w	r9, [r0]
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	e7e4      	b.n	8009bbe <__pow5mult+0x6a>
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bfa:	bf00      	nop
 8009bfc:	0800b168 	.word	0x0800b168
 8009c00:	0800aee0 	.word	0x0800aee0
 8009c04:	0800b011 	.word	0x0800b011

08009c08 <__lshift>:
 8009c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	6849      	ldr	r1, [r1, #4]
 8009c10:	6923      	ldr	r3, [r4, #16]
 8009c12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c16:	68a3      	ldr	r3, [r4, #8]
 8009c18:	4607      	mov	r7, r0
 8009c1a:	4691      	mov	r9, r2
 8009c1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c20:	f108 0601 	add.w	r6, r8, #1
 8009c24:	42b3      	cmp	r3, r6
 8009c26:	db0b      	blt.n	8009c40 <__lshift+0x38>
 8009c28:	4638      	mov	r0, r7
 8009c2a:	f7ff fddb 	bl	80097e4 <_Balloc>
 8009c2e:	4605      	mov	r5, r0
 8009c30:	b948      	cbnz	r0, 8009c46 <__lshift+0x3e>
 8009c32:	4602      	mov	r2, r0
 8009c34:	4b28      	ldr	r3, [pc, #160]	; (8009cd8 <__lshift+0xd0>)
 8009c36:	4829      	ldr	r0, [pc, #164]	; (8009cdc <__lshift+0xd4>)
 8009c38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c3c:	f7fe fdc8 	bl	80087d0 <__assert_func>
 8009c40:	3101      	adds	r1, #1
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	e7ee      	b.n	8009c24 <__lshift+0x1c>
 8009c46:	2300      	movs	r3, #0
 8009c48:	f100 0114 	add.w	r1, r0, #20
 8009c4c:	f100 0210 	add.w	r2, r0, #16
 8009c50:	4618      	mov	r0, r3
 8009c52:	4553      	cmp	r3, sl
 8009c54:	db33      	blt.n	8009cbe <__lshift+0xb6>
 8009c56:	6920      	ldr	r0, [r4, #16]
 8009c58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c5c:	f104 0314 	add.w	r3, r4, #20
 8009c60:	f019 091f 	ands.w	r9, r9, #31
 8009c64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c6c:	d02b      	beq.n	8009cc6 <__lshift+0xbe>
 8009c6e:	f1c9 0e20 	rsb	lr, r9, #32
 8009c72:	468a      	mov	sl, r1
 8009c74:	2200      	movs	r2, #0
 8009c76:	6818      	ldr	r0, [r3, #0]
 8009c78:	fa00 f009 	lsl.w	r0, r0, r9
 8009c7c:	4302      	orrs	r2, r0
 8009c7e:	f84a 2b04 	str.w	r2, [sl], #4
 8009c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c86:	459c      	cmp	ip, r3
 8009c88:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c8c:	d8f3      	bhi.n	8009c76 <__lshift+0x6e>
 8009c8e:	ebac 0304 	sub.w	r3, ip, r4
 8009c92:	3b15      	subs	r3, #21
 8009c94:	f023 0303 	bic.w	r3, r3, #3
 8009c98:	3304      	adds	r3, #4
 8009c9a:	f104 0015 	add.w	r0, r4, #21
 8009c9e:	4584      	cmp	ip, r0
 8009ca0:	bf38      	it	cc
 8009ca2:	2304      	movcc	r3, #4
 8009ca4:	50ca      	str	r2, [r1, r3]
 8009ca6:	b10a      	cbz	r2, 8009cac <__lshift+0xa4>
 8009ca8:	f108 0602 	add.w	r6, r8, #2
 8009cac:	3e01      	subs	r6, #1
 8009cae:	4638      	mov	r0, r7
 8009cb0:	612e      	str	r6, [r5, #16]
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	f7ff fdd6 	bl	8009864 <_Bfree>
 8009cb8:	4628      	mov	r0, r5
 8009cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	e7c5      	b.n	8009c52 <__lshift+0x4a>
 8009cc6:	3904      	subs	r1, #4
 8009cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ccc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cd0:	459c      	cmp	ip, r3
 8009cd2:	d8f9      	bhi.n	8009cc8 <__lshift+0xc0>
 8009cd4:	e7ea      	b.n	8009cac <__lshift+0xa4>
 8009cd6:	bf00      	nop
 8009cd8:	0800b000 	.word	0x0800b000
 8009cdc:	0800b011 	.word	0x0800b011

08009ce0 <__mcmp>:
 8009ce0:	b530      	push	{r4, r5, lr}
 8009ce2:	6902      	ldr	r2, [r0, #16]
 8009ce4:	690c      	ldr	r4, [r1, #16]
 8009ce6:	1b12      	subs	r2, r2, r4
 8009ce8:	d10e      	bne.n	8009d08 <__mcmp+0x28>
 8009cea:	f100 0314 	add.w	r3, r0, #20
 8009cee:	3114      	adds	r1, #20
 8009cf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009cf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009cf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009cfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d00:	42a5      	cmp	r5, r4
 8009d02:	d003      	beq.n	8009d0c <__mcmp+0x2c>
 8009d04:	d305      	bcc.n	8009d12 <__mcmp+0x32>
 8009d06:	2201      	movs	r2, #1
 8009d08:	4610      	mov	r0, r2
 8009d0a:	bd30      	pop	{r4, r5, pc}
 8009d0c:	4283      	cmp	r3, r0
 8009d0e:	d3f3      	bcc.n	8009cf8 <__mcmp+0x18>
 8009d10:	e7fa      	b.n	8009d08 <__mcmp+0x28>
 8009d12:	f04f 32ff 	mov.w	r2, #4294967295
 8009d16:	e7f7      	b.n	8009d08 <__mcmp+0x28>

08009d18 <__mdiff>:
 8009d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	4606      	mov	r6, r0
 8009d20:	4611      	mov	r1, r2
 8009d22:	4620      	mov	r0, r4
 8009d24:	4617      	mov	r7, r2
 8009d26:	f7ff ffdb 	bl	8009ce0 <__mcmp>
 8009d2a:	1e05      	subs	r5, r0, #0
 8009d2c:	d110      	bne.n	8009d50 <__mdiff+0x38>
 8009d2e:	4629      	mov	r1, r5
 8009d30:	4630      	mov	r0, r6
 8009d32:	f7ff fd57 	bl	80097e4 <_Balloc>
 8009d36:	b930      	cbnz	r0, 8009d46 <__mdiff+0x2e>
 8009d38:	4b39      	ldr	r3, [pc, #228]	; (8009e20 <__mdiff+0x108>)
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	f240 2132 	movw	r1, #562	; 0x232
 8009d40:	4838      	ldr	r0, [pc, #224]	; (8009e24 <__mdiff+0x10c>)
 8009d42:	f7fe fd45 	bl	80087d0 <__assert_func>
 8009d46:	2301      	movs	r3, #1
 8009d48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d50:	bfa4      	itt	ge
 8009d52:	463b      	movge	r3, r7
 8009d54:	4627      	movge	r7, r4
 8009d56:	4630      	mov	r0, r6
 8009d58:	6879      	ldr	r1, [r7, #4]
 8009d5a:	bfa6      	itte	ge
 8009d5c:	461c      	movge	r4, r3
 8009d5e:	2500      	movge	r5, #0
 8009d60:	2501      	movlt	r5, #1
 8009d62:	f7ff fd3f 	bl	80097e4 <_Balloc>
 8009d66:	b920      	cbnz	r0, 8009d72 <__mdiff+0x5a>
 8009d68:	4b2d      	ldr	r3, [pc, #180]	; (8009e20 <__mdiff+0x108>)
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d70:	e7e6      	b.n	8009d40 <__mdiff+0x28>
 8009d72:	693e      	ldr	r6, [r7, #16]
 8009d74:	60c5      	str	r5, [r0, #12]
 8009d76:	6925      	ldr	r5, [r4, #16]
 8009d78:	f107 0114 	add.w	r1, r7, #20
 8009d7c:	f104 0914 	add.w	r9, r4, #20
 8009d80:	f100 0e14 	add.w	lr, r0, #20
 8009d84:	f107 0210 	add.w	r2, r7, #16
 8009d88:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009d8c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009d90:	46f2      	mov	sl, lr
 8009d92:	2700      	movs	r7, #0
 8009d94:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d9c:	fa1f f883 	uxth.w	r8, r3
 8009da0:	fa17 f78b 	uxtah	r7, r7, fp
 8009da4:	0c1b      	lsrs	r3, r3, #16
 8009da6:	eba7 0808 	sub.w	r8, r7, r8
 8009daa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009dae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009db2:	fa1f f888 	uxth.w	r8, r8
 8009db6:	141f      	asrs	r7, r3, #16
 8009db8:	454d      	cmp	r5, r9
 8009dba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009dbe:	f84a 3b04 	str.w	r3, [sl], #4
 8009dc2:	d8e7      	bhi.n	8009d94 <__mdiff+0x7c>
 8009dc4:	1b2b      	subs	r3, r5, r4
 8009dc6:	3b15      	subs	r3, #21
 8009dc8:	f023 0303 	bic.w	r3, r3, #3
 8009dcc:	3304      	adds	r3, #4
 8009dce:	3415      	adds	r4, #21
 8009dd0:	42a5      	cmp	r5, r4
 8009dd2:	bf38      	it	cc
 8009dd4:	2304      	movcc	r3, #4
 8009dd6:	4419      	add	r1, r3
 8009dd8:	4473      	add	r3, lr
 8009dda:	469e      	mov	lr, r3
 8009ddc:	460d      	mov	r5, r1
 8009dde:	4565      	cmp	r5, ip
 8009de0:	d30e      	bcc.n	8009e00 <__mdiff+0xe8>
 8009de2:	f10c 0203 	add.w	r2, ip, #3
 8009de6:	1a52      	subs	r2, r2, r1
 8009de8:	f022 0203 	bic.w	r2, r2, #3
 8009dec:	3903      	subs	r1, #3
 8009dee:	458c      	cmp	ip, r1
 8009df0:	bf38      	it	cc
 8009df2:	2200      	movcc	r2, #0
 8009df4:	441a      	add	r2, r3
 8009df6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009dfa:	b17b      	cbz	r3, 8009e1c <__mdiff+0x104>
 8009dfc:	6106      	str	r6, [r0, #16]
 8009dfe:	e7a5      	b.n	8009d4c <__mdiff+0x34>
 8009e00:	f855 8b04 	ldr.w	r8, [r5], #4
 8009e04:	fa17 f488 	uxtah	r4, r7, r8
 8009e08:	1422      	asrs	r2, r4, #16
 8009e0a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009e0e:	b2a4      	uxth	r4, r4
 8009e10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009e14:	f84e 4b04 	str.w	r4, [lr], #4
 8009e18:	1417      	asrs	r7, r2, #16
 8009e1a:	e7e0      	b.n	8009dde <__mdiff+0xc6>
 8009e1c:	3e01      	subs	r6, #1
 8009e1e:	e7ea      	b.n	8009df6 <__mdiff+0xde>
 8009e20:	0800b000 	.word	0x0800b000
 8009e24:	0800b011 	.word	0x0800b011

08009e28 <__d2b>:
 8009e28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e2c:	4689      	mov	r9, r1
 8009e2e:	2101      	movs	r1, #1
 8009e30:	ec57 6b10 	vmov	r6, r7, d0
 8009e34:	4690      	mov	r8, r2
 8009e36:	f7ff fcd5 	bl	80097e4 <_Balloc>
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	b930      	cbnz	r0, 8009e4c <__d2b+0x24>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	4b25      	ldr	r3, [pc, #148]	; (8009ed8 <__d2b+0xb0>)
 8009e42:	4826      	ldr	r0, [pc, #152]	; (8009edc <__d2b+0xb4>)
 8009e44:	f240 310a 	movw	r1, #778	; 0x30a
 8009e48:	f7fe fcc2 	bl	80087d0 <__assert_func>
 8009e4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e54:	bb35      	cbnz	r5, 8009ea4 <__d2b+0x7c>
 8009e56:	2e00      	cmp	r6, #0
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	d028      	beq.n	8009eae <__d2b+0x86>
 8009e5c:	4668      	mov	r0, sp
 8009e5e:	9600      	str	r6, [sp, #0]
 8009e60:	f7ff fd8c 	bl	800997c <__lo0bits>
 8009e64:	9900      	ldr	r1, [sp, #0]
 8009e66:	b300      	cbz	r0, 8009eaa <__d2b+0x82>
 8009e68:	9a01      	ldr	r2, [sp, #4]
 8009e6a:	f1c0 0320 	rsb	r3, r0, #32
 8009e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e72:	430b      	orrs	r3, r1
 8009e74:	40c2      	lsrs	r2, r0
 8009e76:	6163      	str	r3, [r4, #20]
 8009e78:	9201      	str	r2, [sp, #4]
 8009e7a:	9b01      	ldr	r3, [sp, #4]
 8009e7c:	61a3      	str	r3, [r4, #24]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	bf14      	ite	ne
 8009e82:	2202      	movne	r2, #2
 8009e84:	2201      	moveq	r2, #1
 8009e86:	6122      	str	r2, [r4, #16]
 8009e88:	b1d5      	cbz	r5, 8009ec0 <__d2b+0x98>
 8009e8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e8e:	4405      	add	r5, r0
 8009e90:	f8c9 5000 	str.w	r5, [r9]
 8009e94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e98:	f8c8 0000 	str.w	r0, [r8]
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	b003      	add	sp, #12
 8009ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ea8:	e7d5      	b.n	8009e56 <__d2b+0x2e>
 8009eaa:	6161      	str	r1, [r4, #20]
 8009eac:	e7e5      	b.n	8009e7a <__d2b+0x52>
 8009eae:	a801      	add	r0, sp, #4
 8009eb0:	f7ff fd64 	bl	800997c <__lo0bits>
 8009eb4:	9b01      	ldr	r3, [sp, #4]
 8009eb6:	6163      	str	r3, [r4, #20]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	6122      	str	r2, [r4, #16]
 8009ebc:	3020      	adds	r0, #32
 8009ebe:	e7e3      	b.n	8009e88 <__d2b+0x60>
 8009ec0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ec4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ec8:	f8c9 0000 	str.w	r0, [r9]
 8009ecc:	6918      	ldr	r0, [r3, #16]
 8009ece:	f7ff fd35 	bl	800993c <__hi0bits>
 8009ed2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ed6:	e7df      	b.n	8009e98 <__d2b+0x70>
 8009ed8:	0800b000 	.word	0x0800b000
 8009edc:	0800b011 	.word	0x0800b011

08009ee0 <_calloc_r>:
 8009ee0:	b513      	push	{r0, r1, r4, lr}
 8009ee2:	434a      	muls	r2, r1
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	9201      	str	r2, [sp, #4]
 8009ee8:	f7fd fd54 	bl	8007994 <_malloc_r>
 8009eec:	4604      	mov	r4, r0
 8009eee:	b118      	cbz	r0, 8009ef8 <_calloc_r+0x18>
 8009ef0:	9a01      	ldr	r2, [sp, #4]
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	f7fd fd45 	bl	8007982 <memset>
 8009ef8:	4620      	mov	r0, r4
 8009efa:	b002      	add	sp, #8
 8009efc:	bd10      	pop	{r4, pc}
	...

08009f00 <_free_r>:
 8009f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f02:	2900      	cmp	r1, #0
 8009f04:	d048      	beq.n	8009f98 <_free_r+0x98>
 8009f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f0a:	9001      	str	r0, [sp, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f1a1 0404 	sub.w	r4, r1, #4
 8009f12:	bfb8      	it	lt
 8009f14:	18e4      	addlt	r4, r4, r3
 8009f16:	f7ff fc59 	bl	80097cc <__malloc_lock>
 8009f1a:	4a20      	ldr	r2, [pc, #128]	; (8009f9c <_free_r+0x9c>)
 8009f1c:	9801      	ldr	r0, [sp, #4]
 8009f1e:	6813      	ldr	r3, [r2, #0]
 8009f20:	4615      	mov	r5, r2
 8009f22:	b933      	cbnz	r3, 8009f32 <_free_r+0x32>
 8009f24:	6063      	str	r3, [r4, #4]
 8009f26:	6014      	str	r4, [r2, #0]
 8009f28:	b003      	add	sp, #12
 8009f2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f2e:	f7ff bc53 	b.w	80097d8 <__malloc_unlock>
 8009f32:	42a3      	cmp	r3, r4
 8009f34:	d90b      	bls.n	8009f4e <_free_r+0x4e>
 8009f36:	6821      	ldr	r1, [r4, #0]
 8009f38:	1862      	adds	r2, r4, r1
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	bf04      	itt	eq
 8009f3e:	681a      	ldreq	r2, [r3, #0]
 8009f40:	685b      	ldreq	r3, [r3, #4]
 8009f42:	6063      	str	r3, [r4, #4]
 8009f44:	bf04      	itt	eq
 8009f46:	1852      	addeq	r2, r2, r1
 8009f48:	6022      	streq	r2, [r4, #0]
 8009f4a:	602c      	str	r4, [r5, #0]
 8009f4c:	e7ec      	b.n	8009f28 <_free_r+0x28>
 8009f4e:	461a      	mov	r2, r3
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	b10b      	cbz	r3, 8009f58 <_free_r+0x58>
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	d9fa      	bls.n	8009f4e <_free_r+0x4e>
 8009f58:	6811      	ldr	r1, [r2, #0]
 8009f5a:	1855      	adds	r5, r2, r1
 8009f5c:	42a5      	cmp	r5, r4
 8009f5e:	d10b      	bne.n	8009f78 <_free_r+0x78>
 8009f60:	6824      	ldr	r4, [r4, #0]
 8009f62:	4421      	add	r1, r4
 8009f64:	1854      	adds	r4, r2, r1
 8009f66:	42a3      	cmp	r3, r4
 8009f68:	6011      	str	r1, [r2, #0]
 8009f6a:	d1dd      	bne.n	8009f28 <_free_r+0x28>
 8009f6c:	681c      	ldr	r4, [r3, #0]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	6053      	str	r3, [r2, #4]
 8009f72:	4421      	add	r1, r4
 8009f74:	6011      	str	r1, [r2, #0]
 8009f76:	e7d7      	b.n	8009f28 <_free_r+0x28>
 8009f78:	d902      	bls.n	8009f80 <_free_r+0x80>
 8009f7a:	230c      	movs	r3, #12
 8009f7c:	6003      	str	r3, [r0, #0]
 8009f7e:	e7d3      	b.n	8009f28 <_free_r+0x28>
 8009f80:	6825      	ldr	r5, [r4, #0]
 8009f82:	1961      	adds	r1, r4, r5
 8009f84:	428b      	cmp	r3, r1
 8009f86:	bf04      	itt	eq
 8009f88:	6819      	ldreq	r1, [r3, #0]
 8009f8a:	685b      	ldreq	r3, [r3, #4]
 8009f8c:	6063      	str	r3, [r4, #4]
 8009f8e:	bf04      	itt	eq
 8009f90:	1949      	addeq	r1, r1, r5
 8009f92:	6021      	streq	r1, [r4, #0]
 8009f94:	6054      	str	r4, [r2, #4]
 8009f96:	e7c7      	b.n	8009f28 <_free_r+0x28>
 8009f98:	b003      	add	sp, #12
 8009f9a:	bd30      	pop	{r4, r5, pc}
 8009f9c:	200003a0 	.word	0x200003a0

08009fa0 <__ssputs_r>:
 8009fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa4:	688e      	ldr	r6, [r1, #8]
 8009fa6:	429e      	cmp	r6, r3
 8009fa8:	4682      	mov	sl, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	4690      	mov	r8, r2
 8009fae:	461f      	mov	r7, r3
 8009fb0:	d838      	bhi.n	800a024 <__ssputs_r+0x84>
 8009fb2:	898a      	ldrh	r2, [r1, #12]
 8009fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fb8:	d032      	beq.n	800a020 <__ssputs_r+0x80>
 8009fba:	6825      	ldr	r5, [r4, #0]
 8009fbc:	6909      	ldr	r1, [r1, #16]
 8009fbe:	eba5 0901 	sub.w	r9, r5, r1
 8009fc2:	6965      	ldr	r5, [r4, #20]
 8009fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fcc:	3301      	adds	r3, #1
 8009fce:	444b      	add	r3, r9
 8009fd0:	106d      	asrs	r5, r5, #1
 8009fd2:	429d      	cmp	r5, r3
 8009fd4:	bf38      	it	cc
 8009fd6:	461d      	movcc	r5, r3
 8009fd8:	0553      	lsls	r3, r2, #21
 8009fda:	d531      	bpl.n	800a040 <__ssputs_r+0xa0>
 8009fdc:	4629      	mov	r1, r5
 8009fde:	f7fd fcd9 	bl	8007994 <_malloc_r>
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	b950      	cbnz	r0, 8009ffc <__ssputs_r+0x5c>
 8009fe6:	230c      	movs	r3, #12
 8009fe8:	f8ca 3000 	str.w	r3, [sl]
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ff2:	81a3      	strh	r3, [r4, #12]
 8009ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ffc:	6921      	ldr	r1, [r4, #16]
 8009ffe:	464a      	mov	r2, r9
 800a000:	f7fd fcb1 	bl	8007966 <memcpy>
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a00a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a00e:	81a3      	strh	r3, [r4, #12]
 800a010:	6126      	str	r6, [r4, #16]
 800a012:	6165      	str	r5, [r4, #20]
 800a014:	444e      	add	r6, r9
 800a016:	eba5 0509 	sub.w	r5, r5, r9
 800a01a:	6026      	str	r6, [r4, #0]
 800a01c:	60a5      	str	r5, [r4, #8]
 800a01e:	463e      	mov	r6, r7
 800a020:	42be      	cmp	r6, r7
 800a022:	d900      	bls.n	800a026 <__ssputs_r+0x86>
 800a024:	463e      	mov	r6, r7
 800a026:	4632      	mov	r2, r6
 800a028:	6820      	ldr	r0, [r4, #0]
 800a02a:	4641      	mov	r1, r8
 800a02c:	f000 fabc 	bl	800a5a8 <memmove>
 800a030:	68a3      	ldr	r3, [r4, #8]
 800a032:	6822      	ldr	r2, [r4, #0]
 800a034:	1b9b      	subs	r3, r3, r6
 800a036:	4432      	add	r2, r6
 800a038:	60a3      	str	r3, [r4, #8]
 800a03a:	6022      	str	r2, [r4, #0]
 800a03c:	2000      	movs	r0, #0
 800a03e:	e7db      	b.n	8009ff8 <__ssputs_r+0x58>
 800a040:	462a      	mov	r2, r5
 800a042:	f000 facb 	bl	800a5dc <_realloc_r>
 800a046:	4606      	mov	r6, r0
 800a048:	2800      	cmp	r0, #0
 800a04a:	d1e1      	bne.n	800a010 <__ssputs_r+0x70>
 800a04c:	6921      	ldr	r1, [r4, #16]
 800a04e:	4650      	mov	r0, sl
 800a050:	f7ff ff56 	bl	8009f00 <_free_r>
 800a054:	e7c7      	b.n	8009fe6 <__ssputs_r+0x46>
	...

0800a058 <_svfiprintf_r>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	4698      	mov	r8, r3
 800a05e:	898b      	ldrh	r3, [r1, #12]
 800a060:	061b      	lsls	r3, r3, #24
 800a062:	b09d      	sub	sp, #116	; 0x74
 800a064:	4607      	mov	r7, r0
 800a066:	460d      	mov	r5, r1
 800a068:	4614      	mov	r4, r2
 800a06a:	d50e      	bpl.n	800a08a <_svfiprintf_r+0x32>
 800a06c:	690b      	ldr	r3, [r1, #16]
 800a06e:	b963      	cbnz	r3, 800a08a <_svfiprintf_r+0x32>
 800a070:	2140      	movs	r1, #64	; 0x40
 800a072:	f7fd fc8f 	bl	8007994 <_malloc_r>
 800a076:	6028      	str	r0, [r5, #0]
 800a078:	6128      	str	r0, [r5, #16]
 800a07a:	b920      	cbnz	r0, 800a086 <_svfiprintf_r+0x2e>
 800a07c:	230c      	movs	r3, #12
 800a07e:	603b      	str	r3, [r7, #0]
 800a080:	f04f 30ff 	mov.w	r0, #4294967295
 800a084:	e0d1      	b.n	800a22a <_svfiprintf_r+0x1d2>
 800a086:	2340      	movs	r3, #64	; 0x40
 800a088:	616b      	str	r3, [r5, #20]
 800a08a:	2300      	movs	r3, #0
 800a08c:	9309      	str	r3, [sp, #36]	; 0x24
 800a08e:	2320      	movs	r3, #32
 800a090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a094:	f8cd 800c 	str.w	r8, [sp, #12]
 800a098:	2330      	movs	r3, #48	; 0x30
 800a09a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a244 <_svfiprintf_r+0x1ec>
 800a09e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0a2:	f04f 0901 	mov.w	r9, #1
 800a0a6:	4623      	mov	r3, r4
 800a0a8:	469a      	mov	sl, r3
 800a0aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0ae:	b10a      	cbz	r2, 800a0b4 <_svfiprintf_r+0x5c>
 800a0b0:	2a25      	cmp	r2, #37	; 0x25
 800a0b2:	d1f9      	bne.n	800a0a8 <_svfiprintf_r+0x50>
 800a0b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a0b8:	d00b      	beq.n	800a0d2 <_svfiprintf_r+0x7a>
 800a0ba:	465b      	mov	r3, fp
 800a0bc:	4622      	mov	r2, r4
 800a0be:	4629      	mov	r1, r5
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f7ff ff6d 	bl	8009fa0 <__ssputs_r>
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	f000 80aa 	beq.w	800a220 <_svfiprintf_r+0x1c8>
 800a0cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ce:	445a      	add	r2, fp
 800a0d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a0d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f000 80a2 	beq.w	800a220 <_svfiprintf_r+0x1c8>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0e6:	f10a 0a01 	add.w	sl, sl, #1
 800a0ea:	9304      	str	r3, [sp, #16]
 800a0ec:	9307      	str	r3, [sp, #28]
 800a0ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0f2:	931a      	str	r3, [sp, #104]	; 0x68
 800a0f4:	4654      	mov	r4, sl
 800a0f6:	2205      	movs	r2, #5
 800a0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0fc:	4851      	ldr	r0, [pc, #324]	; (800a244 <_svfiprintf_r+0x1ec>)
 800a0fe:	f7f6 f86f 	bl	80001e0 <memchr>
 800a102:	9a04      	ldr	r2, [sp, #16]
 800a104:	b9d8      	cbnz	r0, 800a13e <_svfiprintf_r+0xe6>
 800a106:	06d0      	lsls	r0, r2, #27
 800a108:	bf44      	itt	mi
 800a10a:	2320      	movmi	r3, #32
 800a10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a110:	0711      	lsls	r1, r2, #28
 800a112:	bf44      	itt	mi
 800a114:	232b      	movmi	r3, #43	; 0x2b
 800a116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a11a:	f89a 3000 	ldrb.w	r3, [sl]
 800a11e:	2b2a      	cmp	r3, #42	; 0x2a
 800a120:	d015      	beq.n	800a14e <_svfiprintf_r+0xf6>
 800a122:	9a07      	ldr	r2, [sp, #28]
 800a124:	4654      	mov	r4, sl
 800a126:	2000      	movs	r0, #0
 800a128:	f04f 0c0a 	mov.w	ip, #10
 800a12c:	4621      	mov	r1, r4
 800a12e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a132:	3b30      	subs	r3, #48	; 0x30
 800a134:	2b09      	cmp	r3, #9
 800a136:	d94e      	bls.n	800a1d6 <_svfiprintf_r+0x17e>
 800a138:	b1b0      	cbz	r0, 800a168 <_svfiprintf_r+0x110>
 800a13a:	9207      	str	r2, [sp, #28]
 800a13c:	e014      	b.n	800a168 <_svfiprintf_r+0x110>
 800a13e:	eba0 0308 	sub.w	r3, r0, r8
 800a142:	fa09 f303 	lsl.w	r3, r9, r3
 800a146:	4313      	orrs	r3, r2
 800a148:	9304      	str	r3, [sp, #16]
 800a14a:	46a2      	mov	sl, r4
 800a14c:	e7d2      	b.n	800a0f4 <_svfiprintf_r+0x9c>
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	1d19      	adds	r1, r3, #4
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	9103      	str	r1, [sp, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	bfbb      	ittet	lt
 800a15a:	425b      	neglt	r3, r3
 800a15c:	f042 0202 	orrlt.w	r2, r2, #2
 800a160:	9307      	strge	r3, [sp, #28]
 800a162:	9307      	strlt	r3, [sp, #28]
 800a164:	bfb8      	it	lt
 800a166:	9204      	strlt	r2, [sp, #16]
 800a168:	7823      	ldrb	r3, [r4, #0]
 800a16a:	2b2e      	cmp	r3, #46	; 0x2e
 800a16c:	d10c      	bne.n	800a188 <_svfiprintf_r+0x130>
 800a16e:	7863      	ldrb	r3, [r4, #1]
 800a170:	2b2a      	cmp	r3, #42	; 0x2a
 800a172:	d135      	bne.n	800a1e0 <_svfiprintf_r+0x188>
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	1d1a      	adds	r2, r3, #4
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	9203      	str	r2, [sp, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	bfb8      	it	lt
 800a180:	f04f 33ff 	movlt.w	r3, #4294967295
 800a184:	3402      	adds	r4, #2
 800a186:	9305      	str	r3, [sp, #20]
 800a188:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a254 <_svfiprintf_r+0x1fc>
 800a18c:	7821      	ldrb	r1, [r4, #0]
 800a18e:	2203      	movs	r2, #3
 800a190:	4650      	mov	r0, sl
 800a192:	f7f6 f825 	bl	80001e0 <memchr>
 800a196:	b140      	cbz	r0, 800a1aa <_svfiprintf_r+0x152>
 800a198:	2340      	movs	r3, #64	; 0x40
 800a19a:	eba0 000a 	sub.w	r0, r0, sl
 800a19e:	fa03 f000 	lsl.w	r0, r3, r0
 800a1a2:	9b04      	ldr	r3, [sp, #16]
 800a1a4:	4303      	orrs	r3, r0
 800a1a6:	3401      	adds	r4, #1
 800a1a8:	9304      	str	r3, [sp, #16]
 800a1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ae:	4826      	ldr	r0, [pc, #152]	; (800a248 <_svfiprintf_r+0x1f0>)
 800a1b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1b4:	2206      	movs	r2, #6
 800a1b6:	f7f6 f813 	bl	80001e0 <memchr>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d038      	beq.n	800a230 <_svfiprintf_r+0x1d8>
 800a1be:	4b23      	ldr	r3, [pc, #140]	; (800a24c <_svfiprintf_r+0x1f4>)
 800a1c0:	bb1b      	cbnz	r3, 800a20a <_svfiprintf_r+0x1b2>
 800a1c2:	9b03      	ldr	r3, [sp, #12]
 800a1c4:	3307      	adds	r3, #7
 800a1c6:	f023 0307 	bic.w	r3, r3, #7
 800a1ca:	3308      	adds	r3, #8
 800a1cc:	9303      	str	r3, [sp, #12]
 800a1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d0:	4433      	add	r3, r6
 800a1d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d4:	e767      	b.n	800a0a6 <_svfiprintf_r+0x4e>
 800a1d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1da:	460c      	mov	r4, r1
 800a1dc:	2001      	movs	r0, #1
 800a1de:	e7a5      	b.n	800a12c <_svfiprintf_r+0xd4>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	3401      	adds	r4, #1
 800a1e4:	9305      	str	r3, [sp, #20]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	f04f 0c0a 	mov.w	ip, #10
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1f2:	3a30      	subs	r2, #48	; 0x30
 800a1f4:	2a09      	cmp	r2, #9
 800a1f6:	d903      	bls.n	800a200 <_svfiprintf_r+0x1a8>
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d0c5      	beq.n	800a188 <_svfiprintf_r+0x130>
 800a1fc:	9105      	str	r1, [sp, #20]
 800a1fe:	e7c3      	b.n	800a188 <_svfiprintf_r+0x130>
 800a200:	fb0c 2101 	mla	r1, ip, r1, r2
 800a204:	4604      	mov	r4, r0
 800a206:	2301      	movs	r3, #1
 800a208:	e7f0      	b.n	800a1ec <_svfiprintf_r+0x194>
 800a20a:	ab03      	add	r3, sp, #12
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	462a      	mov	r2, r5
 800a210:	4b0f      	ldr	r3, [pc, #60]	; (800a250 <_svfiprintf_r+0x1f8>)
 800a212:	a904      	add	r1, sp, #16
 800a214:	4638      	mov	r0, r7
 800a216:	f7fd fcb7 	bl	8007b88 <_printf_float>
 800a21a:	1c42      	adds	r2, r0, #1
 800a21c:	4606      	mov	r6, r0
 800a21e:	d1d6      	bne.n	800a1ce <_svfiprintf_r+0x176>
 800a220:	89ab      	ldrh	r3, [r5, #12]
 800a222:	065b      	lsls	r3, r3, #25
 800a224:	f53f af2c 	bmi.w	800a080 <_svfiprintf_r+0x28>
 800a228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a22a:	b01d      	add	sp, #116	; 0x74
 800a22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a230:	ab03      	add	r3, sp, #12
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	462a      	mov	r2, r5
 800a236:	4b06      	ldr	r3, [pc, #24]	; (800a250 <_svfiprintf_r+0x1f8>)
 800a238:	a904      	add	r1, sp, #16
 800a23a:	4638      	mov	r0, r7
 800a23c:	f7fd ff48 	bl	80080d0 <_printf_i>
 800a240:	e7eb      	b.n	800a21a <_svfiprintf_r+0x1c2>
 800a242:	bf00      	nop
 800a244:	0800b174 	.word	0x0800b174
 800a248:	0800b17e 	.word	0x0800b17e
 800a24c:	08007b89 	.word	0x08007b89
 800a250:	08009fa1 	.word	0x08009fa1
 800a254:	0800b17a 	.word	0x0800b17a

0800a258 <__sfputc_r>:
 800a258:	6893      	ldr	r3, [r2, #8]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	b410      	push	{r4}
 800a260:	6093      	str	r3, [r2, #8]
 800a262:	da08      	bge.n	800a276 <__sfputc_r+0x1e>
 800a264:	6994      	ldr	r4, [r2, #24]
 800a266:	42a3      	cmp	r3, r4
 800a268:	db01      	blt.n	800a26e <__sfputc_r+0x16>
 800a26a:	290a      	cmp	r1, #10
 800a26c:	d103      	bne.n	800a276 <__sfputc_r+0x1e>
 800a26e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a272:	f7fe b9db 	b.w	800862c <__swbuf_r>
 800a276:	6813      	ldr	r3, [r2, #0]
 800a278:	1c58      	adds	r0, r3, #1
 800a27a:	6010      	str	r0, [r2, #0]
 800a27c:	7019      	strb	r1, [r3, #0]
 800a27e:	4608      	mov	r0, r1
 800a280:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <__sfputs_r>:
 800a286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a288:	4606      	mov	r6, r0
 800a28a:	460f      	mov	r7, r1
 800a28c:	4614      	mov	r4, r2
 800a28e:	18d5      	adds	r5, r2, r3
 800a290:	42ac      	cmp	r4, r5
 800a292:	d101      	bne.n	800a298 <__sfputs_r+0x12>
 800a294:	2000      	movs	r0, #0
 800a296:	e007      	b.n	800a2a8 <__sfputs_r+0x22>
 800a298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29c:	463a      	mov	r2, r7
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f7ff ffda 	bl	800a258 <__sfputc_r>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d1f3      	bne.n	800a290 <__sfputs_r+0xa>
 800a2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2ac <_vfiprintf_r>:
 800a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	460d      	mov	r5, r1
 800a2b2:	b09d      	sub	sp, #116	; 0x74
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	4698      	mov	r8, r3
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	b118      	cbz	r0, 800a2c4 <_vfiprintf_r+0x18>
 800a2bc:	6983      	ldr	r3, [r0, #24]
 800a2be:	b90b      	cbnz	r3, 800a2c4 <_vfiprintf_r+0x18>
 800a2c0:	f7fd fa8c 	bl	80077dc <__sinit>
 800a2c4:	4b89      	ldr	r3, [pc, #548]	; (800a4ec <_vfiprintf_r+0x240>)
 800a2c6:	429d      	cmp	r5, r3
 800a2c8:	d11b      	bne.n	800a302 <_vfiprintf_r+0x56>
 800a2ca:	6875      	ldr	r5, [r6, #4]
 800a2cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2ce:	07d9      	lsls	r1, r3, #31
 800a2d0:	d405      	bmi.n	800a2de <_vfiprintf_r+0x32>
 800a2d2:	89ab      	ldrh	r3, [r5, #12]
 800a2d4:	059a      	lsls	r2, r3, #22
 800a2d6:	d402      	bmi.n	800a2de <_vfiprintf_r+0x32>
 800a2d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2da:	f7fd fb42 	bl	8007962 <__retarget_lock_acquire_recursive>
 800a2de:	89ab      	ldrh	r3, [r5, #12]
 800a2e0:	071b      	lsls	r3, r3, #28
 800a2e2:	d501      	bpl.n	800a2e8 <_vfiprintf_r+0x3c>
 800a2e4:	692b      	ldr	r3, [r5, #16]
 800a2e6:	b9eb      	cbnz	r3, 800a324 <_vfiprintf_r+0x78>
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	f7fe fa02 	bl	80086f4 <__swsetup_r>
 800a2f0:	b1c0      	cbz	r0, 800a324 <_vfiprintf_r+0x78>
 800a2f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2f4:	07dc      	lsls	r4, r3, #31
 800a2f6:	d50e      	bpl.n	800a316 <_vfiprintf_r+0x6a>
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fc:	b01d      	add	sp, #116	; 0x74
 800a2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a302:	4b7b      	ldr	r3, [pc, #492]	; (800a4f0 <_vfiprintf_r+0x244>)
 800a304:	429d      	cmp	r5, r3
 800a306:	d101      	bne.n	800a30c <_vfiprintf_r+0x60>
 800a308:	68b5      	ldr	r5, [r6, #8]
 800a30a:	e7df      	b.n	800a2cc <_vfiprintf_r+0x20>
 800a30c:	4b79      	ldr	r3, [pc, #484]	; (800a4f4 <_vfiprintf_r+0x248>)
 800a30e:	429d      	cmp	r5, r3
 800a310:	bf08      	it	eq
 800a312:	68f5      	ldreq	r5, [r6, #12]
 800a314:	e7da      	b.n	800a2cc <_vfiprintf_r+0x20>
 800a316:	89ab      	ldrh	r3, [r5, #12]
 800a318:	0598      	lsls	r0, r3, #22
 800a31a:	d4ed      	bmi.n	800a2f8 <_vfiprintf_r+0x4c>
 800a31c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a31e:	f7fd fb21 	bl	8007964 <__retarget_lock_release_recursive>
 800a322:	e7e9      	b.n	800a2f8 <_vfiprintf_r+0x4c>
 800a324:	2300      	movs	r3, #0
 800a326:	9309      	str	r3, [sp, #36]	; 0x24
 800a328:	2320      	movs	r3, #32
 800a32a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a32e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a332:	2330      	movs	r3, #48	; 0x30
 800a334:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4f8 <_vfiprintf_r+0x24c>
 800a338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a33c:	f04f 0901 	mov.w	r9, #1
 800a340:	4623      	mov	r3, r4
 800a342:	469a      	mov	sl, r3
 800a344:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a348:	b10a      	cbz	r2, 800a34e <_vfiprintf_r+0xa2>
 800a34a:	2a25      	cmp	r2, #37	; 0x25
 800a34c:	d1f9      	bne.n	800a342 <_vfiprintf_r+0x96>
 800a34e:	ebba 0b04 	subs.w	fp, sl, r4
 800a352:	d00b      	beq.n	800a36c <_vfiprintf_r+0xc0>
 800a354:	465b      	mov	r3, fp
 800a356:	4622      	mov	r2, r4
 800a358:	4629      	mov	r1, r5
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7ff ff93 	bl	800a286 <__sfputs_r>
 800a360:	3001      	adds	r0, #1
 800a362:	f000 80aa 	beq.w	800a4ba <_vfiprintf_r+0x20e>
 800a366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a368:	445a      	add	r2, fp
 800a36a:	9209      	str	r2, [sp, #36]	; 0x24
 800a36c:	f89a 3000 	ldrb.w	r3, [sl]
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 80a2 	beq.w	800a4ba <_vfiprintf_r+0x20e>
 800a376:	2300      	movs	r3, #0
 800a378:	f04f 32ff 	mov.w	r2, #4294967295
 800a37c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a380:	f10a 0a01 	add.w	sl, sl, #1
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	9307      	str	r3, [sp, #28]
 800a388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a38c:	931a      	str	r3, [sp, #104]	; 0x68
 800a38e:	4654      	mov	r4, sl
 800a390:	2205      	movs	r2, #5
 800a392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a396:	4858      	ldr	r0, [pc, #352]	; (800a4f8 <_vfiprintf_r+0x24c>)
 800a398:	f7f5 ff22 	bl	80001e0 <memchr>
 800a39c:	9a04      	ldr	r2, [sp, #16]
 800a39e:	b9d8      	cbnz	r0, 800a3d8 <_vfiprintf_r+0x12c>
 800a3a0:	06d1      	lsls	r1, r2, #27
 800a3a2:	bf44      	itt	mi
 800a3a4:	2320      	movmi	r3, #32
 800a3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3aa:	0713      	lsls	r3, r2, #28
 800a3ac:	bf44      	itt	mi
 800a3ae:	232b      	movmi	r3, #43	; 0x2b
 800a3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ba:	d015      	beq.n	800a3e8 <_vfiprintf_r+0x13c>
 800a3bc:	9a07      	ldr	r2, [sp, #28]
 800a3be:	4654      	mov	r4, sl
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	f04f 0c0a 	mov.w	ip, #10
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3cc:	3b30      	subs	r3, #48	; 0x30
 800a3ce:	2b09      	cmp	r3, #9
 800a3d0:	d94e      	bls.n	800a470 <_vfiprintf_r+0x1c4>
 800a3d2:	b1b0      	cbz	r0, 800a402 <_vfiprintf_r+0x156>
 800a3d4:	9207      	str	r2, [sp, #28]
 800a3d6:	e014      	b.n	800a402 <_vfiprintf_r+0x156>
 800a3d8:	eba0 0308 	sub.w	r3, r0, r8
 800a3dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	9304      	str	r3, [sp, #16]
 800a3e4:	46a2      	mov	sl, r4
 800a3e6:	e7d2      	b.n	800a38e <_vfiprintf_r+0xe2>
 800a3e8:	9b03      	ldr	r3, [sp, #12]
 800a3ea:	1d19      	adds	r1, r3, #4
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	9103      	str	r1, [sp, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bfbb      	ittet	lt
 800a3f4:	425b      	neglt	r3, r3
 800a3f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a3fa:	9307      	strge	r3, [sp, #28]
 800a3fc:	9307      	strlt	r3, [sp, #28]
 800a3fe:	bfb8      	it	lt
 800a400:	9204      	strlt	r2, [sp, #16]
 800a402:	7823      	ldrb	r3, [r4, #0]
 800a404:	2b2e      	cmp	r3, #46	; 0x2e
 800a406:	d10c      	bne.n	800a422 <_vfiprintf_r+0x176>
 800a408:	7863      	ldrb	r3, [r4, #1]
 800a40a:	2b2a      	cmp	r3, #42	; 0x2a
 800a40c:	d135      	bne.n	800a47a <_vfiprintf_r+0x1ce>
 800a40e:	9b03      	ldr	r3, [sp, #12]
 800a410:	1d1a      	adds	r2, r3, #4
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	9203      	str	r2, [sp, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	bfb8      	it	lt
 800a41a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a41e:	3402      	adds	r4, #2
 800a420:	9305      	str	r3, [sp, #20]
 800a422:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a508 <_vfiprintf_r+0x25c>
 800a426:	7821      	ldrb	r1, [r4, #0]
 800a428:	2203      	movs	r2, #3
 800a42a:	4650      	mov	r0, sl
 800a42c:	f7f5 fed8 	bl	80001e0 <memchr>
 800a430:	b140      	cbz	r0, 800a444 <_vfiprintf_r+0x198>
 800a432:	2340      	movs	r3, #64	; 0x40
 800a434:	eba0 000a 	sub.w	r0, r0, sl
 800a438:	fa03 f000 	lsl.w	r0, r3, r0
 800a43c:	9b04      	ldr	r3, [sp, #16]
 800a43e:	4303      	orrs	r3, r0
 800a440:	3401      	adds	r4, #1
 800a442:	9304      	str	r3, [sp, #16]
 800a444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a448:	482c      	ldr	r0, [pc, #176]	; (800a4fc <_vfiprintf_r+0x250>)
 800a44a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a44e:	2206      	movs	r2, #6
 800a450:	f7f5 fec6 	bl	80001e0 <memchr>
 800a454:	2800      	cmp	r0, #0
 800a456:	d03f      	beq.n	800a4d8 <_vfiprintf_r+0x22c>
 800a458:	4b29      	ldr	r3, [pc, #164]	; (800a500 <_vfiprintf_r+0x254>)
 800a45a:	bb1b      	cbnz	r3, 800a4a4 <_vfiprintf_r+0x1f8>
 800a45c:	9b03      	ldr	r3, [sp, #12]
 800a45e:	3307      	adds	r3, #7
 800a460:	f023 0307 	bic.w	r3, r3, #7
 800a464:	3308      	adds	r3, #8
 800a466:	9303      	str	r3, [sp, #12]
 800a468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46a:	443b      	add	r3, r7
 800a46c:	9309      	str	r3, [sp, #36]	; 0x24
 800a46e:	e767      	b.n	800a340 <_vfiprintf_r+0x94>
 800a470:	fb0c 3202 	mla	r2, ip, r2, r3
 800a474:	460c      	mov	r4, r1
 800a476:	2001      	movs	r0, #1
 800a478:	e7a5      	b.n	800a3c6 <_vfiprintf_r+0x11a>
 800a47a:	2300      	movs	r3, #0
 800a47c:	3401      	adds	r4, #1
 800a47e:	9305      	str	r3, [sp, #20]
 800a480:	4619      	mov	r1, r3
 800a482:	f04f 0c0a 	mov.w	ip, #10
 800a486:	4620      	mov	r0, r4
 800a488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a48c:	3a30      	subs	r2, #48	; 0x30
 800a48e:	2a09      	cmp	r2, #9
 800a490:	d903      	bls.n	800a49a <_vfiprintf_r+0x1ee>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0c5      	beq.n	800a422 <_vfiprintf_r+0x176>
 800a496:	9105      	str	r1, [sp, #20]
 800a498:	e7c3      	b.n	800a422 <_vfiprintf_r+0x176>
 800a49a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a49e:	4604      	mov	r4, r0
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e7f0      	b.n	800a486 <_vfiprintf_r+0x1da>
 800a4a4:	ab03      	add	r3, sp, #12
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	462a      	mov	r2, r5
 800a4aa:	4b16      	ldr	r3, [pc, #88]	; (800a504 <_vfiprintf_r+0x258>)
 800a4ac:	a904      	add	r1, sp, #16
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f7fd fb6a 	bl	8007b88 <_printf_float>
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	1c78      	adds	r0, r7, #1
 800a4b8:	d1d6      	bne.n	800a468 <_vfiprintf_r+0x1bc>
 800a4ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4bc:	07d9      	lsls	r1, r3, #31
 800a4be:	d405      	bmi.n	800a4cc <_vfiprintf_r+0x220>
 800a4c0:	89ab      	ldrh	r3, [r5, #12]
 800a4c2:	059a      	lsls	r2, r3, #22
 800a4c4:	d402      	bmi.n	800a4cc <_vfiprintf_r+0x220>
 800a4c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4c8:	f7fd fa4c 	bl	8007964 <__retarget_lock_release_recursive>
 800a4cc:	89ab      	ldrh	r3, [r5, #12]
 800a4ce:	065b      	lsls	r3, r3, #25
 800a4d0:	f53f af12 	bmi.w	800a2f8 <_vfiprintf_r+0x4c>
 800a4d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4d6:	e711      	b.n	800a2fc <_vfiprintf_r+0x50>
 800a4d8:	ab03      	add	r3, sp, #12
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	462a      	mov	r2, r5
 800a4de:	4b09      	ldr	r3, [pc, #36]	; (800a504 <_vfiprintf_r+0x258>)
 800a4e0:	a904      	add	r1, sp, #16
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f7fd fdf4 	bl	80080d0 <_printf_i>
 800a4e8:	e7e4      	b.n	800a4b4 <_vfiprintf_r+0x208>
 800a4ea:	bf00      	nop
 800a4ec:	0800ae68 	.word	0x0800ae68
 800a4f0:	0800ae88 	.word	0x0800ae88
 800a4f4:	0800ae48 	.word	0x0800ae48
 800a4f8:	0800b174 	.word	0x0800b174
 800a4fc:	0800b17e 	.word	0x0800b17e
 800a500:	08007b89 	.word	0x08007b89
 800a504:	0800a287 	.word	0x0800a287
 800a508:	0800b17a 	.word	0x0800b17a

0800a50c <_read_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4d07      	ldr	r5, [pc, #28]	; (800a52c <_read_r+0x20>)
 800a510:	4604      	mov	r4, r0
 800a512:	4608      	mov	r0, r1
 800a514:	4611      	mov	r1, r2
 800a516:	2200      	movs	r2, #0
 800a518:	602a      	str	r2, [r5, #0]
 800a51a:	461a      	mov	r2, r3
 800a51c:	f7fc fff0 	bl	8007500 <_read>
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	d102      	bne.n	800a52a <_read_r+0x1e>
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	b103      	cbz	r3, 800a52a <_read_r+0x1e>
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	bd38      	pop	{r3, r4, r5, pc}
 800a52c:	20000c78 	.word	0x20000c78

0800a530 <abort>:
 800a530:	b508      	push	{r3, lr}
 800a532:	2006      	movs	r0, #6
 800a534:	f000 f8a0 	bl	800a678 <raise>
 800a538:	2001      	movs	r0, #1
 800a53a:	f000 f9bf 	bl	800a8bc <_exit>
	...

0800a540 <_fstat_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d07      	ldr	r5, [pc, #28]	; (800a560 <_fstat_r+0x20>)
 800a544:	2300      	movs	r3, #0
 800a546:	4604      	mov	r4, r0
 800a548:	4608      	mov	r0, r1
 800a54a:	4611      	mov	r1, r2
 800a54c:	602b      	str	r3, [r5, #0]
 800a54e:	f7fd f8bc 	bl	80076ca <_fstat>
 800a552:	1c43      	adds	r3, r0, #1
 800a554:	d102      	bne.n	800a55c <_fstat_r+0x1c>
 800a556:	682b      	ldr	r3, [r5, #0]
 800a558:	b103      	cbz	r3, 800a55c <_fstat_r+0x1c>
 800a55a:	6023      	str	r3, [r4, #0]
 800a55c:	bd38      	pop	{r3, r4, r5, pc}
 800a55e:	bf00      	nop
 800a560:	20000c78 	.word	0x20000c78

0800a564 <_isatty_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d06      	ldr	r5, [pc, #24]	; (800a580 <_isatty_r+0x1c>)
 800a568:	2300      	movs	r3, #0
 800a56a:	4604      	mov	r4, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	602b      	str	r3, [r5, #0]
 800a570:	f7fd f8b9 	bl	80076e6 <_isatty>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_isatty_r+0x1a>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_isatty_r+0x1a>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	20000c78 	.word	0x20000c78

0800a584 <__ascii_mbtowc>:
 800a584:	b082      	sub	sp, #8
 800a586:	b901      	cbnz	r1, 800a58a <__ascii_mbtowc+0x6>
 800a588:	a901      	add	r1, sp, #4
 800a58a:	b142      	cbz	r2, 800a59e <__ascii_mbtowc+0x1a>
 800a58c:	b14b      	cbz	r3, 800a5a2 <__ascii_mbtowc+0x1e>
 800a58e:	7813      	ldrb	r3, [r2, #0]
 800a590:	600b      	str	r3, [r1, #0]
 800a592:	7812      	ldrb	r2, [r2, #0]
 800a594:	1e10      	subs	r0, r2, #0
 800a596:	bf18      	it	ne
 800a598:	2001      	movne	r0, #1
 800a59a:	b002      	add	sp, #8
 800a59c:	4770      	bx	lr
 800a59e:	4610      	mov	r0, r2
 800a5a0:	e7fb      	b.n	800a59a <__ascii_mbtowc+0x16>
 800a5a2:	f06f 0001 	mvn.w	r0, #1
 800a5a6:	e7f8      	b.n	800a59a <__ascii_mbtowc+0x16>

0800a5a8 <memmove>:
 800a5a8:	4288      	cmp	r0, r1
 800a5aa:	b510      	push	{r4, lr}
 800a5ac:	eb01 0402 	add.w	r4, r1, r2
 800a5b0:	d902      	bls.n	800a5b8 <memmove+0x10>
 800a5b2:	4284      	cmp	r4, r0
 800a5b4:	4623      	mov	r3, r4
 800a5b6:	d807      	bhi.n	800a5c8 <memmove+0x20>
 800a5b8:	1e43      	subs	r3, r0, #1
 800a5ba:	42a1      	cmp	r1, r4
 800a5bc:	d008      	beq.n	800a5d0 <memmove+0x28>
 800a5be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5c6:	e7f8      	b.n	800a5ba <memmove+0x12>
 800a5c8:	4402      	add	r2, r0
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	428a      	cmp	r2, r1
 800a5ce:	d100      	bne.n	800a5d2 <memmove+0x2a>
 800a5d0:	bd10      	pop	{r4, pc}
 800a5d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5da:	e7f7      	b.n	800a5cc <memmove+0x24>

0800a5dc <_realloc_r>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	4607      	mov	r7, r0
 800a5e0:	4614      	mov	r4, r2
 800a5e2:	460e      	mov	r6, r1
 800a5e4:	b921      	cbnz	r1, 800a5f0 <_realloc_r+0x14>
 800a5e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	f7fd b9d2 	b.w	8007994 <_malloc_r>
 800a5f0:	b922      	cbnz	r2, 800a5fc <_realloc_r+0x20>
 800a5f2:	f7ff fc85 	bl	8009f00 <_free_r>
 800a5f6:	4625      	mov	r5, r4
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5fc:	f000 f865 	bl	800a6ca <_malloc_usable_size_r>
 800a600:	42a0      	cmp	r0, r4
 800a602:	d20f      	bcs.n	800a624 <_realloc_r+0x48>
 800a604:	4621      	mov	r1, r4
 800a606:	4638      	mov	r0, r7
 800a608:	f7fd f9c4 	bl	8007994 <_malloc_r>
 800a60c:	4605      	mov	r5, r0
 800a60e:	2800      	cmp	r0, #0
 800a610:	d0f2      	beq.n	800a5f8 <_realloc_r+0x1c>
 800a612:	4631      	mov	r1, r6
 800a614:	4622      	mov	r2, r4
 800a616:	f7fd f9a6 	bl	8007966 <memcpy>
 800a61a:	4631      	mov	r1, r6
 800a61c:	4638      	mov	r0, r7
 800a61e:	f7ff fc6f 	bl	8009f00 <_free_r>
 800a622:	e7e9      	b.n	800a5f8 <_realloc_r+0x1c>
 800a624:	4635      	mov	r5, r6
 800a626:	e7e7      	b.n	800a5f8 <_realloc_r+0x1c>

0800a628 <_raise_r>:
 800a628:	291f      	cmp	r1, #31
 800a62a:	b538      	push	{r3, r4, r5, lr}
 800a62c:	4604      	mov	r4, r0
 800a62e:	460d      	mov	r5, r1
 800a630:	d904      	bls.n	800a63c <_raise_r+0x14>
 800a632:	2316      	movs	r3, #22
 800a634:	6003      	str	r3, [r0, #0]
 800a636:	f04f 30ff 	mov.w	r0, #4294967295
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a63e:	b112      	cbz	r2, 800a646 <_raise_r+0x1e>
 800a640:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a644:	b94b      	cbnz	r3, 800a65a <_raise_r+0x32>
 800a646:	4620      	mov	r0, r4
 800a648:	f000 f830 	bl	800a6ac <_getpid_r>
 800a64c:	462a      	mov	r2, r5
 800a64e:	4601      	mov	r1, r0
 800a650:	4620      	mov	r0, r4
 800a652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a656:	f000 b817 	b.w	800a688 <_kill_r>
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d00a      	beq.n	800a674 <_raise_r+0x4c>
 800a65e:	1c59      	adds	r1, r3, #1
 800a660:	d103      	bne.n	800a66a <_raise_r+0x42>
 800a662:	2316      	movs	r3, #22
 800a664:	6003      	str	r3, [r0, #0]
 800a666:	2001      	movs	r0, #1
 800a668:	e7e7      	b.n	800a63a <_raise_r+0x12>
 800a66a:	2400      	movs	r4, #0
 800a66c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a670:	4628      	mov	r0, r5
 800a672:	4798      	blx	r3
 800a674:	2000      	movs	r0, #0
 800a676:	e7e0      	b.n	800a63a <_raise_r+0x12>

0800a678 <raise>:
 800a678:	4b02      	ldr	r3, [pc, #8]	; (800a684 <raise+0xc>)
 800a67a:	4601      	mov	r1, r0
 800a67c:	6818      	ldr	r0, [r3, #0]
 800a67e:	f7ff bfd3 	b.w	800a628 <_raise_r>
 800a682:	bf00      	nop
 800a684:	200000e0 	.word	0x200000e0

0800a688 <_kill_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4d07      	ldr	r5, [pc, #28]	; (800a6a8 <_kill_r+0x20>)
 800a68c:	2300      	movs	r3, #0
 800a68e:	4604      	mov	r4, r0
 800a690:	4608      	mov	r0, r1
 800a692:	4611      	mov	r1, r2
 800a694:	602b      	str	r3, [r5, #0]
 800a696:	f000 f909 	bl	800a8ac <_kill>
 800a69a:	1c43      	adds	r3, r0, #1
 800a69c:	d102      	bne.n	800a6a4 <_kill_r+0x1c>
 800a69e:	682b      	ldr	r3, [r5, #0]
 800a6a0:	b103      	cbz	r3, 800a6a4 <_kill_r+0x1c>
 800a6a2:	6023      	str	r3, [r4, #0]
 800a6a4:	bd38      	pop	{r3, r4, r5, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20000c78 	.word	0x20000c78

0800a6ac <_getpid_r>:
 800a6ac:	f7fc bfea 	b.w	8007684 <_getpid>

0800a6b0 <__ascii_wctomb>:
 800a6b0:	b149      	cbz	r1, 800a6c6 <__ascii_wctomb+0x16>
 800a6b2:	2aff      	cmp	r2, #255	; 0xff
 800a6b4:	bf85      	ittet	hi
 800a6b6:	238a      	movhi	r3, #138	; 0x8a
 800a6b8:	6003      	strhi	r3, [r0, #0]
 800a6ba:	700a      	strbls	r2, [r1, #0]
 800a6bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6c0:	bf98      	it	ls
 800a6c2:	2001      	movls	r0, #1
 800a6c4:	4770      	bx	lr
 800a6c6:	4608      	mov	r0, r1
 800a6c8:	4770      	bx	lr

0800a6ca <_malloc_usable_size_r>:
 800a6ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6ce:	1f18      	subs	r0, r3, #4
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	bfbc      	itt	lt
 800a6d4:	580b      	ldrlt	r3, [r1, r0]
 800a6d6:	18c0      	addlt	r0, r0, r3
 800a6d8:	4770      	bx	lr
	...

0800a6dc <sqrt>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	ed2d 8b02 	vpush	{d8}
 800a6e2:	ec55 4b10 	vmov	r4, r5, d0
 800a6e6:	f000 f82d 	bl	800a744 <__ieee754_sqrt>
 800a6ea:	4b15      	ldr	r3, [pc, #84]	; (800a740 <sqrt+0x64>)
 800a6ec:	eeb0 8a40 	vmov.f32	s16, s0
 800a6f0:	eef0 8a60 	vmov.f32	s17, s1
 800a6f4:	f993 3000 	ldrsb.w	r3, [r3]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	d019      	beq.n	800a730 <sqrt+0x54>
 800a6fc:	4622      	mov	r2, r4
 800a6fe:	462b      	mov	r3, r5
 800a700:	4620      	mov	r0, r4
 800a702:	4629      	mov	r1, r5
 800a704:	f7f6 fa12 	bl	8000b2c <__aeabi_dcmpun>
 800a708:	b990      	cbnz	r0, 800a730 <sqrt+0x54>
 800a70a:	2200      	movs	r2, #0
 800a70c:	2300      	movs	r3, #0
 800a70e:	4620      	mov	r0, r4
 800a710:	4629      	mov	r1, r5
 800a712:	f7f6 f9e3 	bl	8000adc <__aeabi_dcmplt>
 800a716:	b158      	cbz	r0, 800a730 <sqrt+0x54>
 800a718:	f7fd f802 	bl	8007720 <__errno>
 800a71c:	2321      	movs	r3, #33	; 0x21
 800a71e:	6003      	str	r3, [r0, #0]
 800a720:	2200      	movs	r2, #0
 800a722:	2300      	movs	r3, #0
 800a724:	4610      	mov	r0, r2
 800a726:	4619      	mov	r1, r3
 800a728:	f7f6 f890 	bl	800084c <__aeabi_ddiv>
 800a72c:	ec41 0b18 	vmov	d8, r0, r1
 800a730:	eeb0 0a48 	vmov.f32	s0, s16
 800a734:	eef0 0a68 	vmov.f32	s1, s17
 800a738:	ecbd 8b02 	vpop	{d8}
 800a73c:	bd38      	pop	{r3, r4, r5, pc}
 800a73e:	bf00      	nop
 800a740:	200002b0 	.word	0x200002b0

0800a744 <__ieee754_sqrt>:
 800a744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a748:	ec55 4b10 	vmov	r4, r5, d0
 800a74c:	4e56      	ldr	r6, [pc, #344]	; (800a8a8 <__ieee754_sqrt+0x164>)
 800a74e:	43ae      	bics	r6, r5
 800a750:	ee10 0a10 	vmov	r0, s0
 800a754:	ee10 3a10 	vmov	r3, s0
 800a758:	4629      	mov	r1, r5
 800a75a:	462a      	mov	r2, r5
 800a75c:	d110      	bne.n	800a780 <__ieee754_sqrt+0x3c>
 800a75e:	ee10 2a10 	vmov	r2, s0
 800a762:	462b      	mov	r3, r5
 800a764:	f7f5 ff48 	bl	80005f8 <__aeabi_dmul>
 800a768:	4602      	mov	r2, r0
 800a76a:	460b      	mov	r3, r1
 800a76c:	4620      	mov	r0, r4
 800a76e:	4629      	mov	r1, r5
 800a770:	f7f5 fd8c 	bl	800028c <__adddf3>
 800a774:	4604      	mov	r4, r0
 800a776:	460d      	mov	r5, r1
 800a778:	ec45 4b10 	vmov	d0, r4, r5
 800a77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a780:	2d00      	cmp	r5, #0
 800a782:	dc10      	bgt.n	800a7a6 <__ieee754_sqrt+0x62>
 800a784:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a788:	4330      	orrs	r0, r6
 800a78a:	d0f5      	beq.n	800a778 <__ieee754_sqrt+0x34>
 800a78c:	b15d      	cbz	r5, 800a7a6 <__ieee754_sqrt+0x62>
 800a78e:	ee10 2a10 	vmov	r2, s0
 800a792:	462b      	mov	r3, r5
 800a794:	ee10 0a10 	vmov	r0, s0
 800a798:	f7f5 fd76 	bl	8000288 <__aeabi_dsub>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	f7f6 f854 	bl	800084c <__aeabi_ddiv>
 800a7a4:	e7e6      	b.n	800a774 <__ieee754_sqrt+0x30>
 800a7a6:	1509      	asrs	r1, r1, #20
 800a7a8:	d076      	beq.n	800a898 <__ieee754_sqrt+0x154>
 800a7aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a7ae:	07ce      	lsls	r6, r1, #31
 800a7b0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a7b4:	bf5e      	ittt	pl
 800a7b6:	0fda      	lsrpl	r2, r3, #31
 800a7b8:	005b      	lslpl	r3, r3, #1
 800a7ba:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a7be:	0fda      	lsrs	r2, r3, #31
 800a7c0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a7c4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	106d      	asrs	r5, r5, #1
 800a7cc:	005b      	lsls	r3, r3, #1
 800a7ce:	f04f 0e16 	mov.w	lr, #22
 800a7d2:	4684      	mov	ip, r0
 800a7d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7d8:	eb0c 0401 	add.w	r4, ip, r1
 800a7dc:	4294      	cmp	r4, r2
 800a7de:	bfde      	ittt	le
 800a7e0:	1b12      	suble	r2, r2, r4
 800a7e2:	eb04 0c01 	addle.w	ip, r4, r1
 800a7e6:	1840      	addle	r0, r0, r1
 800a7e8:	0052      	lsls	r2, r2, #1
 800a7ea:	f1be 0e01 	subs.w	lr, lr, #1
 800a7ee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a7f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a7f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a7fa:	d1ed      	bne.n	800a7d8 <__ieee754_sqrt+0x94>
 800a7fc:	4671      	mov	r1, lr
 800a7fe:	2720      	movs	r7, #32
 800a800:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a804:	4562      	cmp	r2, ip
 800a806:	eb04 060e 	add.w	r6, r4, lr
 800a80a:	dc02      	bgt.n	800a812 <__ieee754_sqrt+0xce>
 800a80c:	d113      	bne.n	800a836 <__ieee754_sqrt+0xf2>
 800a80e:	429e      	cmp	r6, r3
 800a810:	d811      	bhi.n	800a836 <__ieee754_sqrt+0xf2>
 800a812:	2e00      	cmp	r6, #0
 800a814:	eb06 0e04 	add.w	lr, r6, r4
 800a818:	da43      	bge.n	800a8a2 <__ieee754_sqrt+0x15e>
 800a81a:	f1be 0f00 	cmp.w	lr, #0
 800a81e:	db40      	blt.n	800a8a2 <__ieee754_sqrt+0x15e>
 800a820:	f10c 0801 	add.w	r8, ip, #1
 800a824:	eba2 020c 	sub.w	r2, r2, ip
 800a828:	429e      	cmp	r6, r3
 800a82a:	bf88      	it	hi
 800a82c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a830:	1b9b      	subs	r3, r3, r6
 800a832:	4421      	add	r1, r4
 800a834:	46c4      	mov	ip, r8
 800a836:	0052      	lsls	r2, r2, #1
 800a838:	3f01      	subs	r7, #1
 800a83a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a83e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a842:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a846:	d1dd      	bne.n	800a804 <__ieee754_sqrt+0xc0>
 800a848:	4313      	orrs	r3, r2
 800a84a:	d006      	beq.n	800a85a <__ieee754_sqrt+0x116>
 800a84c:	1c4c      	adds	r4, r1, #1
 800a84e:	bf13      	iteet	ne
 800a850:	3101      	addne	r1, #1
 800a852:	3001      	addeq	r0, #1
 800a854:	4639      	moveq	r1, r7
 800a856:	f021 0101 	bicne.w	r1, r1, #1
 800a85a:	1043      	asrs	r3, r0, #1
 800a85c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a860:	0849      	lsrs	r1, r1, #1
 800a862:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a866:	07c2      	lsls	r2, r0, #31
 800a868:	bf48      	it	mi
 800a86a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a86e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a872:	460c      	mov	r4, r1
 800a874:	463d      	mov	r5, r7
 800a876:	e77f      	b.n	800a778 <__ieee754_sqrt+0x34>
 800a878:	0ada      	lsrs	r2, r3, #11
 800a87a:	3815      	subs	r0, #21
 800a87c:	055b      	lsls	r3, r3, #21
 800a87e:	2a00      	cmp	r2, #0
 800a880:	d0fa      	beq.n	800a878 <__ieee754_sqrt+0x134>
 800a882:	02d7      	lsls	r7, r2, #11
 800a884:	d50a      	bpl.n	800a89c <__ieee754_sqrt+0x158>
 800a886:	f1c1 0420 	rsb	r4, r1, #32
 800a88a:	fa23 f404 	lsr.w	r4, r3, r4
 800a88e:	1e4d      	subs	r5, r1, #1
 800a890:	408b      	lsls	r3, r1
 800a892:	4322      	orrs	r2, r4
 800a894:	1b41      	subs	r1, r0, r5
 800a896:	e788      	b.n	800a7aa <__ieee754_sqrt+0x66>
 800a898:	4608      	mov	r0, r1
 800a89a:	e7f0      	b.n	800a87e <__ieee754_sqrt+0x13a>
 800a89c:	0052      	lsls	r2, r2, #1
 800a89e:	3101      	adds	r1, #1
 800a8a0:	e7ef      	b.n	800a882 <__ieee754_sqrt+0x13e>
 800a8a2:	46e0      	mov	r8, ip
 800a8a4:	e7be      	b.n	800a824 <__ieee754_sqrt+0xe0>
 800a8a6:	bf00      	nop
 800a8a8:	7ff00000 	.word	0x7ff00000

0800a8ac <_kill>:
 800a8ac:	4b02      	ldr	r3, [pc, #8]	; (800a8b8 <_kill+0xc>)
 800a8ae:	2258      	movs	r2, #88	; 0x58
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b6:	4770      	bx	lr
 800a8b8:	20000c78 	.word	0x20000c78

0800a8bc <_exit>:
 800a8bc:	e7fe      	b.n	800a8bc <_exit>
	...

0800a8c0 <_init>:
 800a8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c2:	bf00      	nop
 800a8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8c6:	bc08      	pop	{r3}
 800a8c8:	469e      	mov	lr, r3
 800a8ca:	4770      	bx	lr

0800a8cc <_fini>:
 800a8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ce:	bf00      	nop
 800a8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8d2:	bc08      	pop	{r3}
 800a8d4:	469e      	mov	lr, r3
 800a8d6:	4770      	bx	lr
